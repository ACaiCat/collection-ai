问题,问题具体信息,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答,回答
有哪些让你目瞪口呆的 Bug ？,空,想起来以前有一年教大班，教到交通规则，红灯停绿灯行。班里有个小孩，总是记成红灯行绿灯停。一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。又以为是不是色盲，但是他是分得清红绿的。我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？他:我爸爸妈妈一直都是红灯走的。我:6主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。他妈妈:有啊有啊我很遵守规则的！但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！她说我看不到！你这么大只挡在前面我怎么看得到！然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。最后这个困扰我俩大半个学期的bug就这么解决了。,魅族手机把sim卡名称改成“无sim卡”系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡,一个老爷子卖酸奶三块一瓶，十块三瓶来个小伙子“大爷，来瓶酸奶！”“三块！”“大爷，再来一瓶！”“三块！”“大爷，再来一瓶！”“三块！”“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”“呵呵，每天都有你这样的来一下买三瓶！”,有，不过是店员目瞪口呆，而我稳如老狗。06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。有次晚上请同学去吃，我说先来四个汉堡。店员，“四个汉堡，14.5元。”我，“不是14吗？”店员，“三个10元，加一个4.5元，是14.5元啊。”我摆摆手，“不要三个加一个，我要两个，加两个。”店员，………………好了，可以点其他的了。,以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。然后这个问题谁都没放在心上，直到过了几天又出现了！这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因后来.............后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和不小心就把插头搞接触不良断电了我们把他腿打断之后这个问题再也没出现过,写代码的时候记得把显示器屏幕擦干净点。。。。。。-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻,有一次，上班时指头被a4纸划破，虽然伤口不大，还是挺疼就用创可贴把中指贴了一圈第二天早上起来打开一看，我去竟然完全愈合，毫无痕迹突然想起周星驰电影《功夫》里的练武奇才难道，我也是？就在我向同事吹嘘时他默默来了句你看你中指旁边的指头汗……贴错指头了,看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。这个地方时以前没去过的，很远，所以很兴奋。到了现场，确实蓝屏，各种操作都不行...其实这些不重要。然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..报了产品型号350和序列号...竟然查不到。然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...按照要求，做了各种配件的更换（现场还有其他机器）就是不行...就算是重装系统，也是装不下去，一直折腾到第二天下午...问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...我按了F8进了RAID界面，随口说：这个是按F8...然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？我愣了一下，然后低头看到了HP的标....当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...真的，当时真想死了算了...IBM有350这个型号，HP也有350这个型号....不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...日了狗了！！,有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。------------再一次的分割线-------------有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。--------------原答案的分割线-------------听一个希捷的朋友说的。有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。为了抓住这个bug，朋友听了一个月的青藏高原...,"近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。图一、《诗论红楼梦》第317页截图读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。图二、《古典文献学术论丛 第5辑》第202页截图图三、《桃李集》第420页截图我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。真是怪哉！这个奇特现象真是让笔者百思不得其解了。无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。海記憶體知己2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。",那年在淘宝买笛子，商家送了个陶笛，大概长这样：娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
现实中程序员是怎样飞快敲代码的？,哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？,我来回答一下吧，一天7.5个工作小时。1.早上九点到公司，打开手机看会儿新闻，朋友圈。2.开始进入工作状态，看哈需求有没坑，再构思一下怎么写会好点。3.开始vc大法，找找以前的代码，copy一下，看一下能不能运行。如果没有，差不多就自己写，开发工具也很智能，给出提示，自动补全类。如果没搞过的，百度一下，看看别人怎么写的，能拷贝就拷贝。4.大约10.30左右，休息一会儿，喜欢抽烟的就去抽烟，不喜欢抽烟就刷一会儿朋友圈，讨论一下中午吃什么。5.这时候差不多11.30了，停下工作，准备吃饭了！6.中午吃完饭肯定是要睡一下，13.30开始工作，这种状态能持续到15.00左右。7.休息半个小时或者一个小时，聊天，抽烟，刷朋友圈。8.差不多16.00到17.30再次进入工作状态。9.准备下班了！ps整个开发过程内心是这样的傻逼客户，提的垃圾需求傻逼项目经理，做的垃圾计划傻逼产品经理，做的垃圾需求，看不懂傻逼测试，不会测试，乱点傻逼同事，写的垃圾代码傻逼架构，搞的垃圾架构傻逼百度，找不到查不到想要的问题众人：傻逼开发！,直接上视频，看看现实中程序员和想象中的程序员敲代码有何不同！视频资源加载失败是不是发现自己生活被偷窥（手动滑稽现在程序员的工资是不是被高估了？13 赞同 · 1 评论回答当然不仅仅如此：现实中，很多程序员更熟练运用 Ctrl/Command + C 和 Ctrl/Command + V。拿到一个需求，先搜有没有轮子，能直接用，绝对不自己写。能通过改改改就能用，绝对不自己写。当然，如果他写的烂，我还是会嘲讽一波，然后自己写个更好的（手动傲娇我是程序员客栈，中国领先的程序员自由工作平台，技术新人力解决方案。我们签约经验丰富的程序员，采用线上开发、驻场工作、招聘猎头等方式，帮科技企业解决软件开发和技术用人难题，为程序员提供新式工作机会。程序员客栈的使命是为程序员服务，当好程序员的经纪人，布道先进技术。程序员客栈-领先的程序员自由工作平台www.proginn.com/我的相关回答：有哪些程序员特有的技能？GitHub 上有哪些优秀的项目？为什么没有或流行的拼音编程语言？TensorFlow 如何入门，如何快速学习？,飞快敲代码？不怕秒得腱鞘炎吗？一天也就是100-200行代码，加上IDE的各种神奇自动补全功能，能敲几次键盘？如果我听到我的组员在飞快的敲键盘，我都不要站起来看，就知道他们在撩妹，不会干别的，一定是在撩妹。【此处有神秘的微笑】,先上图拿图的请自觉点赞10点前一秒赶到公司打卡范围钉钉一下慢悠悠挤电梯，上楼，放包，摆正电脑下楼买个包子或煎饼或灌饼，顺便带一杯咖啡或脉动或气泡水吃完早点10点30啦，然后抽根烟开始美好工作新一天打开文档编辑器浏览器等乱七八糟然后开始刷微博刷知乎刷微信刷一切或者去论坛啊社区啊指点江山围观热点刷到11点，看看领导状态如果盯着我或者来姨妈，就放下手机回忆回忆昨天的进度如果开会或者春风满面，继续刷刷刷反正上午是不可能敲代码的除非到了deadline11点半到45之间开始幻想中午吃啥11点45开始带薪拉屎腾空肚子12点准时拉上小伙伴抢电梯12点45或13点基本吃完饭又回到工位趴着简单刷下消息，然后开始睡觉睡到14点到14点30（看有没有人催）然后倒杯水，看状态迷迷糊糊到15点或15点半抽根烟开始正式敲代码Start >Branch 1 > 敲到18点，下楼吃饭，不饿就下楼散步19点上楼继续敲代码，或者开始搞点新技术什么的基本上没有需求就是自己玩奇奇怪怪的东西Branch 2 > 敲到17点，周一评审会，周四研讨会，周五定审会开会大约到18点30，然后下楼吃饭19点多点上楼，敲代码，或者开始搞点新技术什么的或者继续开会End >然后到21点看情况加班，比如上线或开会或挨批或批人下班以后10分钟走路到家（住的比较近）或者磨叽到10点就打车去远处朋友家彻夜撸串，或者去夜生活什么的带薪抽烟一天大概五六次的样子，一般10-15分钟，可混时间约1小时带薪拉屎基本上还是要分情况的，小号才是真的个人需求，大号都是混时间，正常人哪有那么多屎。。。大号20分钟起步吧，大概2次左右，连带着小号又是1个小时过去了基本上每天就是下午那两三个小时加上晚上一个小时，这是10 9 5工作制度10 7 5工作也差不多，只不过下午就纯敲代码，19点下班，正经工作时间差不多，但是思维比较连贯，效率稍高一点而且因为没有晚饭时间，所以加班都很急，赶紧干完赶紧走，反正没有补贴，磨叽到10点要三个小时，实在难熬，所以基本没有打过车。。。但是需求来了就真的急，往死里逼那种晚上回家熬夜继续敲，周末在家自己想办法搞定，高铁飞机继续敲紧急情况一个电话打过来，地铁上开个热点就是干所以电脑随身带，有事没事都得背个包有些复杂需求随便搞搞就到了23点了但是23点打车，显示排队50位+。。。,不，荧幕上电脑高手的原型，并不是现实中的电脑高手，而是作家本人。只有作家才需要噼里啪啦的敲键盘，这样才能让输入速度赶上他的思维。而编程语言的信息含量要远高于自然语言，所以不管是读、还是写，都远比自然语言要慢。所以初学编程，千万不要因为自己无法“流畅阅读”代码而自卑，谁都办不到的。,现实中，我看到很多程序员Ctrl+C  Ctrl+V 很熟练然后再 在里面改。————没想到这么多赞，那就补充几个具体的案例吧。——————某些跟数据库有关的项目，CV大法比自己敲快很多，也少出错。很多时候有很多字段，因此写增删改查的时候。往往是想把一个表的字段拷贝到注释的地方然后一个个剪切或者拷贝粘贴弄到相关的代码里。这样比自己敲，更不容易出错。————一些算法要求比较高的项目，但是在开源项目上，比如github只有py的，而实际项目是用php的，这个就蛋疼了，需要改。而具体操作就是像素级别的改写，具体操作是一个一个函数拷贝过去，慢慢改语法规则。——最后，现实中程序员能飞快的敲代码是一个流传很广的谣言。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。这个谣言跟一些谣言有得一拼，如：有什么广为流传的谣言？3910 赞同 · 268 评论回答程序员热爱数学和逻辑吗？97 赞同 · 2 评论回答,买过编程类图书的人应该都知道O‘REILLY的大名，这个系列的图书封面辨识度很高，标题之外通常会配有一个手绘的动物形象，比如这样:有网友制作了一个O‘REILLY封面生成器（链接在文末），让人们可以自己填写文字内容，生成类似风格的书籍封面。于是就有了以下的作品，调侃了现实中程序员的工作状态：「Copying and Pasting from Stack Overflow」「从Stack Overflow粘贴复制」「Trying Stuff Until it Works」「不断尝试直到成功为止」「Changing Stuff and Seeing What Happens」「改变一些代码看看会发生什么」「Googling the Error Message」「搜索错误代码」生成器链接：O RLY Parody Book Cover Generator国内网友制作的版本（支持中文）：O'RLY Cover Generator欢迎关注>> @文森特·凡喵,Google在职程序员，坐标硅谷。我的代码贡献量在组里还算top， 但是讲真，我敲击键盘的频率非常低。写代码的时候，我有相当一部分时间在【Ctrl+C】+【Ctrl+V】。Google internal IDE Cider-V的AI插件会随后自动猜测出我大概要写什么代码，然后自动填写大致内容。之后，我会扫一遍代码，确保没有逻辑错误，并且进行调优。我的大部分时间其实花在并不限于：系统设计模块设计寻找已有的类似实现调试调优这些重要工作都不需要疯狂的敲代码。如果我以180迈的速度飞快打字，那只有三件事：聊天撕逼写知乎最后给大家欣赏一下我的工作专用人体工程学键盘：逃…….更多文章，请关注我的专栏：投资理财之路程序员之路计算机科学专栏金融学专栏留学、求职、生活、思考baicaioyzy29 次咨询5.0卡耐基梅隆大学 计算机工程学硕士20394 次赞同去咨询,一定要用机械键盘，因为声音大，要干就干得轰轰烈烈，让全世界都知道你每天8小时都在写代码；一定要用vim，因为快捷键多，可以增加按键次数，让别人听起来你一直没停；按回车键的时候一定要最用力，让别人知道你这么快又写了一行；按删除键不要太用力，否则别人会认为你老在写没用的代码；一定要戴上耳机，因为别人说你太吵你可以假装听不见。再补充一个，就像评论里面很多人同意的那样，机械键盘要选青轴，青轴可以敲出很悦耳的声音，传说可以练成钢琴手。,Google研究过，一个程序员一天能够写出的高质量代码也就是100-200行。哪里需要飞快的敲键盘。像sloth一样一指禅都来得及。程序员工作的本质是用程序来解决问题。程序员大部分的时间还是用在寻找解决方案，测试验证方案。用在敲打码上的时间很少。如果你看到程序员在飞快的敲代码，那多半是在和PM撕逼，或者写文档。,自己剪辑的视频里面有一段就很好的诠释这个问题。代码从没飞快过，只有我们被气的飞天。写代码总共有两种情况1、一动不动的呆着，想了半天，哦，要这样，然后一个一个的打出来，速度慢的旁边人看着都急。一般逻辑性强的人，打得非常慢，也非常稳，飞快是不存在的。2、复制粘贴小修改，开会撕逼再吃饭。程序员不会追求飞快，那样是无意义的，要追求的是思路清晰，码字沉稳，中间不会被产品、运营、实习生等一系列问题打断。一个人安静独处时多么重要，就跟程序员的电脑，下班后从不会关机一样。而现实中想更快速更沉稳的敲代码，只可能多练，多敲，多看项目，在自己脑子里形成事件线路。就跟我们要多刷题是一样的道理。来来来，赶快把下面小项目都收藏了，让手速，快人一步。javaEE电商项目资料链接：https://pan.baidu.com/s/13AV_9UsvAoQuP2BRkCKkrw 密码：eilwlinux项目百万电商系统架构设计配套资料：https://pan.baidu.com/s/1a-FtJ2tl3zPw0ybxGoe_4Q 提取码：220t容器化部署微服务项目配套资料：https://pan.baidu.com/s/16OPPtfe-6KF6V8MVEEOBBA 提取码：i9o3python实现头条项目接口自动化测试实战配套资料：https://pan.baidu.com/s/1aIqVKrdoeZO44DszzqTiNw 提取码：i4m7电商秒杀项目实战终结版配套资料：https://pan.baidu.com/s/1QHu5JuazxorzbcnmNzqaRA 提取码：8t6e电商项目秒杀系统实战（一）配套资料：https://pan.baidu.com/s/1kmd5yNORVQAyxK_bjhBXyQ 提取码：twc6电商项目秒杀系统实战（二）配套资料：https://pan.baidu.com/s/16LYHO0XRjmHwoLDxlVi6aw 提取码：oa6k电商秒杀项目实战终结版配套资料：https://pan.baidu.com/s/1QHu5JuazxorzbcnmNzqaRA 提取码：8t6eJAVA完整游戏项目开发：大咖带你玩得风生水起配套资料：https://pan.baidu.com/s/1aiHz5txPxnt2PenUBpE_iA 提取码：cuw2物流项目商城项目Android毕设项目_点赞数上升有点快啊，那就五个视频都给链接吧。,"呵呵，不要被电影骗了，就算是黑客，也用不着噼里啪啦没完没了地敲键盘。剧情有趣还表现真实（仅指操作计算机）的黑客类电影我安利《防火墙》（主演:哈里森·福特,曾饰演《空军一号》中的美国总统），虽然里面用的是老掉牙的 Windows XP，好在 UNIX/Linux 及 iptables 这些年交互上并没多少变化。瞧瞧人美国总统（哦不，安全主管）和黑客敲代码/命令的“速度”，已经非常快了，但也没有不停的敲，毕竟电脑运行也要时间。防火墙 (豆瓣)movie.douban.com/subject/1474762/而程序员是不是抢票都要写代码？这得说说为什么要写代码了，写代码的目的就是把流程描述出来，然后嘛，让机器替代你不厌其烦的、没完没了的执行呗。所以，抢个票为啥要边写代码边抢呢？写个 JS 让他不厌其烦的替你点呀点呗，至于程序员，喝杯茶听听歌，等着唱“在那山的那边、海的那边有一群……”。鱼·后花园 - 鱼の后花园www.fishlee.net/围观一下最早的作者。当然了，现在都被收编了，铁老大也松口开始开放更多接口创收，抢票插件/软件也都不再那么没个正经了。现实中敲得快不快，别人我不知道，至少我敲了一二十年，肯定没此刻打字快；敲 10 分钟休息 1 小时，挠挠头、喝喝茶、吵吵架，基本上就这个样子。关于敲代码快不快有个悖论：如果对一个问题很熟悉能连续的敲代码完成这个任务，那么我为什么要重复地、不停地敲呢？把它封装好下次直接调用/设置不就行了？所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。",电视剧看多了吧。程序员更多的还是脑力劳动，而一些影视作品里那样霹雳哗啦的敲键盘的是真正的体力劳动。上海堡垒中操作无人机手指都没接触到键盘，一大堆代码就噼里啪啦出来了，你也敢信？先说下我前天的工作：9点起床，洗漱；9:10分开车到公司；9:30到会议室开会；11:20会议结束，去泡壶枸杞菊花茶；11:30处理邮件，打开聊天工具看下消息；12点打开IDE，准备写代码。突然惊奇听到同事喊吃饭。13点午休；14点起床，上个厕所先；14:10分回座位的路上巧遇产品经理，一起顺便讨论个需求；14:50服务器同学说对下技术方案；15:30测试同学问这个需求怎么测，一起过下用例；16点参加隔壁小王同学代码评审；17:30回到座位上，旁边的同学问这个技术难题怎么解决，去帮他分析问题；18点以为终于可以敲代码了，却又惊奇发现到饭点了，先去跑个步；19点跑步结束，到家了，吃晚饭；19:30去公司；20点再开个会；21:30写个周报月报总结专利啥的；22点终于顺利打开IDE准备干活，leader丢个bug过来，这个问题你先看下，和测试沟通怎么复现，然后看代码；23:30夜深人静，终于可以敲代码了……在敲代码的过程可以很快，可以基本上不停，但是在实际工作中占比很少。因为前期杂事比较多，会议多，沟通多，讨论多。有产品经理，有测试工程师，有PM，有设计师，还有leader，有bug。在编程过程中，脑子中思考的是各种各样的逻辑和架构，注重先思后写。在开发一个较复杂的程序前，会经历很多步骤，比如画流程图，写文档，画架构图等等，而真正的编码则是在一切都想清楚以后才会开始进行的。甚至，高级程序员可以使用编辑器和IDE的自动完成功能，避免手动输入代码的错误。除了intellisense之外，还有很多其他自动完成功能可以同时启用。比如自动完成行，自动完成文件路径，搜索所有打开的文件自动完成词等等。某些程序员不用这些功能并不等于它们不存在或者不重要。所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。练成熟练而快速的敲击并不是一件很难的事情，也许不到半年就能练成，但是能够编写出低耦合高效能的代码却是一个程序员毕生的追求。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。所以别被电影中的那些镜头给欺骗了。理想很丰满，现实很残酷，同志们还需多多努力。,这几点：我亦无他，唯手熟尔；快速在搜索引擎和代码编辑器之间Ctrl-Tab切换，也会给旁人造成快速敲代码的假想；Ctrl-C和Ctrl-V也是敲代码的一部分；用机械键盘，锵锵锵锵锵锵锵锵锵锵锵锵锵锵，怎么着都像是在飞快敲代码；……这次我真的凑不到7了:-),我为什么想当程序员？就是因为太懒了，同一件事干多了就干不下去。所以我要用编程语言告诉蠢萌的电脑，遇到A情况应该怎么做，遇到B情况应该怎么处理。然后让它一遍又一遍地重复我不想做的事情。所以思考的时间至少是输入时间的3倍，跟写文章差不多。敲代码也是一阵儿一阵儿的。--------以上是理想情况，现(zheng)实(qian)的情况是：我就是甲方的翻译，他需要什么功能我翻译给电脑。然而很多甲方并不知道自己需要什么功能，然后电脑干的不对还要甩锅给我。,看到这个题目就猜到高赞那个视频会出现，我也知道关心这个问题的人都不是现实中的程序员。真正的程序员必须明白一个道理，程序的灵魂是可复制性。可复制性也是软件开发区别于其他行业的最显著特点。可复制性有两层含义。一层是说代码客户有多个实例在运行，同样的程序可以在你的电脑上跑，也可以在别人的电脑上跑。另一侧含义就是代码可以开源，大部分通用需求都有开源代码可以用。一个程序跑起来所需要的代码，绝大部分都是别人写的，即使是一个“Hello World！”。程序员敲代码速度多块，都比不上找到合适的开源代码快。当你要实现一个需求的时候(例如解析一个Excel文件)，如果完全自己实现这个功能，敲代码再快也不如找到一个合适的开源库。所以，现实中的一个程序员敲键盘之前，应该首先问自己一个问题：我要实现的功能难道只有我这个产品用到吗？还拿解析Excel的例子来说，难道世界上就没有别的程序员遇到要解析Excel的需求？既然有这个需求，就早有人做过了，我绝对不是第一个遇到这个需求的人。如果有人做过了，多半就有开源代码可以用。上面这步非常重要，找到适合自己的开源库、框架、组件，是快速高效开发一个软件的前提条件。然后才是敲键盘，当然还有Ctrl C/V。记得很早以前，刚毕业的时候吧，有一次去王府井外文书店。书店里正在播放一个英文听力VCD，场景是在森林里父亲教孩子打猎。父子俩藏在草丛里，动物出现了，孩子比较慌张。父亲在儿子耳边说了三句话：First，listen。Second，think。Third，Action！我觉得短短这几个词组成的三句话非常有用，特别适合现实中的程序员们。首先，要听。听什么？做项目，听用户的声音。做产品，听产品经理的讲解。了解需求，知道真正的需求是要做什么。否则，干活不由东，累死都无功(我初三班主任经常说这句话)。然后，要想。想什么？如何能够高质量、高效率的实现功能。这其中就包括上面提到的常见通用功能如何找到可靠的开源代码。最后，才是行动。这一步才是编码。如果没有上面两步就开始编码，上午敲得多快，下午删的更快。其实，现实中的程序员，一项核心能力要求就是：如何准确快速的找到开源项目，并快速学习掌握，然后正确的应用到自己的代码中。,最近，国外有个叫 Mckay 的开发者，基于 GPT-4 做了一个代码助手：贾维斯，特别牛逼。它可以通过语音对话，自动帮你生成代码，并将代码推送到 GitHub，部署至 Vercel。就想钢铁侠电影里的贾维斯一样，自动帮你搞定一切！视频资源加载失败此外，里面还提到了一款名为 CodeWand 的工具，它能通过自然语言，结合 GPT-4 来快速开发应用。不过目前还在内测，需要申请才能试用。最近几天，我接收到的 GPT 和 ChatGPT 相关内容比较多。为了方便自己后续学习与阅读，我整理了一下 ChatGPT 玩法技巧和实用工具，最终弄成了这么一本《玩转 ChatGPT》手册，有需要的同学，可以学习下。手册地址：玩转 ChatGPT · GitHubDaily文末，照旧安利一波我们的公众号：GitHubDaily，平时主要分享比较实用或有趣的开发工具与 GitHub 开源项目，偶尔也会聊聊技术圈内最近发生的新鲜事，感兴趣的小伙伴可以关注一下～,你如果听到同事键盘噼里啪啦，手速飞快，大概率是在聊天打字，记笔记，写文档等！编程功底再深，写代码也是需要思考的！教学视频里老师编码那都是敲了无数遍的结果,短答案：敲代码的过程很快，可以基本上不停，但是在实际工作中占比很少。因为前期工作很多、很多。首先大佬会提出一个 idea，假设从 lead 这个 idea 开始。▍Design Meeting这时候基本上大多数时间都是在读代码库、看之前的相关 bug、写文档以及和各个相关的人讨论、调研。把详细的设计、工时以及 milestone 都搞出来。▍构思实现细节拿到划分好的模块之后，这期间就可以开始构思怎么实现了。有必要的话我一般还会写一个小小的 demo。主要是思考过程居多，敲代码实际上很少。一般会考虑代码架构方面 FP 还是 OOP，如果 OOP 有没有必要用的设计模式必要的 unit test具体的算法怎么实现，如果没有现成的库，可能还要去翻看 LeetCode大致有哪些类，哪些 function 或者 method参考资料：我的回答 程序员只是负责编程吗？▍敲代码这些都搞好之后，就要开始敲代码了。如果一天 8 小时算，可能平均正式敲代码的时间最多只有 1-2 小时。其他的时间全部基本都在准备编程。在这 1-2 小时内，编程基本上很快，就像代码已经提前打印在脑海里一样，直接往外冒即可。如果途中遇到卡壳，一般是搜索，看看常规的解法。Stack Overflow 肯定是必须要参考的网站之一。所以到真正敲代码环节实际上是非常迅速的，只可惜大部分时候我（们）都没有在敲代码。,我的键盘上，ctrl键，c键，v键，已经掉漆了，因为我敲代码太快了。
你的编程能力从什么时候开始突飞猛进？,空,update:评论区很多学弟学妹要求整理一个学习路线，刚写了篇文章：从小白到后端工程师的自学之路 - MutexLock的文章 - 知乎 https://zhuanlan.zhihu.com/p/130364187---------------在啃掉一本本计算机经典书籍和写下大量代码以后。疫情原因回不去学校，作为一个马上毕业，即将入职腾讯的大四生，分享一下自己的学习历程吧。本人在大学之前从未接触过编程，最开始的编程学习还是在高考完后，从书店买了本C Primer Plus，然后暑假开始啃，前前后后也就看了几十页。大一上的时候，来到了华中师范大学，还没有转专业到计算机，一直在自学C语言和看一些计算机入门书籍（编码、计算机科学概论）。当时也很迷茫，不知道以后道路如何，所以也学了一些杂七杂八的东西（前端 python啥的），所幸的是，当时坚持把C Primer Plus结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。大一下，转专业到计算机了，开始自学数据结构，算法和C++，部分看完了 数据结构与算法分析，并且把书上的数据结构实现了一遍，记得当时五月份给自己的flag是看完C++ Primer，然后每天上课看，晚饭吃完后也跑去七号楼刷书，最后囫囵吞枣似的看完了大部分。大一暑假，txr大佬 @杏仁糖 给我说他面试通过了华科的联创团队Unique Studio，而且给我说他们团队都特别厉害，有些人在军训的时候就把C++ Primer给蹲着看完了，当时十分钦佩，幻想也能够进入贵团队。于是打算在大二上的时候，去报名他们的秋招。所以，那个暑假在学校自学，呆了五十多天。最初，拿起一本APUE，看了一章后感觉看不懂又放下了。然后，又拿起一本红色封面的算法第四版，这本书看完了，并且用C++把上面的算法都实现了一遍。另外，听知乎大佬说CSAPP是必看的神书，当时也懵懵懂懂地看了前面三章，做了lab。为了学习linux，还看了一本叫linux命令行大全的书。武汉的夏天很热，只能寂寞待在宿舍的我，打开了LeetCode的世界，写了一百多道题。大二上，十月，忐忑迎来了联创的面试，前面两轮都过了，直到其特色的“熬夜测试”环节，因为实力不足+精力不足，测试败北，没有通过。清晨七点，在回学校的公交车上思考自己不足，总结是知识体系仍然不够完全，而且深度也不够。后来这个学期有点“误入歧途”的意思，入了Machine Learning的坑，记得当时花了好几个月刷完西瓜书和吴恩达机器学习课程的讲义（真佩服当时的毅力，都是英文和公式推导），后来想了想，ML/DL这个东西有点玄学，于是毅然决定成为一名做工程的程序员。总的来说，虽然这个学期的时间都投入到ML的学习中，没有学习工程方面的东西，只有用python写了一点好玩的爬虫，但是给了我以后坚定走工程方向的决心吧。大二下，这个学期是打下计算机知识基础的关键时期。从知乎找了一系列书单，看完了CSAPP（做了lab，为了bomb lab还通宵了，强迫症想让自己把炸弹都拆了）、半本算法导论、effective C++、计算机网络系统方法（前三章）、部分TCP/IP详解等，做了一些项目，比如正则引擎（这个是参考了轮子哥的教程）等等，尝试写JSON库（未遂）。其实，因为学校只是一个普通211，找到好工作的学长学姐先例很少，一直是没有信心自己能去大厂，直到当时了解到myk @孟永康 学长在春招收割了一系列offer后，才有了些许信心，相信自己如果能够像他那样努力，那么也能够找到好工作（感谢myk学长那时的鼓励和指导）。所以，定下了一年把自己水平提升到能够在大三下春招的时候拿下大厂offer的目标。大二暑假和大三上也一直为这个目标奋斗，补上了APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux多线程服务端编程、部分C++ template、部分C++ Concurrency in Action等书籍。然后，也一直没有放弃刷题，LeetCode写到了三百多道。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的协程库，阅读了一些优秀的开源项目，SGI STL、muduo、libgo、libco等。中途还对haskell产生过兴趣，打印了一本Learn Yourself Haskell For Great Good，看完后感觉坑太深，还是专注找工作吧，haskell对我一直都有很强的吸引力，但是这种也只能作为爱好吧。另外，编译器也是有这种魔力，看了部分编译原理（龙书）、部分现代编译原理（虎书）和部分Engineering a Compiler，多次尝试写自己的编译器，多次未遂（不过现在有空了，在补上之前的烂尾项目）。当年的笔记哈哈：部分学习笔记时间到了12月份，9号楼某个自习室内，txr大佬一直鼓励我去投简历找实习，本来我一直畏畏缩缩，对自己不太有信心，被鼓励后想着投就投吧。当时投了字节跳动和momenta的实习，面试都比较顺利，于是在大三上就在字节跳动开始了愉快的实习，比自己的计划早了大半年。当时为了准备面试，看了好多牛客网的面经，查漏补缺式地补齐自己的知识盲区。大三下，基本都是在实习，学习了很多工程实践上的东西，接触了go的技术栈，并且对devops和软件工程方面有了认知，包括代码管理、发布流程、微服务啥的。然后实习的时候骑驴找马，找到了腾讯的暑期实习。因为这个时候没有了找工作的压力，所以开始学一些自己感兴趣的东西，包括Rust（至今水平还是不太行）、分布式系统（DDIA、MIT6.824等），零零散散学了点东西。大三暑假，腾讯实习了两个月，开始学习kubernetes、各种中间件等实际业务用到的东西，这个时候就感觉拥有到扎实的计算机基础是最重要的东西。最后，顺利拿到了腾讯转正和字节跳动的秋招offer，两家都给的比较高，选择了工作体验更喜欢的腾讯哈哈。总的来说，学习计算机是需要积累的，花一两年时间啃下那些厚厚的经典书籍后，才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目，编程能力就能突飞猛进啦。现在回头来看，大学时光真是如此宝贵，这是人生中为数不多可以静心学习的一段时间，可以不用考虑任何其他事情，每天学习十多个小时。部分藏书：,大概……是为了追女生而写了一个游戏的时候吧。大概七年前，我为了追一个女生，以她和我为主角写了一个战棋类RPG游戏（其实还做了很多别的事情hhhhh），灵感来源于小时候玩的世嘉版《水浒传》。故事的背景是我大学，游戏名字叫做《凌工路2号》。我一直都觉得，在大学，生产力的来源主要有两件事情：deadline；荷尔蒙。这个游戏有对话系统：有战斗系统：有职业/升级/转职/职业相克系统：职业/转职系统职业相克系数表有角色属性、物品、存档系统：有剧情：视频资源加载失败视频资源加载失败地图背景是我的学校有作战系统和敌人的AI：视频资源加载失败故事的背景是我的大学，这是中心食堂和足球场：看到这个毛主席像有人应该会觉得很熟悉吧我甚至还在综合楼的自动售货机上做了一个物品买卖系统：视频资源加载失败这个游戏大概不到一万行Qt代码，没有用任何的框架和引擎，现在看来相当原始，所有的移动和动画效果都是用Qt的定时器+一堆if/else判断徒手撸出来的（当时不知道更好的办法，就这么一根筋地写了几个月）。我自己的感觉是，写代码超过5000行的时候，自己的能力会有一个飞跃——以前从没有注意过的东西开始觉得费解，从而逼迫自己思考和学习，然后进步。在我参加校招的时候，这个游戏的代码量占我当时的代码量的差不多一半……现在回想起来，我校招能进阿里，这个游戏带来的能力提升功不可没。这个游戏没有最终完成，也从未发布，静静地在我的硬盘里躺了七年。四年前我跟游戏设定的女主角结婚了。这周二我无意中看到它，拿到现在的机器上重新编译通过。在吃晚饭的时候，我问她：“你知道我当时给你写了个游戏么？“她说：“不知道啊”。代码在这里（我知道它很烂），遵守WhatTheFuckPublicLicense，随便修改：最后放几个全地图的场景，如果你和我是一个学校的，会觉得相当亲切。不过，大部分的地图都不是我做的，我自己做了中心食堂、综合楼、研教楼、校医院、一馆五个场景的室内地图。视频资源加载失败视频资源加载失败视频资源加载失败评论区炸出了很多同道中人：@杜凯 说：我去，天涯何处无知己啊，我做过一个类似的玩意 http://www.dklogs.net/xiaoming@ Authur 说（at找不到这位老哥，刚刚at错一次）：是rpg游戏。还记得98年和曾经大学同学一起在dos下用turbo pascal写过类似的rpg游戏 红楼梦，扒的剑侠情缘的图片库（分析后发现都是去掉调色板头部的bmp图片），还自己做了地图编辑器可以编辑地图，背景音乐在dos单任务系统下是用中断来持续播放，640k内存不够用，还用到了高位内存和扩展内存，由于dos下声卡驱动问题，代码只能在寝室机器上运行，曾经学校软件大赛前把寝室电脑主机搬到网吧通宵撸代码调试，把门卫大爷还有网吧老板惊得外焦里嫩——没见过来网吧还自带主机的。后来幸不辱使命，参加大赛得了二等奖（因为学校评委说一等奖不能是游戏…）往事历历在目，恍如昨日，但转瞬间已经二十载过去了，感叹…如果赞能破万的话我就把可以运行的二进制版本release到GitHub上……,大学时浑水摸鱼，毕业后大约半年，在网络上寻找自学资料时，发现了GitHub和一些程序员论坛，自学了py，然后打开了新世界的大门。包括购买了梯子，独自啃下两套纯英文官方文档，在GitHub上友好亲切的交流，刷题，看最新的软件工程实践书，等等===========更新2：===========一些人问《哈弗大学幸福课》在哪里看我是在这里看的：https://www.bilibili.com/video/BV1Gs411o71d?p=1其他的我不知道=========== 更新 ============断断续续的收到一些赞，写一些可能对大家有帮助的东西吧：1、提高知识最好的途径是读书，包括但不限于计算机四大名著《操作系统》《计算机网络》《数据结构》《计算机组成原理》。经典书籍不仅仅有完善有效的知识，更重要的是这些书里的计算机经典思想，一直到现在都没有过时，十分的有用。2、Github是个好网站，值得习惯性的到上面搜索需要的东西。比如awesome系列和一些质量很高的资料整理项目（整理常见的面试、刷题、常见工具链的git repo）3、v2ex和知乎都是很好的网站（尽管审核方面被吐槽很多），论坛上有很多很厉害的大佬，关注认真答题大佬的动态对开拓知识领域是有一些帮助的。4、善用搜索引擎（专指Google），最好能把自己最常用的工具的官方文档啃一遍。主要是习惯英文文档的表达方式+系统的认识自己所用的工具，对自己写文档也是有很多帮助的。5、因个人有长期的抑郁经历，所以对心理方面关注得也比较多，十分推荐学习《哈弗大学幸福课》。这门课的综合内容十分丰富，实践性很强，能够有效的提高生活、职场中的软技能（沟通能力、抗压能力等）（这门课另外一个很厉害的地方在于，仅仅是上课的方式，也能提高你的逻辑思维能力，毕竟据说是哈弗学生选修最多的课，课程质量极其的高）。6、有一个我自己打算做但实践得还不太好得地方：看经典开源项目得源码和架构。只看过一些小的玩票性质的开源项目，也学到了不少东西，大型的经典的开源项目还没能看（STL、Git等），这些项目对我来说主要是太庞大，时间上有些不够用。7、最近在坚持做Leetcode每日一题，也推荐大家一起刷呀。保持手感，很多题看起来简单，但评论区也能看到有趣的知识。8、关于职业规划这种事情，我以前是没有的（主要还是抑郁+低自尊影响的吧）。现在获取的信息太多太多，没有职业规划很容易被带偏。我是在做了长期的心理咨询+《哈弗大学幸福课》，工作、生活上都有一些经历了之后才慢慢想清楚自己将来的生活与工作要怎么打算。这种事情想清楚过后，做自己想做的事情目标会比较清晰，不会得过且过。感谢阅读，祝好。,"学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃;看SICP和CTM让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的""熵""(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, config等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;然而, 最大的飞跃是当我最终把重点从编程本身转移开来之后, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维, 项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人, 甚至开始关心组内的技术文化建设;这是因为“编程是最重要也是最不重要的事”这是因为编程作为把思维变为实现的这个循环的最后一步(然后写好的程序会成为新的思考输入和基础，开始新的一轮迭代开发)，它和一个项目一个系统的所有其他方面都息息相关：需求获取，问题抽象，测试，监控，部署，框架运用，系统间集成，灵活性，未来拓展性，易用性，系统健壮性，多版本实验性，高层业务决策等等，这使得编程变得无比重要(所有的一切都需要编程来最终落到实地)，也毫不重要(编程被所有其他一切所约束和指导)。能够支撑这些所有上层思考的程序才是“好程序”，能够支撑所有这些思考的程序员，才是好程序员。学好/学会编程这件事是把所有需要思考的东西都弄明白都学好之后的自然结果。而把这些思考留给别人，自己只做思维和程序的翻译器(区分创造者和工具人的关键)，根本无法写出好的程序来。这也是DDD(Domain Driven Design) 的精神之一 （关于DDD的精神，参见此文的最后一段， 阿莱克西斯：在做程序员的道路上，你掌握了什么概念或技术使你感觉自我提升突飞猛进？ ）以上引用出自自学编程需要注意什么？我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个""局部最优解"" (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己""天下无敌""了, 是我们进步的大敌 (也是曾经是我最大的敌人);",回顾一下，我的技术能力（不仅仅是编程，而是解决问题的能力）的进步大约有几个重要的节点:1. 刚入行时的入门练习题这个是当年狼厂网页搜索部门的传统，不知道现在还有没有，入职第一个任务是完成两道练习题。一题是在Linux上用纯C（不许用C++，没有stl可用）完成一个多线程的网页抓取器，另一题是同样的环境语言完成2G大小的query（搜索查询词）的top100提取，有时间要求。入厂之前我在Linux上没有写过代码。两天时间从Linux基本命令的熟悉，vim gcc gdb的使用学习，从malloc和free开始搞内存管理，从0开始码hashtable(还得自己写hash函数），从socket开始实现http client和各种协议码解析，使用pthread多线程和信号量互斥同步，基本把操作系统计算机网络复习了一遍。这两天把我四年本科三年研究生没搞扎实的工程基础全部补上了。结论:有目的的练习，尤其是一个完整的应用问题的解决，是学习的不二法门。2. 接手一个完整的模块（子系统）搞完入门练习，leader过来跟我说：小胡，现在有一个重要的模块交给你，赶紧熟悉一下，然后完成如下功能升级。这个模块是前厂存储网页的核心模块，在当年内存4g的奔腾主机上单机存储几千万网页，几台机器存下了当时整个中文互联网。支持高性能的随机存取和顺序读，可以说把机器性能压榨到了极致。3w行，纯C。啃了几天终于搞明白了结构，（多年以后我还得感谢source insight），同时也对写这个模块的大牛佩服的五体投地，为了压榨内存把每一个bit都物尽其用，各子模块之间的分工又是那么的优雅。然后是上手改，看懂了之后功能升级很简单，只改了十几行代码，但上线的时候真是手发抖！后来才知道这个模块好几个前任都没成功接下来就被fire了....后来又经历了若干次升级，解决各种诡异bug（搞过高并发存储系统的应该知道坑有多深），编码和解决问题的能力突飞猛进。结论: 学习系统设计的最佳途径是看一个优秀设计的源码，检验成果的方式是改造它应用于你的实际场景。3. 接手一个完整的系统搞定存储模块之后，我的下一个任务是升级喝扩展一个完整的抓取系统。和入门练习做的抓取器不同，这个完整的抓取系统（又称spider）是工业级的，需要每天完成千万级的抓取量，还需要考虑并发压力控制，网页更新调度，垃圾网页处理，去重等等诸多现实的工程问题。大大小小十来个模块，十来万行代码，大部分是C，还有接近一万行的bash脚本（用bash实现分布式的网页去重处理你信？）这时会发现很多模块内部都有不少实现不尽如人意的地方，但是由于借口定义的好，模块直接容错性强，整个系统还是work的。这促使我思考系统级的架构，最需要关注的重点是什么，良好的结构远胜于细节的雕琢。大约小半年后，我对这个系统基本做到出任何问题能立刻反映到是那个模块出的问题，对问题的分析定位能力又上了一个台阶。结论: 理解了接口定义和系统结构重于实现细节，就迈出了架构师的第一步4. 设计一个完整的子系统此时大概工作快两年了，原来的抓取系统有一个很大的问题，就是积累的网页数太多，更新资源分配不过来，导致系统中大量网页在互联网上已经404但仍然会进到线上被检索出来。我们称之为死链接问题通过对死链的规律分析，我发现互联网上大部分死链存在站点或目录级聚集的现象，这个其实很好理解，一个网站无力维护了，自然就全部挂掉，目录级很可能是网站改版了，或者一个子频道关闭了。利用这个规律，我们可以大幅度降低死链检测的资源耗费。在这个认识的基础上，我设计了一个独立的死链检测系统。上线效果很不错，检查死链的流量开销降低到原来10%，网页库中死链还下降了。结论: 架构师首选要解决的是待解决问题的精确描述，和对问题域的分布规律的挖掘，然后才是结构设计。5. 设计一个新的系统工作第四，五年间，hadoop在业界逐渐流行起来，基于Google三件套的设计，当年的hadoop最上层的table还很不完善，但是mapreduce和hdfs已经很可以用了。 如何利用分布式基础框架改造系统，让系统更健壮（以及永更廉价的硬件給公司省钱），成了当时的一个重要问题。整个抓取系统和建库系统的分布式改造，相当于重新设计一个新的大系统。需要考虑方方面面，如何逐步升级兼容原有系统？如何保证功能的完整性？原有设计中有一些不合理的地方，如何利用这次迁移同步改造？主导完这些工作后，系统架构方面再也没有遇到搞不定的问题。结论: 好的架构师需要在合适的时机解决重要的问题，业务发展才能给你这样的机会。上面5个节点，大致是T3 T4 T5 T6 T8的水平。新冠在家隔离，半夜睡不着码字这么多。看完给个赞呗。,阶段一：啥也不会，抄代码都运行不起来，学会了百度+google，学会了舔着逼脸去求大神。阶段二：学会天坛看教学视频，得瑟能写一些页面，停留在CURD阶段，顶多培训毕业水平，疑难杂症无能为力。阶段三：开始了解底层，看书研究底层，原来发现全是数据结构算法、操作系统、网络底层，开始沉迷研究底层技术，用优雅的设计。阶段四：知道一些底层，开始跟别人喷技术的优雅性，忽略了我们技术是为了业务带来收益。阶段五：能灵活判断业务的情况，给出合理的技术架构。总之，突飞猛进的时候是自己会实践用起来，同时在项目环境中碰到问题，研究底层最终解决疑难杂症，随着经历无数个疑难杂症的积累，也就是这时候。说明：很多小伙伴都在问，就是抛出了现象没说每个阶段怎么解决问题，大家可随便评论区问问题，我收集完统一系统性回答。没想到瞎写写这么多赞，谢谢大家！01近年来，有些读者会问我一些形形色色的问题，让我很难去回答，甚至给不出建设性的意见。举个例子：1. 我学习什么能进入优秀的互联网公司工作？2. 我想做研发我应该学习什么？众所周知，这问题就像你问学霸说你这么厉害一样让人难以回答。我作为一个双非软工本科学生，经过大学自己摸索和不断试错，毕业开始在百度从事研发工作。其实，我当时也有很多的疑惑，在这里给大家讲讲我的踩坑历程。记忆中，我当年逛知乎、求助高人、甚至我的导师，都无法给出一个可操作的建议。除此之外，在我那种二本学校，知名企业都不会去咱学校校招，我和学长们对春秋招的概念微乎其微，进大厂是件很困难的事情，概率与踩狗屎不相上下。作为探路者，求助知乎和论坛，给出的结论几乎都是好好学习数据结构/算法、现在大数据很火你应该学学Hadoop/Spark、你要是会微服务、docker、k8s一定会很加分。让我想起了我当年问学霸题目如何解？学霸说：这个题目是来源于第X章第X例题，你这样解，答案就出来了，很容易的。至于为什么他能想到，鬼也不知道。当时，我真的是花里胡哨的啥都学，啥都去倒腾，不知道是不是梁静茹给我的勇气。前端、后端技术栈、Hadoop/Spark、docker/k8s这些几乎都实操过，只是很多只是入门并没有深入研究，效果自然也十分有限。这些概念，对于小白或者在校生来说，这仿佛在对说你不用学了，除非你天生技术欲望特别强烈。这对于大多数普通人来说，明显是劝退的节奏，可操行十分有限，几乎没有参考价值，不知道从何下手。其实，道理是没有错的，多研究底层和热门技术栈是有益的。但是，脱离实际情况谈技术就是扯犊子，就像让中国男足拿世界杯冠军显然不符合实际，更应该是根据实际情况，做产出最大的事情，否则会信心全无。接下来，我系统性拆分问题，在不同阶段应该「学什么」、「如何学」、「学到什么程度」，重点讲我当时遇到的问题，还有我是如何去思考的，最终如何解决的，思路比结论重要。02根据问题归类来看，主要在我自己的角度谈谈普通本科如何实现进入Top级互联网工作？首先，说说在大厂工作都是些什么样的人，他们当年都是背着什么光环混进去的？经过我的调研和分析，重点说一下在校招中面试官看中和考察的东西。学历/专业、扎实专业基本功有成果的科研经历省/国家级软件设计大赛丰富互联网公司实习经历小有名气的开源项目经历大概思路就是，要么你证明你令人信服的天赋如逻辑系统思维、聪明，让人觉得你可以被快速培养；要么你有丰富的工程实战经验，证明你具备优秀工程师的潜质。当然，你可能会说这么多要求，恐怕神仙也做不到啊，简单太苛刻了。在这里，并不是上述要点全部满足，只是满足其中两项证明你的实力即可，毕竟面试时间十分有限必须有点让人信服的东西啊。举个例子：1、假设你是上海交大、华中科大大学毕业的学生，你可能只需要重点复习数据结构/算法等专业知识，辅之把学校的科研经历说一下。可能进入什么阿里华为百度问题都不是很大，专业知识对于你们来说自己不再话下，毕竟考理论就是你们的特长。2、假如你是双非大学毕业的学生，那么你必须用国家级大赛、开源项目、互联网公司经历证明自己。总之，多做项目，专注于技术本身，让自己更早具备职业软件工程师的实战技能。简而言之，你没有光环，那就比别人多努力点，提前做好职业规划，把时间投入技术本身不要投机取巧。03鉴于上述分析，知道需求是什么？对于我们来说，主要把精力投入在技术本身。接下来，我们将面临一系列问题。 1. 我应该做什么方向？（方向） 2. 我应该学习什么内容？（规划） 3. 我如何学这些内容？（方法/策略） 4. 我应该学到什么程度？（量化） 5. 如何把理论用到实际项目/产品中？（产出）不同方向，意味着不同领域不同，学习的知识和实战项目有共性也有差异。在这里，我主要讲一下通用的思路。重点拿我擅长方向举例，其他方向可按照同样思路举一反三。根据我的经验，可将内容分为原理、应用、擅长方向三个纬度。原理和应用纬度必须学习，方向纬度根据自己擅长方向深入学习。原理：计算机网络、操作系统、数据结构/算法，这些东西都是专业课好好学即可，数据结构/算法可以偶尔刷题。校招的时候再重点复习，初级阶段不必花太多时间深究。应用：它是最基础的内容，不管你从事什么领域都将离不开它们。这也是小白入门重点花费时间的地方，你将在这里不断与程序斗争如调试、验证、异常、解决。方向：不同方向本质上就是在基础应用上扩充，发挥它们擅长领域和特性去解决特定问题。在这里，简单列一下涉及的技术栈。后端开发：消息队列、缓存、rpc、微服务。大数据开发：Hadoop、Spark、Storm、Flink自动化运维：elk、ansible、zabbix、docker、k8s04基于上述分析，主要讲了整体思路，大家可能会觉得有点不太好理解。接下来，拿我当时遭遇的处境进行举例阐述，这样让不同水平或时期的同学有不一样的体会。假如有时光机让时间往后倒退3年，时间来到我刚上大二的时候，作为一枚小萌新开始学习JAVA走上后端开发之路。对于我来说，操作系统原理、计算机网络先战略性放弃，毕竟刚接触编程，看高大上的原理，每次上课都想睡觉。当然，数据结构/算法我还能好好听听，毕竟我数学功底还行让我不排斥。为什么不先学习基础性原理？举例：假设你学骑自行车，你是直接上去就蹬？还是先把轮子拆下来研究清楚原理再去学习怎么蹬？重点：根据我的经历，在新手阶段不管是接触新的语言，还是新的方向。最快的方式就是先把自行车蹬起来，等你蹬熟练了再去研究轮子是怎么造出来的。根据上述策略，刨除我踩的一些坑，我把学习征途划分四个阶段，实现学习效率的最优解。第一阶段：新手入门在我入门的时候，我遇到的最大困难是代码不会写，DEBUG不会做，程序报错不会看毫无头绪，甚至大家常说的百度一下的关键字我也不知道搜。这时候，最大的目标就是根据百度/查文档/看视频，把程序调试出预期结果，甚至你抄代码都行，很多时候抄代码你都不一定能DEBUG出预期结果。这就是现实，主要就是要把对编程的排斥消磨殆尽。这个阶段，不需要太关注底层实现原理，最重要的工作就是把应用层面的技术，不断练习直到熟练掌握上面提到的应用纬度「 编程语言、Linux、数据库、HTTP网络协议 」。时间：3-6月目标：会调试、会查文档、会用搜索引擎内容：JAVA基础语法、MYSQL数据库、Linux操作系统、HTTP通信协议方法：只关注如何使用技术，难以理解的背下来，不关注底层原理。成果：实现常见的管理系统模块，能部署在服务器上，供他人访问。对于现已从事计算机行业的同学，其实这部分内容非常简单，可能按照正常水平少则几天，多则不超过一周就能开发出简单模块。简单说，它顶多是普通本科毕设设计水准，主要是让新手在感官上体验软件产品。本质上，在计算机世界里，抽象来看就是数据的计算、传输、存储。随着你的经验增多，你会发现很多技术都是诞生或优化性能都是在解决计算、存储、传输的问题。 在这里，主要让大家在系统的角度感受最简单、最初级的技术模型。Linux操作系统：承载应用程序、数据库的运行，提供CPU供应用程序计算。应用程序（Java/Python/Php）：JAVA主要采用Servlet、JDBC承载网络的传输、数据库连接管理。数据库（MYSQL）：主要理解关系类数据库的存储，对数据进行操作。HTTP/TCP：熟悉重点网络协议，它分为包头/包体进行传输，包体格式可能分为form、json、pb、二进制。作为小白，我们不得不面对一个现实，小白阶段中大多数人对计算机了解几乎为零，尽管你小时候玩游戏贼牛逼。就像写个HelloWorld，你起码要安装好环境，安装好IDE，可这简单的两步都能捶死在坐的各位弟弟。幸运的是，我们在互联网如此发达的时代，市场如此火爆，视频资源可以随便搜索，甚至自动给你推荐。我是特别推荐这个时期，大家去完整找一套视频来系统学习。尽管新手视频对于现在的我来说很费时间，但是对当时小白的我来说，这是新大陆，它能带你简单过下计算机体系导图。我在课余时间学习视频，让我在课堂上学习理论的时候，能够有豁然开朗的感觉，自然就比别人强了。在这里，我就简单给大家推荐一些学习资源。假如你学习java，推荐你去尚学堂/尚硅谷/网易云课堂，它们会有成熟的学习路线，视频也是那种手把手敲的，新手学习比较友好，我狂喜的是可以不投币白嫖。第二阶段：项目练习通过第一个阶段学习，你对编程从一无所知到有所斩获，对计算机世界充满了好奇，甚至有所开心。这时候，你最应该做的就是去满足你装逼的梦想。假设你是爬虫方向，你应该去爬表情包、爬知乎数据、自动抢票，去满足你无数个装逼梦想。假设你是算法方向，你可以去研究推荐算法、图像识别模型，去做个商品推荐、人脸识秀一秀。假设你是后端方向，你可以去研究下网络编程/网站开发开发个仿微信聊天应用，体验下lowB版微信。画外音：多做项目，坑是一步一步踩出来的。作为大学生，实验室、软件设计比赛、开源社区都是你发挥现象力的天堂，这些倒腾的经历将是你毕业时最宝贵的经历。第三阶段：强化理论经过前两个阶段实践，时间来到大三，这时候基本的软件开发已入门差不多达到普通培训班毕业水平。同时，专业课如数据结构/操作系统/计算机网络也上的差不多了，对概念多多少少有初步了解。这时候，你会发现很多原理你不懂，将很难更上一层楼。你不知道使用ArrayList还是LinkedList？你不知道为什么要使用线程池？你不知道为什么分层设计使用分布式场景？你将处于写代码一时爽，一直写一直爽，遇到性能问题直接土崩瓦解。所以，你不得不去学习理论知识让你走得更远。问题：为什么在这个阶段强化理论知识？在新手阶段去强化理论知识，会让你兴趣骤减且产生学了有何用的错觉。同时，这是最好的时机，学校专业课学完你有基础概念，你有实际软件应用场景，这些东西让你深挖理论的时候会快速给你构建起基础图谱，让你兴趣激增不断体验学会的东西，将戳痛你最痛的神经，瞬间把你以前遇到的问题有新的认知，这就是答案。简单说，面向问题，解决问题，让你实实在在感受到成长，这就是成就感的力量。问题：如何高效的学习理论？其实，编程语言和计算机基础都是相通的，只要你学透一门编程语言剩下的就大同小异。当然，计算机基础毕竟是枯燥无味的，学习毕竟是有方法的。举个例子：站在编程语言的角度，你用心去总结，你会发现不管什么编程语言，变来变去都是换了个花样在谈以下内容。程序结构（数据类型、控制语句、面对对象、异常处理）集合（list、set、map）文件操作、网络通信（io、bio、nio）线程、线程池不管在面试还是技术探讨，重点考察的都是集合、网络通信、线程/线程池。源自于它跟计算机基础有紧密结合，你要优化它们你必须具备扎实基本功。基于我的研究经验，我建议大家在学习计算机基础的时候，不要因为理论而理论。你应该去通过编程语言源码去学习计算机基础，只学你当前认为最重要的。举个例子：当我去学习数据结构/算法的时候，我会一边学习源码一边思考数据结构，这样就让我有实际应用场景不会因为理论而理论。我学习list、set源码的时候，我就学会链表、栈。我学习map的时候，我就学会了红黑树、散列表。当我去学习计算机网络的时候，我会一边学习socket的用法，学习Linux网络通信模型epoll，这样就重点把网络协议学会了。同时，很多应用场景极少的理论知识，我就粗略记忆或者跳过，这样就节约了很多时间。当我去学习线程/线程池的时候，我会学习锁机制、生产者/消费者模型这些操作系统原理的重要知识，跟编程语言中关联不大的我就粗略记忆。第四阶段：深究专长经过前面三个阶段的学习，你已经具备扎实基本功和项目实战经验。接下来，你需要做的就是更加的专业化，研究一些有生产意义的东西。如果你一直写学生管理系统，这些没有价值没有意义的东西，那么毫无意义。这时候，你应该去互联网公司验证你学习的技能。除此之外，你可以去学习额外的成熟先进技术栈。这样，你就有实际业务经验，就有技术的宽度，同时又有深度，这就是你核心优势，毕竟算法/数据结构这些东西在竞争的时候大家都会。画外音：去实习，最好去大厂实习，接受互联网软件开发的挑战。要是不能，那么去研究实际企业技术栈的应用与底层研究。举个例子：假设你是后端开发，你就可以去学习微服务的技术栈，springboot、dubbo、docker、hadoop都可以去学习。除此之外，设计模式，redis原理都可以去学习研究，只有这样当你去面试的时候，你有很多话题和故事讲给别人听，你的专长研究既可以让你说业务场景，你又可以讲底层原理，对答如流。05经过上面的训练，已经具备了解决问题、快速学习、编写代码能力，也就是具备软件工程师的职业素养和扎实基本功。这时候，进入互联网公司开启职业道路，你将会很快有产出，不会陷入徘徊自闭的状态。更何况，你的职业素养已经能够让你遇到问题，能快速的学习克服困难。但是，要是让你去参加面试可不一定能独善其身，毕竟工作拧螺丝，面试造火箭可不能疏忽大意。接下来，重点讲一下如何应对面试？面试也就是把自己卖出去，让别人觉得你值。简历是至关重要的环节，所有的知识和技能全都是围绕它展开，否则毫无意义。因为在面试中，面试官关心你有什么，也就是面试完全围绕着你会的东西展开提问，所以你就把你的优势发挥到极致就行。环节一：准备简历简历一定要认真对待，一定要简介精炼，尽可能把内容压缩到一页，毕竟简历筛选就30秒不到。这时候，简历排版、简历字体、简历模板都有讲究，细节决定成败。在写简历的时候，主要分为个人资料、实习经历、项目经历、专业技能。其实，没什么技巧，参考STAR原则，重点体现你在项目中的价值和思考。要体现做了什么事情？遇到什么困难？怎么解决的？产出是什么？假设有读者需要简历模板，可关注提供给大家。环节二：梳理知识体系和刷面经以前，学习知识是零散的，学习策略更多是面向解决问题，以至于知识不系统，表达逻辑层次有限。面试官逻辑思维强，所以你必须做好充足准备才能脱颖而出。最好的策略就是梳理知识体系和准备面经，我们都知道要是你面试官问的问题是你刚好熟悉的问题，你岂不是轻松闯关成功？所以，准备考纲、梳理知识体系、疯狂刷题这就是最好的策略。按照互联网面试流程大多数分为三轮面。一轮面试：主要是考察计算机基础知识和擅长语言基础知识，重点考察数据结构/算法、网络编程、擅长语言基础。但是，绝对不是死记硬背的东西，一定是深度和广度紧密结合，环环相扣直到把你肚子里的东西全部挖出来。举个例子：获取链表倒数第N个节点的值，只许遍历一次。有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M，返回频数最高的100个词。谈谈HashMap，说下它们的数据结构？Key在HashCode取余以后，它可能全部堆积在某几个Key对应的链表上，这样就会造成该数据结构存储或者查询低效，那怎么解决呢？为什么会链表要变成红黑树，什么时候从链表变成红黑树，什么时候从红黑树变回链表？假设多个线程并发访问，那可能造成容器更新或者操作出现问题？除了使用synchronized加同步锁，还有没有其他办法解决呢？ 8. 为什么采用CAS，能说一下ConcurrentHashMap的具体实现吗？你会发现每个问题都是环环相扣，从简单到难，目的就是挖掘出你的极限。大多数情况都是，从数据结构/算法入手，扩展到编程语言特性，再扩展到并发/网络编程不断进行深挖。当直接问实际用法应试者答不出来的时候，就会再次引入到计算机基础知识，这样不断反复调度试探应试者的是深度和广度。二轮面试：这轮考察实习/项目经历，重点考察你的面试储备。众所周知，大部分应届生项目经验十分有限，大多数是图书馆管理系统、电商系统这样。重点说一下应对策略，可以去网上找你做的项目可能遇到的领域难题，去找解决办法，最终扩展补充到你的项目中。三轮面试：这轮面试更多是经理考察应试者的基础能力。也就是逻辑思维、抗压、时间管理等基础能力，看下是否能融入团队，毕竟适合团队的才是最好的。这里主要讲了思路和应对策略，至于篇幅有限，面试题只能读者自己梳理，假设有需要后续再聊。大体的思路： 1. 梳理知识体系看面试可能考哪些东西？ 2. 去网上搜寻和整理面试题？ 3. 把数据结构/算法、并发编程、网络编程串联起来，还要学会理论知识和实际实战中来回串联。总之，作为普通学校的同学，你只有花更加多的时间在项目实战中，实习/打比赛/逛开源社区，这些时间让你更快接近成为职业软件工程师。当机会来临的时候，你抓住机会就踏入大厂的大门了，幸运永远不会无缘无故眷顾你。5月24日，读者问题解答更新：经过读者提问，再附之我的思考，我大概总结出来分为这么几类问题。计算机专业需要学什么？找工作，那些计算机专业课学了有用？学不会，我到底适不适合学编程？找工作有那些方向，我应该选择什么方向？专业课和课外编程学习，如何权衡时间？学历普通，我到底是找工作还是考研？不卖光子，直接说下整体解决思路。对齐认知：计算机学什么。学习方向：确认学习方向。执行路径：具体学习内容。学习答疑：如何坚持下去。3.1 对齐认知：计算机学什么问题：那些学了有用？有用：计算机理论（算法、网络、操作系统）、项目、实习。企业招人就一个目标：来了公司能干活，培养完能干活。软件研发这职业，像奖学金、三好学生、学生会主席、英语四六级，对于咱们这职业来说用处不大，有只是能彰显有亮点可作为加分项，锦上添花。当然，你能去拿到这些东西尽量去拿，毕竟别人能拿到，你拿不到你怎么证明你比别人强？3.2 学习方向：确认学习方向前端、后端（产品或架构）、测开、运维、大数据开发、数据分析3.3 执行路径：具体学习内容从大学时间角度，每个学年会拆分出目标。从专业知识角度，根据不同解决学习不同知识。总的来说，实际操作起来还算清晰。阶段一：找培训机构视频学习，只要能独立实现可让人访问的应用如仿微信聊天软件。阶段二：做项目，你可能会学习崭新的技术栈（springboot、redis、kafka），需要什么学什么。阶段三：通过做项目使用了很多新兴技术，计算机理论知识也学了很多。这时候，你核心目标就是把学过的东西总结归纳，拿着他们去面试找工作，这时候你要能说出怎么用，还要说出为什么要用。开源学习网站：https://github.com/Snailclimb/JavaGuidehttps://github.com/CyC2018/CS-Notes要是觉得还得写不错，点击 @码农皮邱关注，有惊喜！,我有幸有个姑父在腾讯做的蛮高。。。我曾经请教过他这个问题，他的回答是 ”读顶尖代码“他有个观点，好的 programmer 不是教出来的，更多是师傅领进门。这个东西就像武侠小说，真正的高手不用你出手，光是走几步，就看得出来了（代码风格）。而所幸一切顶尖的”招式“都在 github 上有对应要做什么事情 ---> github看看做的最好的是怎么做的 ---> 代码一点点拆分、阅读、分析，看看有什么可以学习、借鉴、模仿，甚至蒙住看自己会怎么写 ---> 自己动手做，学习，比较，学习具体来说，多关注一些 github 上的技术狂热者，热衷分享技术和代码，比如 lucidrains https://github.com/lucidrains ，用 PyTorch 复现了VIT、AF2、styleGAN、DALLE2、imagen、denoising diffusion 等等各种前沿，真的是宝藏男孩,作者：阿秀计算机校招八股文网站：https://interviewguide.cn每个人的编程能力应该都是在不知不觉间慢慢提升的，仿佛“随风潜入夜，润物细无声”一般.我想正常情况下应该也没有“风如拔山努，雨如决河倾”的瞬间提升和突飞猛进。作为一个本科双非，研究生也是双非，即将入职字节跳动核心部门的普通学生，来分享一下自己在过去一年时间，也就是校招开始前一年的时间里通过自学 C++ 、操作系统、计算机网络、数据结构与算法、数据库等科目，最终顺利上岸的历程吧。身边朋友说我是逆天改命的典范，因为一个普通二本的学校学生不仅能够拿到华为、百度、B站等互联网公司的offer，还能拿到一线大厂字节跳动的SP offer！！！在如今这个十分看重学校和出身的时候，这几乎是不可能的事。老实说，我真的觉得真的有点夸张了，我只是比别人多花了点时间而已，仅此而已。他们所谓的“逆天改命”，不过是在自己坚持不下去的时候，告诉自己，再挺一下，再挺一下下就可以。首先问大家一个问题，不知道大家有没有这种情况的出现：“在实验室或者图书馆怎么想也想不出来某道题/某个 bug 的解法，但刚出实验室/图书馆，立马就想到了”。在过去一年这种情形出现在我身上太多次了。。。。话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在github上了。可以说我能够凭借双非的学历进入字节跳动全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的校招学习网站上，现在免费分享给学习学妹们！自己以前的学习笔记包括操作系统、计算机网络、数据库（MySQL、Redis）、常见情景题、智力题以及计算机面试中需要注意的问题。下面是我的校招学习笔记网站内容大纲《阿秀的校招学习笔记》网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！这是我的学习笔记网站：说回自己当初的学习，这种感觉，就很奇妙。回到问题本身，就我自己而言，我想应该是在我绞尽脑汁克服一些困难的时候提升的，没有某一个瞬间、某一天、某一周或者某一个月忽然提升了自己的编程能力的说法。比如：B 站的教学类视频收藏多了、也看多了的时候；周日别人跑出去玩，我却在实验室里看各种技术书的时候；力扣上的刷题数量从 0 开始逐渐变为 400+，通过从 40% 逐渐提升到 70% 的时候；《剑指offer》中的每道题过了一遍又一遍，以至于都可以出一个刷题笔记专栏的时候；大冬天的早上别人还在被窝里睡大觉，我早早来到实验室复盘昨晚没做出来的算法题的时候；导师有时候疯狂 push 项目、催进度，只管提需求不管如何实现，搞得我崩溃得受不了的时候；纳闷钱包越来越薄、支付宝余额越变越少、实验室书桌上的技术书越来越多以至于放不下，一看当当网消费金额被吓一跳的时候；在食堂吃饭排队打菜，忽然想起来刚才那道题/那个 bug 怎么解决，大叫一声“卧槽，我知道了”被女朋友嫌弃，被别人当作傻子的时候；我就按照 2019.8 - 2020.8 这十二个月来分享一下自己的自学和找工作过程吧，想到什么就说什么，没有大纲，写到哪就算哪，不煽情也不贩卖焦虑，就写出自己的文字就好。2019 年 8 月说来惭愧，在 8 月之前，我对 C++ 的影响还停留在 “Hello World” 上，本科时期老师教过的 C++ 基本全忘光了。C++ 三大特性的“ 封装、继承、多态”我真的只记得一个多态，还是死记硬背的那种。当时选择 C++ 而不是 Java作为自己的学习语言除了因为实验室项目的需要，还因为 C++ 比 Java 要难学一点。是的，就是因为 C++ 比 Java 难学一点，大家都贪图入门快、简单、易上手，我偏不这么干，简单易上手也代表着跟你竞争的人更多。思虑再三，我还是选择了 C++ 作为我的主攻语言， C/C++ 能让我见识到整个计算机体系结构是如何被搭建起来的、程序是如何跑起来的、程序是如何被编译链接在一起的、函数的底层构造是怎样的....说干就干，我经过再三比对和考究，选择了某马的 C++ 入门教程，于 2019 年 8 月 17 日，我开始了 自己的 C++ 自学之路。我是一个喜欢动手操作的人，一边看着授课老师在上面讲，一边在底下自己开始学，跟着视频敲代码，他怎么写，我就怎么写。没吃过猪肉，还没见过猪跑吗？自己一个字一个字当时跟着视频中做我看的很快，我记的开的是 1.5 倍速看的，十天左右的时间我就看完啦，当时还去留了个言，现在想想也确实感谢那个时候的自己。说到这里，也分享一下我自己以前准备校招过程中做的一些学习笔记，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！阿秀个人在学习C++过程中的笔记链接:https://pan.baidu.com/s/18XAu8OTsJmX_sfZ1qpmCcw 提取码：fw8s还好当时正值暑假时候，老师的项目暂时停滞，也没什么事情需要我去做。所以自己也能够有一个多月的时间去入门和学习，这是一段很完整的学习时间了。对于每一个 C++ 技术栈的同学来说，《C++ Primer》几乎可以说是一本圣经，我当时在看完上面的视频后就直接去看这本大黑书啦。月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。2019 年 9 月转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。2019年力扣提交记录自己能顺利解出来还好，解不出来就跑去评论区看别人的解答。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。我现在还记得力扣第一题的评论区有一句名言“有人相爱，有人夜里开车看海，有人 Leetcode 第一题都做不出来。”有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。我前段时间整理了很多不错的书籍，包括数据结构、操作系统、数据库、C++、Python、Java还有关于简历修改、面经笔经、大厂高频考点等等，简单统计了一下，已经有超过1000本书和各种干货了~这可能是整个GitHub上最全的计算机经典PDF仓库了。地址1：https://github.com/forthespada/CS-Books（如果由于网络等等因素，如果不能访问可以尝试地址2）地址2 ：https://gitee.com/ForthEspada/CS-Books其中涉及C/C++、Java、Python、Go语言等各种编程语言，还有数据结构与算法、操作系统、后端架构、计算机系统知识、数据库、计算机网络、设计模式、前端、汇编以及校招社招各种面经等~2019 年 10 月进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学袁春风老师的计算机基础课程都是在这期间刷完的。还有韩立刚老师的计算机网络视频，韩老师讲课确实有意思，整个课程欢声笑语不断。除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《图解TCP/IP》、《网络是怎样连接的》都是在这个月看完的。前期有了视频的铺垫，看起来很快的。老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....2019 年 11 月时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《深入理解计算机系统》都是这段时间看的。我本科时间干的为数不多的正确的事就是硬着头皮把 《深入理解计算机系统》啃完了，真的是为数不多的有价值的事了，二刷的时候就很舒服~前段时间的某一天我忽然突发奇想，想看看知乎上计算机领域内评分最高的Top 20 经典书籍有哪些？分别抓，哦不，手动收集了知乎计算机经典图书推荐问题下的高赞回答后得出的好书集锦，选择标准就是每本书都在推荐版上出现过 5 次及其以上！！最终将抓到进行数据清洗和合并，得到一份计算机领域类的书籍榜单！说实话让我觉得有些意外，因为Python类和机器学习类书籍确实不少，不过Top 3却是一等一的经典！就是下面这三本，现在免费分享一下自己以前抓到的豆瓣上计算机领域内评分最高的Top 20 经典书籍深入理解计算机系统（原书第3版）计算机程序的构造和解释(原书第2版)程序员的自我修养: 链接、装载与库2019 年 12 月转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，不是你觉得你自己学会了你就学会了的。喜欢写写画画到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《More Effective C++》、《STL源码剖析》、《深度探索 C++ 对象模型》。我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。侯捷老师几门经典课程：C++面向对象高级开发（上下两部曲）、STL标准库和泛型编程、 C++设计模式、 C++新标准C++11&14、 C++内存管理机制、 C++程序的生前死后------更新一下---很多同学说侯捷老师的视频以及下架了，不能看了，还好我以前有保存过侯捷老师的全部课程，给大家分享一下！主要有：01 - 侯捷 - C++面向对象高级开发（上下两部曲）02 - 侯捷 - STL标准库和泛型编程、03 - 侯捷 - C++设计模式、04 - 侯捷 - C++新标准C++11&14、05 - 侯捷 - C++内存管理机制60侯捷、06 - 侯捷 - C++程序的生前死后07、算法原理与实践（选修）08、系统设计与实践（选修）09 - 辅导课：10 - 陈硕的 Linux CC++网络编程实践视频-------------------就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。2020 年 1 月元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。因为疫情的存在，2020 年的寒假注定是不同寻常的一个寒假，很多学生跟我一样都到了四五月份才开学。一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。图片来源于网络一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题。到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在github上了。可以说我能够凭借双非的学历进入字节跳动全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的校招学习网站上，现在免费分享给学习学妹们！自己以前的学习笔记包括操作系统、计算机网络、数据库（MySQL、Redis）、常见情景题、智力题以及计算机面试中需要注意的问题。下面是我的校招学习笔记网站内容大纲《阿秀的校招学习笔记》网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！这是我的校招学习笔记网站：2020 年 2 月后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟网络编程有关。第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《TCP/IP 网络编程》、《Linux 高性能服务端编程》、《Linux 多线程服务端编程：使用 muduo C++ 网络库》。我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《TCP/IP 网络编程》，你别说，真的越看越有意思，就有时候可能不是自己脑子有问题，是因为没在恰当的时候看合适的书。在看这本书的过程中，我知道了一个简易版的 Web 服务器是由服务器和客户端两方组成的，也知道了回声服务器是什么意思。这是本很不错的书，我一边看一边记笔记这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。2020 年 3 月进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？如果你的回答全部都是 Yes，那你不可能做不好算法题；如果有 No，你可以看看自己缺的是哪一步。最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错，如果算法题有障碍可以多看看。2020 年 4 月在复习完操作系统和计算机网络后，我除了开始继续刷力扣HOT 100，也在慢慢刷《剑指offer》，这本书上的题目都比较经典，经常出现在一些笔试面试中，可谓是经久不衰。再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个 WebServer 服务器。emm，真香！我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的 HTTP 服务器，后来我把它作为我简历上的第二个项目了。简历上的第一个项目是实验室的项目，跟了快两年了，终于能发挥点用处了。可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。2020 年 5 月可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《C++ Primer》捡起来看，因为第一遍看的时候比较用心看，所以第二遍过的时候即非常轻松加愉悦了，很快就看完了。然后又把以前的《STL 源码剖析》这本书捡起来看，因为寒假时候已经看过了相应的视频，看的很快，不到十天就看完了。随后又看了《深入探索 C++ 对象模型》，重点看了一下第三章，至此 C++方面的几本经典书籍都看完了，这几本书对于校招足够了，基本不会考察这几本书之外的知识点。在此期间也是把自己的服务器项目完成并且开源到 Github 上了。2020 年 6 月因为我是在一个普通二本学校读的研，历届的师兄师姐没有去大厂的先例，师兄师姐们貌似对于秋招找工作也不上心。按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，所以找到的工作质量可想而知。我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。emm，我信了，因为师兄师姐比我多上一年学，见识也多一些，但还是想努力一把，想着万一能有一点机会呢。万幸，自己努力了一把。还好，自己坚持了一下。在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种本硕985、211本985硕的。投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。说到这里，分享一下我自己以前准备校招过程中做的一些学习笔记，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！自己一个字一个字当时跟着视频中做阿秀个人在学习C++过程中的笔记链接:https://pan.baidu.com/s/18XAu8OTsJmX_sfZ1qpmCcw 提取码：fw8s2020 年 7 月去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。还好自己没听他们的话....2020 年 8 月不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣No.200，岛屿数量那题，很经典的;第二题是回文子串，在力扣上也有，你们也可以去查查，具体题号我记不清了，都是原题的。然后我就在他们惊愕的眼神中扬长而去，接着跑我的步去了。。。。在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！还好，最后终于有所收获。意料之外的果实写在最后如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，我也不敢说自己的经历或者学习过程一定就是正确的，但我确实是这样走过来的。我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。有时候我就在想，“玩也一天，学也一天，为什么不试着学一下呢？万一你就成功了呢”我是小镇做题家长大的，我记的上大学第一天代班问我们有什么才艺。我惊奇的发现，我好像没什么才艺。但我想，我的孩子不会再像我这样了，我保证。希望我的下一代除了会做题，儿子会跆拳道、轮滑、散打，女儿会弹古筝、弹钢琴、吹葫芦丝、唱歌、跳舞等。文中涉及到的资料如下：1、黑马C++视频链接：https://www.bilibili.com/video/BV1Tb411j7uM2、个人所记录的黑马C++笔记、《TCPIP网络编程》笔记、文中所涉及到所有书籍的 PDF 电子书地址：https://github.com/forthespada/CS-Books3、自己做的 WebServer 服务器开源链接：https://github.com/forthespada/MyPoorWebServer王爽老师的《汇编语言》，好书，强烈推荐按照力扣的标签来刷题，并认真记录书桌一角更新11、有很多人都问我，学了多长时间？有没有1000/2000个小时....讲真的，我也不知道有多少小时。在校的时候，周一到周五白天都要忙老师的事情，基本没时间自学，都是晚上八点之后学的。周六周日两天好好利用，各种节假日好好利用。2、你咋不出去玩？学习不累吗？可能是习惯了吧。以前跟师兄坐同桌的时候（他现在在华师大读博，今年该博二了），师兄很用功，每天早上八点十分就来了，每晚十二点多才走，每周工作七天，很少见他休息。我真的很佩服他，所以我慢慢也养成了这种习惯。读研三年，差不多在校期间都是 8:30-23:30 的作息，每周 6.5 吧。这是什么概念我也不知道，只是华为二面面试官听到我在校期间的作息后，露出了欣慰的笑容。。。。说学习累的，体验过夏天拔花生拔到腿抽筋，后背被晒得红通通的就不会觉得累了；体验过春天弯腰插秧，秋天弯腰割稻子到晚上直不起腰来就不会觉得累了；体验过抗 120 斤重的电缆上 20 楼就不会觉得学习累了；体验过装灯管一天都得抬着头，到了晚上睡觉都不能躺着睡，也不会觉得累了；体验过因为电线走线走错了，需要砸墙重来，抡大锤轮一天到晚上吃饭的时候筷子都拿不起来的时候，可能也不会觉得累了；太多了，真的太多了，所以我觉得学习不累。真的，学习真的已经很轻松了。更新2码字不易，觉得这篇回答有帮助的话，不要只收藏不点赞呀！耽误这位准大厂人0.1s的时间，希望认真看完的你可以点个赞再走。我是@阿秀，编程程序员话题下获20W点赞+收藏+喜欢，分享计算机学习、编程知识~1、相遇即是有缘，我最近发现github上有几本不错的算法刷题资料，支持Java、C++、Go三种语言，其中对于面试中考察较多的链表、树、动态规划、数组等知识点讲解的都很全！如果你算法能力比较弱，比如互联网大厂面试中手撕算法比较差的话，那要好好看看了。Github高星！支持Java、C++、Go三种语言版本的Leetcode刷题笔记~2、对于一些想要转行或者读研的朋友，下面两个回答肯定能帮到你！3、建议多看经典书，而不是什么《21天学会XXX》系列，完全是浪费时间！4、Linux C/C++ 方向自学的完整路线，很多人不知道学习完 C++ Primer 能做什么项目练手，这个回答不可错过！5、如果你准备时间不多，就抓住重点，在最短的时间内搞定必要的数据结构和算法而去面试6、我自己在学习计算机过程中看过的优质网课，你的基本大学四年绝对够用了。7、如果你决定不了到底学习C++还是Java，不妨来看看这个回答！8、我在自己八九年的计算机学习生涯中收藏了不少数据，前段时间整理一下居然有1000多本了！！！！后来就干脆把它分享出来造福每一位学习计算机的小伙伴，包括下面推荐的书籍全部都包含在内了！5、分享一下自己在字节跳动工作的感受不定时更新自己的社畜日常，记录一下自己在字节工作和一线漂泊的真实经历最后如果同学们觉得有帮助的话，不要白嫖阿秀学长的回答啊！！！双击屏幕就是最大的支持啦！一个赞就足以！这样也可以让跟多的同学看到了。如果同学们如果还有什么问题，比如计算机考研复试、相关互联网大厂求职、技术方向等等问题，可以在下方评论区给阿秀学长留言，或者点击下方个人主页关注阿秀学长即可，不打算在知乎向同学们开通付费咨询！,在我的码农生涯中，一共有2个节点，感到自己有一种技术上「突飞猛进」的感觉。第一个节点，发生在我写了一年代码的时候。触发点是读了两本书。那时候刚刚转行一年，熟悉了同事，大致理解了公司产品的技术栈，知道整个流程是什么样的。按我现在的角度来看，当年的水平也就是个过得去的实习生（然而当时已经全职了……）。我全心全意地想提高技术水平，然而总不得要领，也反思为什么自己对于技术的理解深度和同事们有那么大的差距。在熟悉了Python语法后，我所会的其实仅仅是将自然语言和逻辑翻译成代码，然而并不能从计算机的角度去理解代码执行的原理，当然更无从理解性能优化之类更深奥的事情。那时候带我的数据工程师，手边经常放着一本《编写高质量代码:改善Python程序的91个建议》，我就有样学样买了一本，并且老老实实用上班的空隙时间+下班的休息时间，缓慢地啃完了整本书。再后来，觉得意犹未尽，又买了同系列的《Effective Python：编写高质量python代码的59个有效方法》，用同样的方法缓慢而持续的啃完。广告编写高质量代码：改善Python程序的91个建议京东¥51.90去购买这两本书讲了很多巧妙的方法，让我搞懂了同事代码中很多写法的具体原因和目的，同时自己的代码也在加持下变得更加简洁和规范起来。从这时开始，我才开始学习代码之下潜藏的更多计算机原理，逐渐能够从计算机而非人类的角度去理解代码。打个比方。算法、数据结构这些硬功夫像《九阴真经》，学会以后妙处无穷，耗时很长。上面这两本书比较像《九阴白骨爪》，可以速成，憾之深度有限。但对于刚刚接触软件工程不久的人来说，通读这两本书，确实可以有功力大增的感觉。所以我强烈推荐，无论新老工程师，都要读一读这两本，起码要做一个 Pythonic 的程序员。第二个节点，是我第一次独力写完并维护公司产品的核心服务。有一天CTO突然把我和另一位前端负责人叫到一起开了个3人小会，讲了一下要写一个新的后端数据读写服务。这个服务非常核心，对性能和健壮性都有很高要求。当时会议的情况我记忆至今：CTO和前端负责人你一言我一语地说着架构，我在旁边听天书，都是没见过的词。聊到最后，CTO问我一句，「你能听懂么？」我像美剧《硅谷》里面的Dinesh一样……我是右边那个……不过赶鸭子上架，用了大半年的时间写完并打磨这个组件，最后好歹完成了一个靠谱的东西（在早期还有另一个大牛同事帮我搭了脚手架，非常感激）。这也是我码农生涯中完成的最重要的东西。开发这个组件遇到无数知识盲点、踩了无数坑，数据库、运维监控、通讯协议、性能调优、单元测试……这些全折腾了一遍，感觉像读了个加速版CS本科。做完这个项目，我的编程水平终于从一个实习生无限逼近于工业级了。回头看看，像做梦一样，居然这么熬着熬着就成为同事口中的「谷老师」了。有些事情，还真的要靠时间来打磨。在毕业多年后开始学习写代码，让我理解了很多事情，不仅仅是计算机，也包括了「如何把事情做好」的方法。「突飞猛进」往往是自然发生的。你在某个夜晚苦熬一个知识点时，不会觉得自己「突飞猛进」；只有在多年后某日熟练的给别人讲解这个知识点后，内心才会小小的波动一下，猛然忆起当年深夜中的青灯一盏。总结一下：用力地啃好书。专心地做好项目。剩下的，时间会帮你搞定。,先说结论：1、一定要接触最好的编程体系，好的体系可以达到事半功倍的效果，否则即便智商再高，也有可能要走很长的弯路；2、切勿有畏难心理，在学习的过程中会遇到数次平台期，期间有可能会怀疑人生，需要熬过去；3、编程水平的提升需要经过大量的练习，不存在不劳而获；4、要和优秀的人一起学，遇到不会的问题，要放下面子，敢于提问；5、遇到不会的知识点，需要硬啃，今天不解决的问题，明天不会自己解决；6、数学对于编程非常重要，请学好数学；7、教别人会让你自己水平变高；我是从初一开始学编程的，一开始学编程只是为了多玩会游戏。2010年在三线城市的普通初中，编程这个事情压根就没有普及，我也不知道学这个东西有什么用，那时就是学着玩呗。因为也没有人教，我就买了一本清华大学出版社出的Pascal的教材在那边瞎折腾。那时候网上也没什么资料，所以我学了三年啥也没整明白，像搜索、最短路这些算法我连名字都没听过，更不用说会写了。进入了绍兴一中，我突然发现，原来编程不是我以前认为的那样子的，是另一个样子的。因为周围有一些很牛逼的人，就是那些能拿国内甚至国际奥赛金牌的人，我才意识到差距不是一般的大，他们五分钟十分钟能解决的问题，我自己搞了两三天都不知道在干什么，就只能拼命地学，每天压力也很大，因为周围的人都比我水平高，他们都是从好的初中过来的而我的初中水平差，我每天就担心自己会不会垫底，所以心态很不好，人就很焦虑。我那时从初三暑假开始在绍兴一中学，一个暑假就学会了很多东西，因为有学长带着，就把动态规划、图论基本上都学会了。后来想一想好像我也愿意走这条算法竞赛的路，就继续学了。我人生有三次编程水平大飞跃的时期，我的高中时期是第一次。但这次背负了太大的压力，因为世界第一次向我敞开了大门，我之前根本就不敢去想清华北大之类的学校，因为我的人生目标一直都只是考上一个一本学校，然后回老家做一个公务员。突然间，看到了不一样的希望，因为太想要，所以最后也得不到。每天就是失眠，两三点要嗑安眠药才能睡着。大冬天下着雪，我穿一件衬衫也会流汗，但我就在那边拼命地学，因为我相信努力还是能出成绩的。那时候确实也学到了很多东西，每天早上七点就到机房，晚上怎么也得到十点十一点睡觉，有比赛的话就要到凌晨两三点，第二天又是七点去机房，每天重复这样的生活，大概过了一年多的时间。最后高中我水平也比较高，小比赛都很牛逼，但由于心态的原因，一到大比赛就会全线崩盘，差点就没大学上了，也受到了很多的质疑，质疑我平时在作弊，因为我平时的水平和比赛的水平差距实在太大了。我受了很大的委屈，我从小就很看不起作弊这件事情。最后我运气比较好，进了上海交大，进交大的时候，我心里其实是有一股气的。我觉得我要证明我自己，因为高中相对来说还是有点失败的。那我得告诉以前那些小瞧我的人，他们是错的。很庆幸我进了上海交通大学，无论是从能力上还是思想上都极大地改变了我的一生。大学的时候，比赛是三个人一队，有两个队友，每天都在一起学习一起训练，这样的道路就不会觉得太孤单，以前一个人的时候会害怕，总会患得患失，现在队友就是坚强的后盾，你就不会再恐惧，因为你们三个人是一个整体。那时候我也学了很多的数学，因为高中的学习其实很多是建立在猜上的，很多都是靠直觉，直觉就是依靠多次训练之后锻炼出来的，你觉得它是对的，它也确实是对的，但就是不知道为什么。大学学了线性代数、数分等等之后，第一次知道这些为什么是对的，而不是仅仅只会用它们。这件事情让我养成了一个很好的习惯，就是写代码之前要从数学上证明自己的想法，这会让你在写代码、打比赛的时候犯更少的错误。于是我实现了第二次飞跃。那时候，我和队友们经常一起睡机房，也经常半夜到处翻墙，因为管机房的大爷要赶我们，我们每天要和他打游击。但那时候的生活是快乐的，为什么呢？因为我心中有一个目标，我就是要去战胜世界上最强大的对手，去追求那种一览众山小的感觉，所以你不会觉得那是一种苦，相反你会觉得非常有乐趣。最后的结果说好也不好，因为各种各样的原因，最后到一半我自己就把这个事情停掉了，就去做科研了。在这个过程中，我花了五年的时间，也慢慢地自己治好了自己内心的不安和焦虑，重新获得了小时候那种平静。最后，我也发现，我压根就不需要向世界证明什么，压根就不需要去打败任何人，我唯一想做的就是，去探索更多的东西，去探索自己的极限到底在哪里，我的人生没有那么多的观众，做好我自己就行了。又过了几年，当我开始教别人写程序的时候，我的编程水平又实现了一次飞跃。在这个过程当中，我神奇地发现，我对一些基础的理解其实并没有那么深刻，所以就经常讲了一半会讲不出个所以然来，于是就迫使我重新回去思考，突然就发现，自己又能做一些以前做不到的事情，又学会了一些以前好几年都学不会的算法。那就是说，我以前学不会是因为自己对一些事情的基础理解是错误的。所以大家在学习的时候，也要把自己的想法和理解告诉别人，这对你来说也是一个检验和提升的机会。还有，在学习编程的过程中，我自己遇到了非常非常多的瓶颈期，就是那种半年一年啥都没提高的状态，每天练练练就是过不了那道坎。最后其实发现，其实熬熬就过去了，编程水平的提升好像就是这样的状态，你缓很久，然后突然上一个台阶，然后又缓很久，再提升，如此循环。所以现在大家学不会也不要着急，再熬一熬，也许过一段时间就上去了。回首往事的时候我觉得自己是幸运的，为什么呢？第一，我确实遇到了一批世界上最好的人，无论是高中还是大学，大家因为共同的爱好聚在一起，每天不分日夜地去努力，在这个过程中互帮互助；第二，我接触到了很好的编程体系，因为无论是高中还是大学，都拥有全世界最好的编程训练体系。我为什么对这个事情有很深刻的理解呢，因为我初中三年真的什么都没学会，初中三年做的事，高中一个礼拜就全都能做到了，如果我不进绍兴一中或上海交通大学，我可能一辈子都不会知道编程到底是什么、算法到底是什么；第三，也是感谢命运给了我那么多的失败，让我非常早地就理解了，成功不是我追求的东西，我追求的是变成一个更好的自己；第四，在过程中我也抵挡住了很多的诱惑，因为我的初中老师和我讲，我的天赋是低于平均水平的，但就是熬熬熬，好像把比我聪明的人都熬走了，因为他们都去做别的事情了，就我继续在干这个，好像熬一熬我也熬成了这个圈子里水平不那么差的人。所以我相信，很多事情是因为坚持，你才能够与众不同。天赋只能帮助你一时，但只有热爱和坚持才能帮助你一世；第五，那时候我经常会死磕，经常下一个狠心，我不吃饭不睡觉一定要做完一个事情。如果没有这一次次的死磕，我想我也不会是今天这样。后来，无论是科研也好工作也罢，我真的看到了很多很多东西，每天都抱着一种好奇心，想要对世界多了解一点，但如果不是因为遇到了编程，遇到了这么多非常优秀的人，遇到了这么多优秀的老师，我这样天赋的人是压根不可能走到今天的。所以，现在我们想把我们的好东西分享给更多的人，我们真的想要把自己了解到的东西开放出来让大家少走一些弯路。因为我们知道走弯路是什么样的感觉，我们知道那种苦涩。那么既然我们有能力，我们就应该帮助更多的人。我们后面做的很多事情都是基于这个逻辑。,"18年开始编程，从一个连for循环都写不利索的跨专业小白，到后来21年秋招能拿到不错的offer。在这两年多的时间里，从0到1，我感觉自己水平突飞猛进的节点主要有三个：第一个时间节点是能够合理地使用搜索引擎，特指Google。其实能够从巨量的互联网信息中搜索出想要的信息并不是一件很容易的工作，哪怕是有了百度和Google。当出现bug的时候，总是会有一堆的报错信息，而搜索引擎的信息检索是有字数限制的。如何选择关键的字眼放到搜索框中搜索以及如何从已经排序过的网页信息中找到想要的内容，这两个问题其实并不简单。对于第一个问题而言，其实首先需要将报错信息好好看一遍，大概地明白可能是哪个地方出了问题，再把最重要的关键字挑出来进行检索。关于检索的关键字，最重要的是信息量尽可能地大，有位答主说得很好，相关链接在这：对于第二个问题而言，其实核心在于按照自己的经验如何在大脑中对网页结果进行一次再排序。一般而言，网页边上有广告两个字的就不用看了。在debug的时候，最重要的网站莫过于stackoverflow, github, 相关开源软件或者商业公司的官网，但这些都要求使用者具有一定的英语水平，所以大家尽可能地提升自己的英语水平，尤其是阅读能力吧，可以有效地提高自己debug的能力。第二个时间节点是将一个大型项目编译通过。说到这个，一下子又回忆起被环境配置等各种问题支配的恐惧。当初读研究生遇到的第一个任务就是将一个大型工业软件跑起来。而当时的我刚跨专业考进来，代码量大概是一千行不到这个量级。连命令行是什么东西还不太清楚，只明白一些基础的概念，刷过几十道leetcode。我对编程的接触只局限于写一个函数，也就是在大括号填点东西。如何将几十万行的代码组织起来，变成一个完整的可执行文件，并把这个可执行文件运行在机器上，这些东西，我一无所知。那个时候有点像刚学会在地上爬就得去参加马拉松一样。但没有任何办法，只能硬着头皮去搞。现在想来，最核心的问题在于看懂Makefile。其实正常的软件编译，出了问题Google一下总是会有一堆的教程。但我要编译的软件是一个存在了几十年的用Fortran写的工业软件，在网上什么信息都没有。只能硬生生地去啃Makefile，从最外层目录开始看，一层又一层地链接，一共有几十个Makefile文件，都只能一行一行地看。不断地make，不断地报错，不断地解决问题。各种软件依赖问题，各种链接问题。真的是令人痛苦不堪。这是我从事计算机行业遇到的最大的问题，每天一睁眼就是想着如何解决bug，有的时候一个礼拜都解决不了一个bug。对于自信心打击巨大，常常失眠。不过硬啃了将近一个半月的时间，终于把软件跑通。也是从那以后，我开始有了强大的自信，相信自己能够解决任何bug，对于一个程序员而言，这一点真的是特别重要。通过这么一个事情，我感觉自己的技术水平有了突飞猛进的进步。也开始把课本上的那些知识点一步步地串联起来，我熟练了Linux的各种命令，明白了如何用将几十万行甚至更多的代码组织在一起，知道了各种静态链接、动态链接、编译参数的作用，搞清了一堆的字符串文本如何被转化为一个巨大的二进制文件，然后如何从磁盘中将这些二进制文件加载到内存中，最后控制器将这些二进制文件按照格式一条一条地从指令cache中取出，加载到CPU的ALU中，搭配着寄存器进行计算。所有的代码都被翻译成指令集中几十条乃至于两百行的指令。那个时候感觉计算机的知识就像一条汹涌奔腾的洪流，无比壮阔，涌进我的脑海中。从那以后，即使面对着大型程序中的数百万行代码也不再有恐惧感。我终于树立起信念，相信自己能够解决一切问题。第三个时间节点是使用acwing系统性地学了算法。这个部分在我其他的回答中详细地聊了一下。我在这里再简单地说一下，为什么我们学算法觉得难，刷leetcode觉得难。主要是因为两点：一是没有系统性地学习知识点。计算机不像数学或者物理，有着大量的初高中老师，有着详尽又充实的教辅材料。带着大家学完知识点a，而后学知识点b，难度层层递进，科学又合理。而我们刷题的时候，刷了一道题，有一个知识点a，瞅一瞅。又刷了一道题，有一个知识点g，再理解理解。这个学习的过程是散乱的，而是并不是线性的，有的很简单，有的特别难。这种学习曲线简直就是噩梦。第二点就是没有特意去训练自己的肌肉记忆。正常学数学，高中数学，都是一个知识点，无数的题目，五花八门，不断变化，就是那个知识点，做了一遍又一遍。大家不用动脑子就知道。比如立体几何，第一步建直角坐标系，第二步，转化为坐标系的一些运算，然后blabla套公式直接算。而刷算法的时候，每一个题都像是一个新的内容，得去记，去背。但题是背不完的呀！真正的方法应该是总结出一套模板，把各个题映射到不同的知识点，再用对应知识点的模板，改一改，调一调，拿去用。不断地重复这个过程就是形成刷题的肌肉惯性。总之，通过Acwing，针对这两点问题，开始系统性地进行学习，然后养成刷题的肌肉惯性。当然，也通过刷题积累了大量的编程经验，可以较快地解决一些常见的bug。当我学完相关的基础内容和部分提高内容，又在leetcode和acwing上刷了几百道算法题，写代码的感觉不再生疏，越来越得心应手，这也为我后面找工作提供了巨大的助力。码字不易，觉得对您有帮助的话，恬不知耻地想要个赞哈。","经常学习到凌晨后，看完一本本大黑书，做完一个又一个的lab，整个大学不敢谈恋爱，不敢有其他爱好，全力投入到学习编程中！垃圾本科，非985/211学历！就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，腾讯等多个大厂offer。从大一开始，知道自己学校不好，只能靠自己，疯狂努力，经常学习到深夜。所有计算机相关科目课程的成绩全都拿到90+满绩点的分数，努力参加各种计算机相关比赛，蓝桥杯，天梯赛，PAT获得若干奖项。本科毕业前实习过多个大厂，拿到字节跳动等多个大厂offer....我知道我其实算不上计算机系最厉害，最努力的同学。现在回想到当年努力的自己，顿时一种热情油然而生。出身农村没有富裕的家境，不能报高档的培训班，没有过人的天赋，高考成绩也不好，比不过985/211的同学。要么自己拼命努力毕业近大厂，要么躺平毕业去干销售，最后没有选择只能背水一战。大学计算机系的同学努力一些的，要么专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer到手软。一路走来，我也踩过不少坑，走过不少弯路。学长作为一个过来人，给计算机专业学弟学妹们分享计算机专业学习的一些经验。我会从校内学习，再到校招各个技术岗位的求职学习，再到求职找工作一一分享。无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。一、计算机真的是一个努力可以逆袭的专业大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，考试排名班级考前，然后再参加一些专业相关的项目比赛拿到奖项，就足够代表这你在学校内很优秀了，毕业找工作求职也够了。你的待遇也完全和你学历成正比。但是计算机专业属于强技术类的，就和普通专业很不一样。学好数理化，走遍天下都不怕计算机专业技术岗位的求职几乎跟校内的成绩没有什么很大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用，每次排名垫底，毕业照样拿大厂offer。产生上述现象的原因：就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了，大学里面学的比价杂，需要自己专门深入学习一门技术才行。大学教育是为了拓宽学生的视野，学习基础知识每年计算机专业都会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。天天只顾读死书，没有搞清学习和面试的区别，也没有取了解的一些校招和面试的情况。我有见过一个985大学，计算机科班，成绩排名全班第一，面试连一个最基础的冒泡排序都写不出来，具体一些技术内容也是模棱两可。但另一方面，我还见过有的同学，大学天天逃课，成绩排名办理倒数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力就可以逆袭的专业。下面分享下自己的学习经历，希望可以帮助到大家，如果对你有帮助，可以帮忙点个赞呀！二、我大学的学习经历1、大一上学期我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种社团，学生会，活动及其丰富，当时也很迷茫，不知道以后道路如何。各种社团，学生会加入进去后，很浪费时间，对你其实没什么帮助。除非你先想去里面找个对象，哈哈大学刚开始在C语言课程，遇到有些不懂的，我就去找学长请教。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，也不谈情说爱。而是一有空就去泡图书馆，我每次去图书馆都能看到学长的身影，学长的书桌上堆着很多计算机书籍。每次向学长请教，学长也会很耐心的回答，并指导你如何学习计算机，以及一些学习路线。自己也去了加一下编程学习网站，加学习交流群。偶尔在一次CSDN上评论某个腾讯工程师的博客，竟然得到了回复。以后经常关注他的博客，跟着前辈一起学习技术。前辈看我很努力，最后还加了微信。前辈给我分享学习路线，解答一些技术问题，分享一些他学的技术，大厂需要储备的计算机知识。还指导写博客，说了一些写博客的好处，收获很多。我大一上学期学了C语言，python，计算机科学导论，第一本学习C语言的教材是谭浩强老师的C语言程序设计。这本书可以算是C语言入门的初级书籍了，经典的入门级程序hello world!程序就是从这里开始的，哈哈。虽然这本书比较基础，但对于刚接触编程的我，一开始没看太明白。上课根据老师讲的，自己敲代码运行程序，课后也会花时间自己琢磨一些。待整本书学习之后，又重新看了一遍，才大致看明白一些。这本主要讲解一些C语言变量，函数，循环，数组，指针一类的基础知识。刚开始学指针的时候也比较疑惑，不知道为啥要使用指针这东西。对指针的用法也不甚了解，自己甚至写过返回局部变量指针的这种低级问题。在学完谭浩强老师老师的书籍后，自己也在学长的建议下买了一本C Primer Plus，当时坚持把这本书结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。自己也会用C语言编写一些计算器，万年历等一些小程序！看了C Primer Plus之后，个人觉得C Primer Plus更适合入门学懂C语言，书中有穿插一点C语言的历史故事和应用背景，更贴近实际。书的语言更像一位老师循循善诱你一步步理解C语言，一开始给出代码例子，可以让你上机体会，然后一步步逐渐深入讲解这段代码各语句各函数的作用。这样学起来个人觉得更能吸引学生学习兴趣。2、大一下学期大一下学期就开始学习数据结构和算法，C++。对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。数据结构和算法，从各个方面影响着 CS 学生，不可谓不重要学业方面：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。蓝桥杯，天梯赛，PAT，ACM都是着重对算法的考察。学好算法，并在这些比赛中摘金夺银对你以后考研，找工作都是不少的加分。考研方面：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机在线编程考试。无论你大学里成绩多优异，无论你考研初试多高，研究生复试机考永远是你不可避免的一关。大学里热爱算法，热爱编程很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。找工作方面：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去国内互联网大厂工作，你会发现大厂非常注重对求职者算法与数据结构基础的考察。算法属于基础，算法题过不了，其他一切面谈，就是这种模式。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作。大一下学期就比较忙了，课程逐渐增多，要学的东西也变的很重要了，难度也加大了。这个大一下学期就没怎么休息过，上课，做实验，下课去图书馆。图书馆闭馆后，晚上回寝室继续学习直到转钟，有时候也不能学习的太晚，会打扰到室友休息。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是金属闹钟放到床下桌子上：闹钟设置成06:00, 手机振动设置成05:50。这样每天就能05:50被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎无数个日子每天都是在这样的晨曦中开始。我学习学习算法的第一本书记是《算法（第四版）》这本也是比较今典算法方面的书籍,读完的感觉真是感觉爱不释手。总体难度难度相对较低，当然这是后面感受到的，刚开始学的时候不这么认为。有些知识越学到后面就会发现哪些简单，哪些困难。这本书需要通读，里面知识比较全面，各种数据结构都有涉及到，里面全是Java实现，自己需要用C代码重新实现一遍，方便自己理解。还有我看的难度较大的算法大黑书，就是《算法导论》这本书我并没有全部看完。这本书里面有很多算法复杂度分析，会让人觉得读起来很困难。算法导论看完前面17章即可（到贪心那章），算法复杂度分析的部分可以尝试去看看，如果实在讨厌公式推导也可以跳过，但是要能够掌握推导一些常见算法的复杂度。为了应付公司面试时的算法题，同时也是为了积累自己的代码量，我就开始去力扣刷题了，这个刷题一直持续到我找到工作。当时我按照题目的tag来刷，这样更容易增强自己的解题能力。大学期间，我就已经在力扣上刷了300道题目了。Github 疯传！史上最强！BAT 大佬「LeetCode刷题手册」电子书开放下载了，有助于你提升数据结构与算法的功底。学习C++语言，我用的《C++ Primer》，感觉这一本书就已经很全了，里面各种C++的知识都有。由于这本书比较厚，当时学习也花了挺多时间。上面每个程序都自己实际运行一遍，学完一遍又头头开始看了一遍。总体感觉学这本书不能求快，一个一个章节的搞懂才能继续往后面看。 这本书值得收藏，堪称C++学习字典。3、大二上学期大二上学期主要学一些编程基础，拓宽学习视野，算是平稳度过。尝试多种编程语言，每中编程都有适合的领域，学习中也平添了很多乐趣大一学完C/C++，算法之后。大二上学期学校又开设Java课程。Java在当时看来是一门非常牛逼的语言，初学习Java后，发现Java里面又大量的类库，开发起来及其方便，而且快捷很多。Java里面没有指针这种难搞的东西，用引用代替。当时学习Java看的 《java语言程序设计》，后面没准备往Java方向发展，Java的学习也就到此为止。那个时候Python也开始火起来了，我也开始学了下Python。自己买了本《Python基础教程》，学习了下基本语法。然后就开始尝试使用Python爬取百度热搜，当当网和豆瓣的一些数据，感觉还挺有意思，在学习的过程中，也可以对html、http协议等有一些了解。当时运行的一些调试程序 ，哈哈！在学习和了解学习多种语言，自己也会去尝试做一些项目提高自己的编程兴趣。自己大学和工作后看的书籍和一些面试资料学习经验都在这里了，可供下载：我做的项目:在学习C++的时候，自己尝试使用QT写了一个3000多行的带图形界面的桌PC端软件，把这个当成实验项目交给老师，老师直接就给了我90分的成绩让我学习兴趣倍增。自己在学习C++网络编程的时候，用C++实现过一个简单的IM单聊，群聊群聊，消息推送，消息同步功能。麻雀虽小，五脏俱全。把这个网络编程与协议的知识统统用上了，加深了对其理解。然后同时用java写过web，搭过电商网站......回忆起来最开心的事情，是我曾经还花了一个通宵的时间帮别人搭建了一个网站，大学第一次通过技术赚取了300元。当时一晚上赚了300元了，我还请室友一起吃饭了！大二上学期算是收获满满，经历也比较丰富，每次回想起来都感觉意犹未尽。3、大二下学期时间来到大二下，这个我选择linux C++方向发展。这个学期是打下计算机知识基础的关键时期，看了很多书，这里由于书籍太多就不一一列举了。一下课就直接奔去图书管，图书馆有我一直占的座位。图书管关门后，就去寝室学习到凌晨2点。这是宿舍夜战，当时拍的照片。图书管长期占的作座位晚餐饿了就去附近食堂吃个简单的饭，然后继续看书学习。大二下学期看完了CSAPP、effective C++、计算机网络系统方法（前三章）、计算机网络：自顶向下、部分TCP/IP详解，做了一些项目，比如正则引擎，尝试写JSON库（未遂）。APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux多线程服务端编程、Linux内核设计与实现、计算机网络：自顶向下、部分C++ template、等书籍。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的协程库，阅读了一些优秀的开源项目，SGI STL、muduo、redis、libevent等。CSAPP 《深入理解计算机系统》，这本书涵盖了从一个bit到一个网络应用的系统知识，初学者会有很多概念都难以理解，建议是尝试检索相关内容去理解，实在学不会就先跳过，继续后面的内容。读书过程中，也不需要一定按照其安排的章节顺序，可以先挑自己喜欢的读，例如为了理解计算机中的cache，就去读第六章。这本书是CMU CS15213 课程（Introduction to Computer Systems）的配套书籍，该课程相关的资源也可以用来辅助学习，另外，最精髓的就在于配套的Lab了，难度不低，这个一定要做，如果做的很困难，也要坚持去做，完成后会发现自己的能力有很大的提升。这本书也不用一口气读完，有些章节不太感兴趣，或者读不下去的话，可以留着，等后面知识更加丰富了再回头来看（例如网络那章，我看的是很难理解一些概念，后来学习了计算机网络和网络编程后，就发现读起来比较简单了）。《Linux内核设计与实现》，当然这种书不必通读，挑自己感兴趣的章节看就好了对于计算机网络的学习计算机网络的学习，理论先看《计算机网络：自顶向下》，可以只看前面三章，即应用层和传输层，做下每章后面的lab。再就是对TCP/IP协议的学习，推荐《TCP/IP详解：卷1》，也是为了节省时间，可以只看TCP相关的章节。这本书英文版是第一版，中文版是第二版，个人是先看的英文第一版，然后再看第二版，挑了新加入的内容看。学习的时候，建议用wireshark来抓包，感受一下这些协议是怎么工作在这互联世界的网络中的，会很有趣的。4、我的整个大三当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。因为自己真的大一大二太辛苦了，自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。我在大三上学期花了三个月的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。看了无数本重要的技术书籍，学习并跟着做了好几个比较优质的项目，在csdn上写了400多篇读书笔记，现在总共已经写了超过1000篇了。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！下面分享下我整个大学看过的书：我这里整理学习近百本计算机经典书籍，包括各种编程语言，算法，网络编程，数据库，分布式等等各种技术。对于学习计算机的同学帮助非常大，且十分系统！面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，非常宝贵，不要错过！书单：三、后记别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 越优秀的人越懂得努力，越极度的自律。经常学习到凌晨一两点，基本没啥其他课外活动，专注学习。正如马斯克所说：一天只工作8小时的人怎么改变世界同样越早的掌握信息，越早的找到努力的方向和学习路线，也是很重要的事。作为计科学生，大学期间一定多看书，老外的大黑书很全面，有的不要全部看，但事至少要知道一些。大家买书一定不要吝啬，这是回报率极高的投资，对于一些喜欢的书，买下来！推荐给大家一个很好的购书渠道，就是关注京东图书的活动，经常会有400减300、300减200的活动，十分划算。大概统计了一下，大学期间我花了五千多块钱去买书，这算是我花的最值的一笔钱。计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需平时多努力学习并早早的关注求职，校招，面经等。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。无论你现在处在任何阶段，请卸载手中的王者荣耀，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。写到这里.....感觉手好酸.....看到结尾的同学，如果觉得有收获，不要只偷偷收藏白嫖盼学长， 给盼学长留一下一个赞呀，这样也可以让更多的小伙伴看到呀！推荐阅读c++硬核学习路线和学习资料我是女生选的软件工程，真的感觉压力很大很大，不知道怎么办了....?423 赞同 · 8 评论回答记得帮我 @盼盼编程 点个赞哟~",每次信息流刷到这个问题，都会拨动我记忆的缓存，让我想起那段大起大落的时光。自从写完那个项目后，我没再怕过任何代码。19年夏的某一天，在各大公司陆续推出自己预训练的BERT，并开始用它们做离线任务时，lead把我叫进会议室，说老大想上线BERT，需要尽快写一个C++版本的BERT服务。不是那种用tfserving或者libtorch哦，是直接用C++写。我面无波动地答应了下来，实则内心已经裂开了。自己不是CS科班出身，压根没写过完整的C++项目，虽然有些Java基础，但到底几斤几两我还是蛮清楚的。打比方的话，就是让第一次玩塞尔达、刚开完四个神庙、出了新手村的我直接去打盖农，悲壮之感难以言表。P.S. 小伙伴们要的Cuda编程入门资料放在文末啦～整个人都不好了但我作为新时代的自强女性，还是开启了冲向海拉尔中心的旅程。第一步，就是搜集可以参考的开源项目。Fortunately，我找到了知乎开源的cuBERT项目，作者写得特别清楚，并且同时提供了GPU和CPU版本，但老板看了速度之后仍不太满意，最终我靠着极强的搜索技术又找到了英伟达刚开源的fastertransformer，用Cuda C++直接实现了transformer底层运算，速度秒杀其他方案。在经历了各种make、install的折磨之后，我终于摸清了如何在服务器配置相关lib并运行c++代码，也顺利跑通了官方demo，性能完全符合预期。但不能高兴得太早，因为这个库只有transformer层的实现，前面的tokenization、embedding、pooling都没有写。。所以，这意味着我要读懂源码，然后自己把剩下的补全。第二步，我开始读源码改项目。这里有碰到了第一个难点，就是跑官方给的模型没问题，但运行我们自己的模型后就出现了 nan 这个恐怖的结果。于是我开始使用 print 大法，但惊讶地发现 cuda 底层全是并行的，一打日志都是乱的。。。于是我学会了 synchronize，在每个 operation 之后同步再打印结果，最终花了两天时间定位了问题：原来是Softmax没加溢出保护。立刻给作者提issue，不过在等待作者回复的过程中我居然自己给改好了，还默默学会了 Parallel Reduction 算法。期间我还会卡在各种各样的事情上，经常会卡上一两天，陷入自我放弃的漩涡。最终还是搞懂了源码，搞懂了cuda运算，并加上输入输出层搞出了完整的C++ BERT。但仅仅有个程序还是不够，服务接口在哪里呢？第三步，整一个服务。于是我又搜啊搜，找到了一个宝藏：TensorRT Inference Server。当时的版本提供以下超赞的功能：支持单GPU上的多模型&单模型多实例支持多种backends框架（TensorRT、Tensorflow）动态Batch增加吞吐提供负载均衡及状态监测所以又花了几天把C++ BERT适配TensorRT框架，成功变成了服务。变成服务之后又有问题，就是每次换机器都要重新配置环境并部署，于是我又学会了docker，减轻运维负担。通关了！整个改造差不多耗时小两个月，也是我工作至今记忆最深的一段时刻。我永远忘不了，那种看着看着代码就想站起来掀桌子的感觉。可以一起体会下：template <typename T>  __inline__ __device__T blockReduceMax(T val){  static __shared__ T shared[32];   int lane = threadIdx.x & 0x1f; // in-warp idx  int wid = threadIdx.x >> 5;  // warp idx  val = warpReduceMax(val); // get maxx in each warp  if(lane == 0) // record in-warp maxx by warp Idx    shared[wid] = val;  __syncthreads();  val = (threadIdx.x < (blockDim.x >> 5 )) ? shared[lane] : -1e20f;  val = warpReduceMax(val);  return val;}当然也忘不了身边同事牺牲自己时间给我的帮助，还有lead和我一起翻了半天C++ Primer 才解决问题的欣喜。故事的后来很圆满，压测效果满意，成功服务了团队的BERT上线。包括后来我在20年初和其他两个大厂团队的人交流，都没有听到过更快的速度，甚至有同学直接质疑了我，因为他们的延时是我们的两倍。。。去挑战一座山吧现在回想起来，这段经历真的太宝贵了。虽然不想再经历一次，但自那以后我再也没怕过任何代码。做算法也有了底气，我可是搞过CUDA C++的女人，别叫我调包侠。如果想快速提升，那就去挑战一座山吧，找一个高质量的项目，读懂并进行修改，在一次次自我放弃中成长。就像走过高考、走过考研、走过校招那样，过去那道坎就没什么了。另外，为了push大家学习，奉上我总结的cuda编程入门资料：一些参考：,很多次。大二时和同学吵架，气得看了一遍菜鸟教程。学会了前端三剑客，学会了php，学会了自己建站。然后就开始接各种项目玩，有小程序，有物业管理系统，甚至还有澳门皇家赌场(做完了怕被抓没交付)。第二次是进鹅厂，负责重构我们所有jq系统的前端项目。花一个月写各种方案被老板叼得破防大哭。上手踩了不少坑，吃了无数bug，挨了无数骂，背了无数锅。天天喊辞职，不过终于搞出来了，收获颇丰。觉得还能再加油加油。第三次是成为负责人开始带队。对整个软件工程有了更多的理解。开始站在更高的视野看各种事情，以前不理解的也开始理解了。做事慢慢也形成了各种方法论。开始重新review之前的代码，从架构层次开始局部重构。开始系统的完善工程化，系统的优化性能和用户体验。第四次是遇到各种奇葩问题。于是开始看各种框架源码，开始看chrome源码，开始看各种牛批的库。学到了很多技巧和想法，并且应用到了工作中。发现之前觉得无从下手优化的东西现在就是一坨shi。又开始做各种优化。第五次是开始准备搞自己的独立游戏。我脑海中有了一个有趣的世界，我想实现它。自学了unity，学习了gpu和shader，学习了各种姿势。同时也理解了绘画，音乐，写故事等辅助技能。不得不说，很多时候跨界的知识也会带来很多有趣的思考。第六次还未来，不过我还活着，还在努力。等发现了再分享分享。不难总结，所有的经历都有一个共同点。那就是离开舒适区，向外探索。哪怕很难，哪怕很苦逼。只要有正确的大方向，只要不死，就努力找方法去解决，去踩坑，哪怕走点歪路，吃点亏。所以我虽然在鹅厂混得还可以，也似乎有点机会往上更进一步。我渐渐意识到，打工是有天花板的。无论是职业上的还是身体上的。我也渐渐意识到，打工只是在某个经济系统中扮演其中一个角色。我更想跳出看看要怎么才能创造出属于自己的经济系统，从生产到销售到售后。我更需要有自己的产品，虽说这条路也很难。但我想试试。4月初更新，感觉终于算是跑通了独立开发这条路，虽然没啥钱，但是很快乐。俺发布了一个Vscode插件——XMouse〔拖拽导入代码片段、项目文件、npm包〕简单推广了下，用了几天，虽说用处没有那么大，但还是有点快乐的，欢迎一起来体验。(づ ●─● )づ 大致如下图，直接商店里搜索安装就行。咳咳，言归正传。一开始其实很多想法。比如因为前端已死，我要做一个前端地府，一个失业前端互帮互助论坛，但是备案太麻烦放弃。比如我要做一个摸鱼插件，一个chrome宠物，他可以帮你分析网页，陪你聊天，给你推荐你喜欢的热点，但是token太贵了做了一半放弃。比如写一本书，讲讲前端进阶、架构与升职加薪那点事( 不卖课，慢慢写，后续更新到个人博客上，等有缘求个打赏。或者看有没有实体书出版的机会，看能不能装个ac去吹牛 )比如我要做游戏，一个黑暗世界里城建生存的游戏，但技术不到位还在学习。(真没放弃)等等等等，很多很多想法，其中很大一部分也花了不少时间(比如摸鱼插件和写书)但是想了想，最终还是做了减法——想法越多，进度越慢，先上线再说。然后我就减出了XMouse，第一个版本很简单，只有代码片段的crud与拖拽。自己用了下还挺好玩，分享给了朋友们反馈也还行(也可能是照顾我面子)，然后也写了篇文章推广，没想到真吸引了一些用户，还有朋友希望共建。不得不说，把我当时高兴坏了。虽然没啥钱，但确实比发工资爽。当然也欢迎朋友们打赏投喂加鸡腿。ps：项目开源，请放心食用。今天先说到这，后面再更新。都看到这儿了，点个赞和关注吧。有兴趣也欢迎来找我聊天，联系方式如下 ( 'ω' )免费多个朋友不是坏事，反正一键能拉黑。,"啃完一本本书, 做完一个个lab没有突飞猛进, 一切都是量变最终累积成质变!但是会有那样一些时间节点,你会明显感觉到自己的编程能力确实有提高不少,能够实现更多的想法.不过老实说，就编程能力上确实没有“突飞猛进”的感觉，都是逐渐的进步，量变引起质变嘛。我们都是普通人，不可能像张无忌一样因跌落悬崖，意外获得《九阳神功》，从此开挂，走上巅峰。只有靠不断的看书、coding、学习优秀开源项目，构建自己的计算机知识体系，并且在特定的领域不断专研，这样才能成为一个优秀的工程师。滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”，逐渐构建起属于自己的计算机知识体系，学习一定要系统，这里推荐一个计算机系统学习网站，有Java、C++、Python、操作系统、网络等学习路线，计算机必读书籍PDF、C++、Java、计算机基础面试题等：我在大学之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。当时甚至很担心完全没有编程基础的我，上大学会不会跟不上。后来大一，第一门编程语言就是学的C语言，怎么说呢，老师讲的，书上写的我都能看懂，但是一让我写一个大的程序，我就摸不到头脑，不知从何下手，学了半学期，也只能写写课后习题，算算水仙花数什么的。而且当时对计算机缺乏系统认识，即便我知道指针就是变量地址，也很难理解它到底有啥用。甚至分不太清数组和指针的区别，以至于会出现对函数局部变量取地址返回这样现在看来很低级的错误。大一上考完C语言后，我便在心里默默念想，这辈子再也不写C了，只是没想到的是，后来这成了我最爱的一门语言。大一下开始学习数据结构与算法、数字逻辑这些计算机核心课了，此外，还学了一门当时我看来非常牛逼的语言—Java。为啥说我当时觉得它牛逼呢？因为刚经历过C语言的摧残，发现Java丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用。Java我学得很认真，当时还看过马士兵的Java Se教程。自己也用Java写了不少好玩的东西，比如联机五子棋、HTTP服务器等等。这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师。在学java的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了学好Java，我在知乎搜索各种书单，先后看了《Java编程思想》《Java核心技术卷》《Java并发编程》好几本书(不是全看哈，大部分主干章节大一暑假在家自学了安卓，并写了几个app玩，但发现自己不太喜欢客户端，于是大二开学就开始学 Java 后台开发，从 Servlet 到 SSH SpringBoot，基本上都过了一遍，后来越来越觉得这条路就是在学各种框架，总觉得不太对劲。在这里也分享一本帮助我拿到BAT 等一线大厂 offer 的算法笔记，是一位阿里大神写的，对于算法薄弱或者需要提高的同学都十分受用，算法一定是计算机学习的重中之重：编程指北：Github 疯传！史上最强！BAT 大佬「LeetCode刷题手册」电子书开放下载了！同时，大一暑假有大四学长学姐在学校广场摆摊卖书，我也买了些，其中有一本就是被称为计算机神书的CSAPP。大二在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。为了看懂这本书，又去看了王爽那本《汇编语言》，重学了C语言，由于已经学了汇编，指针对我再也不是问题了，同时看完了《c和指针》、《C专家编程》、《C陷阱与缺陷》，C语言使用得也愈加的熟练。大二上那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，于是我也不例外的加入了，先后看了点吴恩达的视频和西瓜书。跟着写了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理。这让我学得不安心。于是ML的学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后又跑去学Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索“操作系统怎么学”，顺着一堆回答，我发现原来还能跟着别人写一个 mini OS，这对我吸引力太大了。于是我买了一本《操作系统真象还原》，这本书真的非常仔细，把写 OS 需要用到的前置理论知识、汇编、内联汇编全都给你讲清了。我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入C语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。当时真的对这个入迷了，为了写Min os我还去看了Linux0.11的部分代码。把我的QQ签名改成了 jmp 0x7c00(这句汇编就是将跳转到0x7c00这里，BIOS开始引导操作系统。于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书。于是开始了非常标准的 Linux C/C++学习之路。也非常推荐大家尽早去刷一下牛客网，上面很多大三、研二的正在找工作的学长学姐们分享的帖子，早点接触这种就业的氛围，自己也会更加有动力去学习，也知道学习的方向，另外上面可以针对校招刷算法题、刷SQL等等，还挺方便的，现在很庆幸自己在大二的时候就在刷这个网站：前前后后看了《C++ Primer》、《APUE》、《UNP》、《深度探索C++对象模型》、《STL源码剖析》、《C++设计与演化》、《Linux内核设计与实现》、《Linux内核完全注释》、《effecitve C++》 、《effective modern C++》、《程序员自我修养》、《Linux高性能服务端编程》、《Linux多线程服务端编程》(知乎陈硕大佬写的)......，顺便还看了点muduo源码，自己模仿着基于epoll写一个reactor模型的web服务器，跟着知乎Milo大佬写Json库，总之，这段时期是写了一些小”轮子“的。学习计算机一定不要想着速成，要下苦功夫，去啃那些经典书和源码，然后自己动手写，我大学整理了一套计算机必读的经典书籍，对于CS学习的同学帮助非常大，且十分系统，这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。我整理的这些书大家可以在这里获取，对于学习计算机的同学帮助非常大，且十分系统：编程指北：计算机必读的书单（含下载方式）看的书越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习redis、leveldb）+ 网络编程（学习muduo，各种网络编程模型）+ 学习分布式（mit 6.824、ddia、google三大论文等）基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注C10K、C100K这样的后台服务器开发高性能、高并发的解决方法。值得一提的是，大三上我们学院有门System Programing的课，教材就是使用的CSAPP，因此我之前大二草草看完的书，得以再次翻开，这一次我把附带的是个实验也挨着挨着做了，收获良多，有位运算各种奇技淫巧，有Bomb lab刺激的打怪通关、也知道了buffer overflow attack.... 还有实现基本的内存管理等等。印象最深的便是做bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是连着把这几个phase过掉的，当然头发也没少掉。当时还写了个记录：再到后来，我拿到了微信实习offer，然后顺利转正。在我大三下拿到实习offer后，我开始做一些国外计算机课程lab，一方面有钱拿，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些lab很有意思，对提高基础和编程能力很有帮助。现在我开了一个公众号「编程指北」分享编程学习方法、技术相关的一些东西，感兴趣的同学可以去关注下～在这里列举一些我做过的觉得有意思的lab：第一个是文件系统这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 VFS（虚拟文件系统） 机制挂载到 Linux 内核中，然后就可以用系统调用 open、read、write 这些来在你的文件系统上进行读写。VFS 是Linux一个机制，它规定了 IO 接口，然后你去实现这些接口，你就可以挂载在上面。通过这个东西我深入的学习和了解了文件系统，报酬也是非常值的。第二个是SVC就是版本管理系统，类似 SVN 和 GIT的，但是相对 GIT 做了很多简化，核心的就是创建分支、分支合并、回滚、commit 这些，通过这个我又去详细了解了 GIT 的实现原理，并且自己写了一个简单版本的 GIT，受益匪浅，也赚到了几千大洋。第三个是操作系统的锁实现这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。还有个是 Web Proxy这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。还有模拟实现 TCP 可靠传输的这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种网络拓扑，可以调节网络 丢包率 Loss chance。当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。对这些Lab感兴趣的可以去我公重号「编程指北」后台回「lab」，我会不断更新汇总做过的一些lab和课程网站链接。如果对这些lab感兴趣的，自己也想做的话，可以看看我的这篇文章大学靠技术经济独立的方法，全部分享给你做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。(顺便还让我大学期间就月入上万。。。所以写了这么多，再点次题吧，我认为自己编程能力突飞猛进就是在看完一本本大黑书、做完一个个lab、写下一行行代码之后。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。下面就是我自己整理的电子书，绝不是在网上那种打包下载的，而是自己需要学到某个方向的时候去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精我把大学时候这些电子书库、简历模板、博客汇总、谷歌大佬的刷题笔记都打包放在这了，点击下方可以直达。书单推荐，少即是多（含下载方式）当然了，多刷题也可以提高编程能力，所以在这里也推荐一份我看过的谷歌大佬开源的刷题笔记：最后给大家分享一下计算机系统学习网站，学习路线大全，包含各个方向的学习路线和资源推荐，以及学习方法，强烈推荐收藏：如何自学篇计算机专业如何系统自学？如何高效阅读计算机类书籍？如何快速学习掌握一门编程语言？计算机基础篇操作系统超详细系统学习路线操作系统系统书籍分类推荐计算机网络超详细系统学习路线如何系统学习网络编程编译原理系统学习路线C++方向学习路线C++ 语言超详细系统学习路线Linux C++ 后台开发系统学习路线Java方法学习路线Java 后台超详细系统学习路线C语言方向学习路线C 语言超详细系统学习路线后台中间件(MySQL、Redis、MQ等)Redis 超详细系统学习路线Python方向学习路线Python超详细一条龙版学习路线Python Web 开发系统学习路线大家觉得有帮助的话，也可以帮我点个赞，笔芯~ 记得关注我哟 @编程指北————分割线——很多小伙伴在评论区问学习路线, 我找来了Linux C++ 后台开发方向的,强烈建议看看这个回答,一定对你有帮助!Linux C++ 服务器端这条线怎么走？一年半能做出什么？700 赞同 · 17 评论回答评论区还有小伙伴想要我的书单，这里也给出我以前写过的一篇文章，大家感兴趣可以去收藏下：另外，推荐一篇我写的关于指针的文章，绝对深入浅出~万字长文带你从内存看指针 | C语言指针完全解析2217 赞同 · 143 评论文章在这顺便推荐一个 Github 开源仓库，基本包含了常见的 CS 编程学习书籍，可以 star 一下，需要的时候直接去上面找书：imarvinle/awesome-cs-booksgithub.com/imarvinle/awesome-cs-books觉得有帮助的话，帮我 @编程指北 点个赞哟~","垃圾本科，非清北复交985牛逼学历，智商平平，非ACM拿牌sci论文天才光环选手。编程从来没有什么突飞猛进，都是在一道又一道的算法题，一场又一场的算法比赛，一本又一本的技术书籍，一篇又一篇的技术博客，一个又一个的项目Demo中.... 逐步成长起来的。作为一个出身非常一般的计算机本科同学，就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer。从大一开始，只靠自己，疯狂努力。不仅所有计算机相关科目课程的成绩全都拿到90+满绩点的分数，同时，在大学用拼命的两年的时间, 做完了其他优秀的学长学姐三年才做完的事情，努力参加各种计算机相关比赛,获得若干省部级，国家级奖项，拿光了学校里所有学年的各种奖学金，并在大二就以综合素质全系第一名的成绩就拿到了学院唯一的国家奖学金。大学四年时光，整整两年没有回过家，不是在实习就是在兼职。保研曾在某985院校复试排名第一，最后以排名靠前的成绩保送至浙江大学计算机硕士。本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer......我知道我其实算不上计算机系最厉害，最努力的同学，但是当我毕业后看到这个知乎上的这个问题，脑海中回想到当年那么努力的自己，心里是真的如翻江倒海，五味杂陈。一个从十线小城市出来，没有优渥的家境，没有过人的天赋，没有从小就受到精心的培养，良好的教育的普通人，要么拼命努力，要么自暴自弃，好像就没有其他选项？平淡无奇的普通人，拼不了爹，拼不了妈，只能拼命。大学计算机系的同学努力一些的，要么只专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer。像老学长这样两方面都有一些经历的，应该是比较少的人。同时一路走来，我也踩过不少坑，走过不少弯路。既然问题是如何学习的，那么我也作为一个过来人，给计算机专业学弟学妹们写一写计算机专业学习的一些经验。我会从校内学习，尤其到校招各个技术岗位的求职学习都抽空写一写，无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。一、说在开头，计算机真的是一个努力可以改变命运的专业首先相比于其他大部分专业，我真的觉得计算机计算机是真的可以通过努力改变命运的专业。其他大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，然后再参加一些专业相关的项目比赛，或者本科能有一些科研论文，就足够代表这你在学校内很优秀了，毕业无论找工作求职还是继续升学深造都足够了。但是计算机专业真的特别不一样。计算机专业技术岗位的求职几乎跟校内的成绩没有什么太大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用。产生上述现象的原因，就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了。甚至计算机专业还会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。我甚至见过一个985大学，计算机科班，专业里排名前几名的女生，面试连一个最基础的二分查找都写不出来。成绩单上门门课程都写着90+，但是具体一些技术内容完全都回答不上来。但另一方面，我还见过有的同学，大学几乎不上课，挂科无数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。于此同时浙江省有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们大学里提前早早的苦学技术，看面经，毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。这里额外提一下，原来有太多的计算机专业的同学不知道什么是互联网校园招聘，更不知道面经是什么东西。面经是指很多其他同学在互联网校园招聘中面试各个互联网大厂的面试经验，面试真题总结。面经对同学们来说简直太太太重要了！！！是同学们复习准备互联网校园招聘面试的关键法宝。你首先要知道互联网校园招聘面试重点问了什么？你才能有针对性的准备吧！！！有无数同学都来问猪学长：不知道互联网校园招聘技术岗位面试都问什么，面对计算机厚厚的书籍不知道如何阅读，侧重点在哪里？这些问题都能在面经中找到答案，里直接分享给同学们：同时猪学长还要额外说一下，推荐大家去多看面经，并不是让大家只看面经，死记硬背面经，投机取巧。这种只简单被面经的同学面试也是无法通过的。面经只是大家学习的一个参考。还是要踏踏实实的去多认真学习技术，多看优质的官方技术文档、书籍、博客。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力改变命运的专业。金融行业一直流传着一句非常有名的话:清北复交以下无金融如果你是金融专业，普通本科的同学，那么毕业很难进入头部金融名企去工作，而只能是去卖保险推理财。但是计算机专业这些年来双非本科进大厂的故事每年都在上演，只要你肯努力，一定会得到回报。二、掌握信息源，打好基础的大一我的大一在其他同学还在游戏中疯狂战斗的时候，我做了两件让我整个大学受益4年的事情。1、结识了很多优秀的学长学姐物以类聚，人以群分如果你认识很多优秀的人，你自己就会慢慢变优秀。到了大学的时候几乎每个人都会迷茫，我也是一样的。但是迷茫的本质是你没掌握到足够的信息。我的开头有写到我在大学里非常非常的努力，做了很多很多的事情。但是这些的前提是你首先要知道要了解这些事情。我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种各样眼花缭乱的社团，并不知道在大学里该做什么。这时候我选择走出寝室，去多结识学院里很多优秀的学长学姐们。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，当什么部长团长，而是都把时间投入到非常重要的事情上。但是，当你真的找到他们向他们请教问题的时候，他们都非常的友好热情而且热心，告诉你很多大学里关键的事情。我在大一上学期的时候就认识了我们学院当时大三拿到国家奖学金的优秀学长，并向他请教很多经验。很早就知道了国家奖学金的评比条件，准则要求，大学里有哪些比赛含金量非常高需要参加。同时我在大一的时候也认识了保研名校的优秀学长，早早的在其他同学还不知道保研是什么意思的时候，学长就给我分享了当年他们那届的保研文件，对里面的要求细节了如指掌。也正是因为我在大一就知道了很多信息，所以我才能早早的准备，因为知道自己不是天才，就只能比别人更早的行动！每次评奖学金的时候，当你刚刚知道别人申请表上有某个荣誉的时候，有可能他一个月前已经出结果拿到了，三个月之前已经去参加比赛了，六个月之前就开始实施准备了，一年前已经提前知道了。掌握信息很重要。2、大一就开始早早刷题，打下了扎实的算法数据结构基础我看了这个问题下面的很多回答，都推荐了很多各种各样的巨厚无比的计算机类书籍或者非常高深的项目。但是我觉得对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。说大学：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。如果你能在大一就多刷一些题目，打下坚实的编程基础，绝对可以让你在大二大三在各种别赛中崭露头角，最后大学里各种评奖评优奖学金都不是梦。说深造：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机在线编程考试。无论你大学里成绩多优异，无论你考研初试多高，研究生复试机考永远是你不可避免的一关。大学里热爱算法，热爱编程刷题很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。学长还见过大学里非常优秀的其他同学，就是因为只注重考试的分数，疏忽了对自己编程能力的训练，最后导致复试机考爆冷，与自己心仪的大学失之交臂的。说工作：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去外企工作，你会发现外企非常注重对求职者算法与数据结构基础，编程能力的考察。国内互联网早些年可能不会要求职者面试时编写程序，现在几乎各大公司面试都会模仿外企的模式，考察求职者的编程能力。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作不一定影响很大，但是你的编程功底是否扎实直接影响了你以后的工作效率。如果你没有通过编程题目的考察，几乎很难通过心仪公司的面试。自己虽然不是ACM选手，但是也同样深知打好扎实的算法数据结构基础的重要性，在大一早早的就开始刷题。让我之后在大学中的各种程序设计类比赛，保研复试机考，大厂求职面试都受益匪浅。说完了重要性，那么该如何做呢？学长之前在工作闲暇之余随手回答过一个关于编程的问题，没想到帮助了很多的同学，收获了800多个赞同，这里我就不重复写了，如何做可以看一下这个：猪学长这里分享给大家一个谷歌学长精心整理的LeetCode优质的题解小册:里面详细的把LeetCode热门的高频面试题目按照知识点做了分类整理，同时给出了最优的题解！有需要的同学记得保存起来，日后一定会用到。由于内容太多，下面这里查看：二、没有休息的大二回想一下大二的我，好像真的没太休息过......我们大学中大二的课程是非常非常满的，因为自己大一就定下了要拿国家奖学金的目标，所以在专业课程方面丝毫不肯松懈，不仅不能轻易翘课，就连平时作业都需要尽可能的都高质量的完成。与此同时我还给自己计划安排了大量的校内项目，国内比赛要参加。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是手机振动放在枕边:一个是金属闹钟放到床下桌子上：闹钟设置成05:30, 手机振动设置成05:20。这样每天就能05:20被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎大二的无数个日子每天都是在这样的晨曦中开始。因为自己要参加很多的计算机类比赛，大学中的比赛主要就分为程序设计类比赛与软件设计类比赛大类。算法比赛方面:自己在大一打下一定的算法基础之后，大二又阅读了很多算法相关的书籍:比如非常经典的刘汝佳的紫书,第一次学习这本书简直太爱不释手了，里面有大量的精彩的高频算法题目的归纳与精彩的讲解。记得当初非常认真的去复现里面好多的题目，然后跑去oj平台上去提交。还有蓝书，有一段时间我对图论相关算法特别痴迷，觉得紫书里面题目还太少了，就买了蓝书去专攻图论相关算法题目。另一方面也是为了后面要参加的算法比赛做准备。蓝书里面有大量的不同算法专题的ACM经典例题与讲解！巫神的挑战程序设计竞赛，这本书也是非常棒的！里面分为不同章节，由浅入深的介绍各种算法。最关键的是，里面给出的很多算法模板都非常非常的经典。是一本不错的算法比赛学习书籍。其实此刻在写这些的时候，回想当年的自己也是觉得走了不少弯路。当年因为我本科学校是垃圾弱校，学院根本没有ACM队伍，其实上面这些书籍的内容有些偏深了，比较适合ACM选手。但是作为普通的计算机专业学生，我当初花了好多精力练习的很多偏深，偏难，偏怪的题目其实后面也不太常用到了。还不如多刷刷LeetCode实在hhh。然后还有剑指offer很多同学发私信给猪学长求上面这些计算机学习的书籍推荐以及字节、阿里、腾讯的校园招聘面试面经，这里先分享给同学们：点这里, 计算机优质书籍项目免费推荐分享！大厂高频校招面经合集免费分享，点这里！我是在大三时候才知道剑指offer这本书的，其实上面的那些ACM级别的算法书我都阅读过之后，剑指offer其实就有些更偏基础了，好像60多道题目，都不算很难。在这期间，我一直活跃在各个oj平台上，然后积极参加各种算法比赛。我贴我一直比较喜欢，一个冷门一点的oj:哈哈当年的账号都已经找不到了。项目比赛方面:同时因为项目比赛我不太喜欢依靠别人，抱别人的大腿，所以一般我都是自己一个人是队伍中的主力。大二那一年我涉猎了非常多的不同方向的软件开发技术，几乎比赛需要什么，我就立刻学什么，然后就开始上手开发。搞过Qt，当时看的是这个，顺手也把c++期末大作业给搞了。当别人的c++大作业还是控制台的某某管理系统的时候，我用QT写了一个3000多行的带图形界面的桌PC端软件，老师直接就给了我98分的成绩让我印象非常深刻。玩儿过Android ，为我当时还在上小学的小弟开发了一个数学算数训练小游戏的App。同样不仅参加了一个小比赛，而且同时还作为了java课程的期末大作业。我记得当年好像是用安卓写了一个小的游戏机app，里面有别踩白块，汉诺塔等几个小游戏。现在app已经找不到了。上面这些书籍与项目如今都免费分享给同学们：计算机优质书籍项目免费推荐分享！然后同时写过web，搭过电商网站......这其中有的是自己对技术感兴趣，有的是项目比赛需要。回忆起来最有趣的事情，是我曾经还花了一个通宵的时间写了一个游戏脚本，30元一份的超低价，一晚上卖出去500多元，后来才知道贩卖游戏脚本不合法，吓得我赶紧就收手了。哈哈哈，但是我当时一晚上写游戏脚本赚500块钱的事情还是在学院里传了很久。悲催的期末:因为自己要参加的比赛，项目太多，有时候当比赛与期末考试周赶到一起的时候，简直就是如噩梦一般的存在。单片机期末，通宵到天亮。还记得当初大家都觉得单片机好难好难，我好像是全班为数不多把功能都实现的。终有收获:我只记得我大二那一年课真的是巨多巨多，然后真的是好忙好忙。但是努力的付出终究是有结果的！！！长风破浪会有时，直挂云帆济沧海当大二下学期结束，大二一年的成绩几乎满绩点4.0，同时辛苦很多时间参加的非常多的比赛都有了收获。然后终于等来了我们那年的国家奖学金的评选。按照当年我们学院的规定，学院每年有四个国家奖学金名额，大三学生分配三个名额。只分配给大二学生一个名额。我当时怀着忐忑的心情像辅导员提交了申请表，因为当时并不知道系里其他同学的实力情况如何，自己能否当选。当评选结果公布，我在公示栏上看到了自己名字的那一刻，我感觉一切的付出都有了结果。还清楚的记得当时每个公示的时候，我的个人信息是跟三名大三的当选的学长学姐并列在展览栏里，我大二的履历栏里的经历就和他们大三时候一样多。那时候我才发现，我用两年的努力，做完了他们三年的事情。三、说好""休息""的大三？当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。虽然我们学校非常差，保研名额不是很多，但是只要自己大三正常上课，自己不作死，几乎保研是十拿九稳的事情了。因为自己真的大一大二太辛苦了，同时也实现了拿到国家奖学金的这个目标。自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那个学长人非常非常好，耐心的跟我说了好多他的经验以及准备过程。那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招，才发现校招技术岗所考察的东西跟学校里学的东西几乎完全不一样。自己虽然是学校里“成绩优异”的好学生，但是竟然与企业里要求相差甚远。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。然后我的大三就开始又放弃了休息，再次开始进入疯狂的模式，我时隔好久再次又在大三走进了考研自习室......跟着所有大四考研的学长学姐一起，他们准备考研复试，我开备战大厂的实习。我在大三上学期花了三个月的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。看了无数本重要的技术书籍，学习并跟着做了好几个比较优质的项目，在csdn上写了400多篇读书笔记，刷题笔记，首先最开始的时候，我先通过校招面试题了解到，原来想要面试一个大厂技术工作岗位，原来需要在一个方向上深入的精通，而不是像自己之前那样瞎搞，所有方向都会一点儿，并不深。我就开始锁定的方向上大量的，先结合面经，然后深入的看很多很多的书。因为计算机相关书籍实在是太贵了，就一本一本的去网上寻找电子版的。你们可以看到我的截图里，每个书籍前面都标明了页数，这些都是我自己认认真真阅读过的书籍，并不是像其他人随便搜集到的资源。然后项目方面，我花了好几百块钱在某宝上买了很多的优质的项目课程：上面这些书籍与项目如今都免费分享给同学们：计算机优质书籍项目免费推荐分享！然后这块真的是采坑太多了！！！网上好多的卖项目资源的都是骗子，买到手里之后发现项目都是非常差的那种，技术也非常落后。这块真的是踩了好多的坑，浪费了不少的钱。最后终于找到了一些跟自己方向一致，比较优质的项目。上面的每一个我几乎都是先点进去大致了解，然后最后挑选出最好的几个项目自己深入去学习，同时在电脑上配置相关环境跟着实操，以此来充实自己的简历。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。在之前我那个时候，好多公司的日常实习还都没有远程面试，都要求必须去现场面试。因为联系我的很多公司都不在一个城市，我只能选择面试机会最多的城市跑过去面试。最后在大三上学期结束的那个寒假，其他同学都回家过年的时候，我放弃了回家，自己一个人跑去了北京面试。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！那时候我刚刚大三上学期......当人生中第一个offer进入我的邮箱的时候，我真的不知道我的人生从此被彻底改变......千淘万漉虽辛苦，吹尽狂沙始到金。四、后记别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 越优秀的人越懂得努力，越极度的自律。但是如果你能看到了这里，透过我的大学经历你会发现，不仅仅只能低头的努力，越早的掌握信息，越早的找到努力的方向，是远比努力更重要的事情。知道怎么做远远比低头去做更重要。同时你也会发现我的大学里也走了不少的弯路，我是少数既花时间在国奖保研上，又拼命找工作求职的。在计算机专业这是两种截然不同的维度。如果你在大一就决定今后想要去国内外更好的学校读研深造，那么你就应该像我大一大二时候，早早的掌握保研，考研，留学相关的信息。像我大一大二那样努力的搞好成绩，然后了解清楚学院内评奖评优的各种规章制度，制定好计划，去实施！如果你决定毕业想要早些工作，那么计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需要早早的关注求职，校招，面经，岗位等相关信息。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。在我后来的读研以及毕业后工作的期间，无数的学弟学妹们都来问我许多非常经典的问题:我的学历不好，不是985、211有机会进大厂吗?我本科专业并不是计算机的，有机会进互联网公司吗？等等......我在多家国内头部互联网大厂，跟无数面试官聊过，在校园招聘中，几乎没有一个技术面试官会因为学历专业出身去歧视候选者。互联网技术面试官就是会认真的去考察候选者的真正实力。985/211计算机科班硕士毕业拿不到大厂offer的人比比皆是，双非本科逆袭进大厂的故事每年都在上演。我知道有很多学校非常差的同学，有的在ACM赛场上挥洒汗水艰苦努力，有的甚至早早的就在大二从学校溜出来去大厂实习的。而还有的同学身在985甚至C9这样的计算机名校里，昏天黑地，游戏里激情人生，浪费四年，一无所知。都已经毕业了，待在家里的时候才开始到处投简历。无论你现在处在任何阶段，如果你能看到老学长的这篇回答，同时还真觉得有收获，放下手中的手机，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。最后留下一句我一直特别喜欢，一直用来鞭策自己的一句话，送给大家:10698字....我吐了....就先写到这里吧.....手好酸.....到这里10698字都看完的同学，如果觉得有收获，不要只偷偷收藏白嫖猪学长， 给猪学长留一下一个赞呀，这样也可以让更多的小伙伴看到呀！后面老学长的经历还有很多很多，保研读研，校招求职，方向专业，工作经历......之后有时间再更啦。五、赠人玫瑰，手有余香上文中提及到的所有技术书籍，项目课程，校招优质面经我之前一直都有认真整理，其中有很多某课上的优质课程是我曾经花了很多钱购买的，现如今也已经毕业啦，都分享出来直接分享给有需要的同学们。如果同学们还有其他什么问题，欢迎在评论区给我留言呀，不忙的时候我都会回复的。然后所有对字节跳动实习，或者求职感兴趣的同学，想找学长内部推荐的，也都统统都可以联系猪学长，记得点一个关注呦",大概有三个时间点。第一个是很久以前一个宁静的下午，我对着电脑屏幕发呆，因为我被分配了一个和地球正对面的团队合作的任务。而该团队代码之烂罄竹难书，回复速度之慢让我时常感到便秘。我还没有权限去check in代码和部署测试环境。一筹莫展之际我想干脆先去看看他们代码库把逻辑理清楚，之后能调试了改起来也快。没想到我看懂了。一个破request在三个service之间弹来弹去的路径和副作用被我一下午读明白了。当时我喜悦的心情约等于解了十个复杂的bug。在这之后我打开了一个新世界的大门。无论是工作中的代码还是开源代码，各种工具库，系统底层，想看就看。能够脱离调试环境深入理解代码这个能力的达成条件是长期独立解大型代码库中的复杂bug，磨炼自己对代码的感觉。有些答案说写代码是没有肌肉记忆的，有些答案说写代码是没有熟能生巧的，这些我是不同意的。学习编程即使走对了方向，也仍然需要大量反复的磨砺才能达到一定的高度。如果一个人还不能无障碍阅读代码，我是不承认ta有较好的代码能力的。阅读代码的能力大概需要四到五年来培养，天赋较好的情况下，科班出身毕业一两年就应该已经有很强的阅读能力，而转行的在入行五六年左右也应该能够有这样的能力。如果能大概一周时间在没有文档辅助下，允许每看懂几步去调试一下验证想法，能看懂的写路径是怎么工作的，那代码阅读能力就算合格了。之后无非是更加娴熟和自然的问题，如果跨不过这道坎，那就还欠磨练。第二个时间点是第一个时间点之后三年的一个冬日。以前写代码的时候我都倾向于听这种比较激昂让人想要骑狗上战场的音乐，沉浸在一种纯粹的释放的感觉中——因为我编程多数情况下实现只是在已经想好战略后的即兴创作。有几次一下午写千行上下的代码，十分酣畅淋漓。然而这一次，我突然想听的悲伤小曲。那一天我仍然写了很多代码，几乎重构了整个service。当我提交code review的时候，我很清楚地知道我的代码能力又提高了。因为我不再过多依赖我的直觉，而是有心地去衡量代码层面的权衡取舍。再去看之前写过的代码，有质朴的严谨和小聪明，却缺少了精巧有心的取舍和大智慧。换句话说，从前我知道如何不写坏代码，但是这之后我知道怎么写好代码了。这方面的磨练大概就是需要不断的review别人的code和被别人review，逐渐能够站在不同角度去看问题。同时阅读大量的生产代码以及开源项目也是必要的。“不坏的代码”是一个很大的解空间，要在其中选出“好的代码”来写，是需要持续的努力和耐心的。这里特别感谢当时的同事东欧大哥，他不留情面的code review和耐心跟我讨论我的review意见的过程使我受益非浅。我在早年学习编程的时候读过这本鼎鼎有名的著作，它教会我如何不写坏的代码，并且能够把坏代码变成不坏的代码，对我影响深远。后来我读了一本叫做的小册子，让我开始了对好的代码层面的设计的探索。这里特别说一句，我个人是不喜欢设计模式这种分门别类的玩法的。我对它们的态度是去理解，但是实践中仍然从高内聚低耦合，可读可维护的原则出发思考代码结构。因为写好代码是一种在利弊之间权衡取舍的有创造性和艺术性的活动，抱着教条写不好代码，只能写出教条。第三个时间点主要是涉及到对分布式系统的理解，因为题主问的主要是编程能力，所以就不细谈了。这部分主要是读书读paper以及读代码，动手推公式，动手写prototype。最后强调一下：即使方向选对，即使平台不错，不下苦功，靠投机取巧，写不好代码。,当时我还在学微电子，我调查了一下比我高几届的师兄的就业情况。然后我的编程水平就突飞猛进。,"那是一个很普通的下午，第一份工作。当时的上司把我叫过来说：这块的逻辑这么简单，怎么写了这么久啊。我来带你写一遍吧。接着，他一步一步讲解，边讲边写。先把他想的思路告诉我，然后就直接动手写，卡住了就再退回去重新想，其间不时我也会有疑问，他直接回答。写完了又review了一遍，把能优化的地方优化完并把格式排版好看后，提交，搞定。整个过程让我明白了，实际项目中的编程和大学里做题做作业是完全不同的：好的逻辑需要设计；好的数据结构也需要设计；debug是最平常不过的事，不是每个人都能一次性写对；好的代码不是一口气写完，也是需要迭代和优化的；结对编程是最好的教学/学习方式。编程实际上是一门设计的艺术，如何把现实中的事物抽象成二进制考验的是设计功力。经此一役，好像打通任督二脉一样，后来的学习都一马平川无比畅快。同时还学会了一句很经典的名言：A language that doesn't affect the way you think about programming, is not worth knowing.——Alan Perlis如果一门计算机语言无法对你的编程思考方式产生影响，那么它就不值得你去学习。PS：看完下面的视频记得回来点赞。",不是浑浑噩噩的四年大学，也不是代码搬运的三年工作，而是为了旅行而不得不做的那一年兼职。本人大学专业是计算机，全称计算机科学与技术，俗称码农预备班。当时听说这个专业热门就业就选了，又听说前端容易学又选了前端，浑浑噩噩读了四年后进了一家行业中游的互联网公司接着浑浑噩噩搬了三年轮子。这七年虽然谈不上懈怠，但也是按部就班，规规矩矩的。直到16年底，觉得自己受够了日复一日搬运代码的枯燥生活，先是请了一个月的假去旅游，后来干脆不想回去上班了。于是，为了解决旅游中的吃喝住的问题，开始做副业做兼职。直到一年后被一家头部互联网公司录用，回归一线。也有朋友问我，为什么出去玩了一年，反而实力进步了，从一个中游公司到了头部。我想了想说：「就是因为从公司里出来了，才有机会学一些新东西接触一些新项目」。接下来讲一下这一年我用了什么方法，才做到突飞猛进的：其实那一年，我做的事情无非就两件，接「编程的项目」然后重新「学基础知识」。我是在开始接程序员兼职之后，得完全为项目的一个端口负责的时候，才知道自己的编程能力有很大的漏洞。因为还在公司的时候一直是几个前端的同事一起做，自己不会就交给别人解决，到头来自己还是不会。意识到了这点之后，才开始回过头来补基础，这里给大家分享一下我当时的思路：学习基础知识巩固基础知识其中学习基础知识，又有两点要注意的：找对方向、用对方法。说的更直白一点就是学什么以及怎么学。学什么？首先要将基础打牢固，最基本的算法和数据结构一定要滚瓜烂熟，我当时是要求自己拿起来就能用。比如下面这些个算法和数据结构类型我是硬逼着自己啃下来的，很多兼职的时候没用上，但是后来回归工作的时候用上了。10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；不要小瞧了这小小二十组词，展开了去学，怎么都得花你个一年半载，例如单单排序算法就又可以分为以下十种:然后，当将这些基础知识吃透了之后，注意是吃透，我给自己定的要求是用到的时候就能直接用而不是回去再翻书。做到这一点之后，我就接着去学习一些更深入的内容：比如：编程框架是如何运转起来并输出“Hello World”的？如何让自己更正规，更有章法地使用Mysql呢？Key、List、Hash、Set、ScoreSet各自的使用场景有何不同？主流的编程框架都和设计模式相关，那他们有没有共通性？当我把这些问题想清楚了的时候，我发现之前的很多问题都难不倒我了。怎么学？每个人的学习方法都不一样，有的人喜欢边做项目边学习，有的人则喜欢学一段时间做一个项目，有的人喜欢看书学，有的人喜欢看视频学，这些都不是问题，重要的是找到适合你自己的。但下面这几点，最好还是不要去做了，因为这些坑这些痛我都已经经历过了，头发也掉过了，结果事倍功半惨不忍睹。1.一味的对着别人的代码去敲。刚开始不会做只有跟着别人敲，这没有关系。但是跟着别人敲了之后一定要自己理解自己记忆把它变成自己的东西。照着别人代码敲一遍两遍哪怕三遍，除了让我看得仔细点，练了打字外没有其它任何帮助。哦，对了，还多掉了几根头发。所以要记住模仿复现不是关键，思考才是关键。要能做到思考学习别人思路后，脱离书本和博客，完全自己实现功能。当我做到这点之后，我发现我的学习才是有效的。2. 想着一口气吃成个胖子我刚刚说过了，自己是因为项目做不出来才回过头来学习的，所以刚开始急于求成，学习只学个大概只求个会用，没有做到知其然还知其所以然。但是技术这玩意儿，不是看了个大概能照着做就会了，一口气真的吃不成个胖子，必须得扎扎实实地把事情做好。所以不要试图一次性解决所有问题，这里给个亲测有效的建议：可以将每天的学习过程拆分成小块，分阶段学习，这样的效率会更高些。说完了第一点如何学习基础知识，接下来再说说说说第二点如何巩固基础知识。方法千千万，我也试过不少，但最有效的我认为还是刷题，有方法的刷题。下面这个刷题方法很普通但也很实用，推荐给你：第一遍：可以先思考，之后看参考答案刷，结合其他人的题解刷。思考、总结并掌握本题的类型，思考方式，最优题解。第二遍：先思考，回忆最优解法，并与之前自己写过的解答作比对，总结问题和方法。第三遍：提升刷题速度，拿出一个题，就能够知道其考察重点，解题方法，在短时间内写出解答。然后给大家推荐我当时看的两本书还有一些学习网站，能够让大家学得更轻松些。书：《代码大全》激发你的思维并帮助您构建高品质的代码。《程序员修炼之道》全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。网站：1GitHub — 开发者最最最重要的网站：https://github.com，能学习但不只是学习。W3school — 最适合新手的网站：https://www.w3school.com.cn/：免费而且全面。实验楼 — 一个在线编程学习网站： https://www.shiyanlou.com/courses/，很方便实用。Code School — 一个英文学习网站：https://www.pluralsight.com/codeschool，支持分阶段挑战。最后一步肯定还是要落在实操的，我的方法是接兼职项目、一个接着一个，因为要供着自己旅行。但其实还有两种方法也能提升自己：1.做一些实操性强的个人项目，自己练练手田纳西大学助理教授奥斯汀·亨利结合自身经验，给出了一份“程序员都应该尝试的挑战性项目”清单，包含下面六个项目，我在那之后做了一遍觉得还不错，推荐给大家：文本编辑器2D游戏-太空侵略者编译器-Tiny BASIC迷你操作系统电子表格电子游戏机模拟器每一个项目都存在不同的挑战，比如文本编辑器就要求在不使用GUI框架中内置的文本框组件的情况下，搭建支持光标移动、选择、插入和删除操作的文本框并将文本文档存储在内存中。如果你能解决掉这些项目中的这些问题，然后把项目独立完整的做出来并且运行成功，你的能力肯定能再上一个台阶。2.写技术文章大家想必都知道费曼技巧，这也是其中的一种应用了，把你自己弄懂的东西教给别人，让别人也能看懂，在这个过程中你肯定还是要把一个完整的项目给做出来的，一整套下来，你会将自己理解的东西掌握的更透彻更深入。也算是一种不错的实操方式了，能让你的基础更加牢固。只是要记住，在这个不断做不断输出的过程中，做到下面这三点很重要：让编程成为一种习惯。学练结合，从做项目中找知识漏洞。思考更深层次，更底端的东西。最后，如果你也想通过兼职来让自己的编程能力突飞猛进，下面这篇文章推荐给你，因为做兼职太容易被坑了。里面有我总结的兼职三接四不接，也就是说哪些兼职不会被坑，而哪些兼职要格外注意。还有一些国内外的兼职平台以及他们的一些特点，希望能对你有所帮助：
室友想抄我的代码，给还是不给?,"一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？","当然可以给，但是建议你在代码里做点手脚。最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。/* * 作业：*** * 作者：哆啦A梦 * 时间：2019-6-17 11:30 * 版权所有，盗版必究 */#include <iostream>#define ___AUTHOR___IS___DORAEMON___ // 这里也是在说明作者是谁// 再下面写程序代码就好了对于那种稍微警觉一点的，会复查源代码的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。#include <iostream>int main(void) {    // 下面这段字符串的值是 FROM: DORAEMON，就是各个字母的 ASCII 码。    // 这句注释只是我来向大家解释这段代码是什么意思的，实际操作时千万别写    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};    std::cout << a << std::endl; // 打印版权信息    // 在下面写程序代码} // main()这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！#include <iostream>#include <ctime>int main(void) {    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};    // 1560816000 是北京时间 2019 年 6 月 18 日 8 时的 Unix 时间戳，以下代码的作用是    // 仅当系统时间在 2019 年 6 月 18 日 8 时之后才打印版权信息。    if (std::time(0) > 1560816000) {        std::cout << a << std::endl;    } // if (std::time(0) > 1560816000)    // 在下面写程序代码} // main()如此，就既不丢人情，也不怕被卷入抄袭风波了。更新：补充 cout 和 endl 前漏写的 std 命名空间。",我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。话说。。当年的代码写的真是烂啊。。。,现有回答的答案都服务太不到位了。岂止是要给啊，还要为了不让老师看出来，给改好了再给。想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？所以，要给。如果有精力还要多给几份，多改改。这是不可多得的练习重构代码的机会。一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。,某些高赞是想让题主死吗……伤害室友感情级别，由低到高：1、给他抄。2、给他抄，但附加合理的收费。3、不给抄，但提供帮助/思路4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）5、犹豫且模棱两可的拒绝。6、用拙劣的借口拒绝。7、拒绝并附带嘲讽（划水挂科活该，您配吗？）8、爽快答应，但暗中使用手段，使室友被查出抄袭。你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）但你要是答应给他抄，然后背后捅刀子，别说这段友情必然凉凉，你的臭名甚至会传遍整个专业整个学校。大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。那可真的是药丸了。,当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。结果你猜怎么着？？我60分，室友80分，隔壁那货95分。所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。,你放到github上，贴上一个gpl协议，告诉舍友地址。你维护的开源项目对吧，也有你的维护记录，老师也能看得到。,想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）广告色情片如何损伤你的大脑？作者 柳叶锈刀会员专享¥9.90去查看,我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来时间长了，他们也就都只问我思路了关系好的关系不好的知道我这么严肃也就不想抄了更新分界线我的回答的核心就是“要自己学会，自己懂”以下是一个栗子我努力往好的方向带别人难道不好么？,原回答：给啊，为什么不给，不光给，我还会手动帮他们改好，他只需要把名字签上就ok了！服务就是这么到位，您只需要支付500元就ok了，超值！什么，您没钱？吃我一记素质五连！事实上，作为一个在大学代码写的还行的小哥哥。这种事情是免不的。没人跟你借代码那只能说明你水平不行了，因为大学会写代码的真没几个。其实我大学的时候有一个同班女生，为人豪爽，跟我兴趣相投，遂结为异性父女。。。。扯远了，就是关系很铁那种，她不会写代码，而我为人懒散不喜欢文案报告之类的东西，我们一拍即合，我承包了她大学本科所有的代码工作，而她帮我搞定了大学本科所有的报告类工作。而且。。。有一门课叫web开发，只有大作业没有考试，她的代码是我的复刻版，功能有什么还是我手把手的教她说的，结果她分数比我高。。。。其实现在回想起来，我亏了吗？没有，我觉得血赚好吗！！她亏了吗，她也血赚好吗！没我给她写代码，就她那水平她要毕业得秃了！其实吧，我的真实做法是，舍友跟我要代码，我会给，老师查重，我会提醒说你改改，也不会太上心，我这样是因为我不想出国也不要保研所以对分数很佛系，能毕业就行。评论里也有人会说什么对舍友负责之类的，给别人抄作业是害了他之类的说法。对不起我不同意这个说法，大家都是成年人，我不需要对他负责。只要他不让我蒙受损失，他需要帮忙，对我来说也是举手之劳，我乐意效劳。就这么简单，他要抄我就给他抄，他有问题问我我就给他解答，他考一百我考60那是他的本事，我不吃亏的。总有人会觉得教会徒弟饿死师傅，可我从来跟他们都不是竞争关系，他们只是我的舍友朋友好哥们，我才不会说为了他们好而不给他们这种屁话了。试问我如果这样做了他们会感激我吗？完全不会！他们会觉得我是个自私自利的小人罢了。为人处事的原则是人人为我我为人人，而不是好为人师教人做人。或许将来有一天，我有求于他，他会念我当年一码之恩，给我方便，而不是对我说：对不起，我不能帮你，我这是为你好。。。。。学校的感情是最纯真的。勾心斗角的，何必呢。你们要的表情包,想起了大学的时候，一个C语言大作业，我写了90%吧。另外一个室友不会码代码，做了一些杂乱的工作(当时还没学数据库，所以自己用csv当数据库，这个兄弟的任务就是填充csv，很杂也挺费时)。这个任务是5个人一个小组，按人头排名报上去，每个人根据作业得分和排名再得分。我们小组分了一个女同学，从头到尾没做事的那种。其实这没什么，有的人做事，有的人不做事，挺正常的。但是最后要交排名的时候，另一个大概做了5%任务的兄弟，居然提议女士优先，让女生排第一个。我当时就不乐意了，凭什么我得这么“绅士”，而你们下课就去LOL没想过作业的事？然后他可能觉得我不好说话，又提议让女生第二。我还是看不过去，你排第三，自己让出排名我没意见，但是凭什么让做事第二多的兄弟让位，慷他人之慨？我室友大大咧咧的北方人，很少计较得失，虽然成绩不行吧，但至少做作业的时候态度是端正的。真就欺负老实人呗？我觉得你的困境和我室友一样的，当你室友(我故事中提出女士优先的那个男生)先向你提出这个要求的时候，他就已经在借你们间的情分慷你之慨了。但这事有意思的是，如果你不同意，反而最后是你落个口实，说你不够意思(正如我室友不答应可能就被说有失风度，毕竟码农专业妹子那么稀缺)。借作业的事屡见不鲜，我的建议是，如果对方确实做不了(我室友第一次考试写出过case1-case99这种代码，草稿纸都不够用，笑)，而且成绩差可能挂科，那看看情分能帮就帮；对方是混混日子，亦或是家里有矿不在乎这些成绩，那必然自己要为一些行为负责。别说什么怕挂科，怕影响排名，都尼玛扯淡。不帮他，让他涨一次记性，是为他好。而真正需要考虑排名的学霸，是不会出现找你借专业核心课作业抄的情况的。就酱！,你问对人了，我这个糟老头子可是坏的很呐来，试试这个 ：python代码在线混淆这个东西大家应该都知道怎么用吧如果你们是手写实验报告代码的话 嘿嘿嘿混淆前（你的代码）：混淆前的代码混淆后（你舍友的代码）：混淆后的代码专治猴哈哈哈，我舍友交实验报告回来了我去给他开下门∑(´△｀)他说要把我的头按到键盘上？怎么ke ejdj jfjtiogos ji de dian ge zan meebfsjf kskfddddk dkskwggdjsfkskkdmmrmdhdjkdk,"前面可以直接跳过，直接从最后三大段看起！你们老师做的什么事儿啊。。。凭什么不能抄代码？代码界宣传了那么多年的开源开源开源，都喂了狗了吗？以前微软吵吵着要干死开源的，现在不也成了GitHub的大股东了吗？还带着头的搞开源。。。你同学要问你抄代码，你让他们抄（其实说让他们抄不太合适，应该说让他们参考。。。），首先这肯定不是你的错，因为本着开源的精神，你的做法是值得赞扬的！你同学自己不做作业，被查重查出来了，倒霉也是他自己的事儿，因为这本质上是一个作业，评分标准确实是老师说了算。。。但是，保险起见，我给你出个招儿吧，绝对不会有问题。去类似GitHub这种开源网站开个账号，把你的代码传上去，然后挂个GPL3或者MIT什么的license，然后让你同学随便抄好了，查到你头上，就把网站扔给你老师看。首先，GitHub上的代码说明这是你写的，你是作者，绝对没问题，如果你同学也有GitHub，也把代码传上去了，就看时间戳呗。。。代码是谁的简单明了。其次，你有了license，这就说明，谁抄都和你没关系，校规还能比版权大啊？后者是有法律效力，受法律保护的。。。copyleft保护你的代码随便被人抄的权利神圣不可侵犯，还反了天了不成？如果这都找你麻烦，那就是你老师的问题了。有同学问，抄作业虽然不违法，但是违反校规呀？我同意but！抄代码和抄作业还是有很大区别的！如果按照我上面说的做，那么你就会有三个优势1. 你是被抄，不是抄别人的！你把自己的代码发在github不违反校规吧？(那些把“作业禁止上传到github”写进校规的大学就别往下读了，老师考试前明确表示禁止把作业上传到github的也别往下读了。。。)2. 别人抄你github的代码，那肯定是别人的错呀……和你没关系！退一万步说，请拿出证据证明是你主动给别人抄的！这种确凿的证据，除非抄你代码的同学想坑你提前给你录音，否则根本不存在！既然拿不出证据证明我是主动给别人抄的，别人抄我的github我又没办法控制的……就奇了怪了，明明我是被抄袭的对象，为什么惩罚我？3. 不要问我为什么要发github，发github好处太多了，我必须要快点发，早发就可以宣誓主权这点道理不知道吗？有的同学问，严格地说，在课程结束之前把代码公开发布就已经违背了学业诚信了这我完全不同意哦！这种事情不能一概而论的，至少代码不行，因为个人写的代码其实是一种知识产权，并不是普通的考试答案。我自己本人就很喜欢在GitHub上公开自己的代码，不管是考试的还是paper所属的，从来没听说过有学术诚信问题。谁抄袭了，出了问题自己担着，我肯定是免责的。核心问题还是在于，你要证明我是故意给别人抄袭。如果是公开自己的作业和笔试考试答案，那肯定逃不了干系的。但是在GitHub上公开代码恰恰不能算做是故意给别人抄袭。因为这和申请专利一样，申请某些专利意味着你要公开你的设计的，这不是给别人抄袭，而是告诉别人，这是我的，不准抄！GitHub是要挂license的，一个道理，告诉别人，这是我的知识产权，你们不可以偷，license确保我可以分享的权利，你们抄了做什么用处和我无关，但是出了问题我是不管的，包括挂科！所以GitHub的license是一份具有法律效力的免责申明！既然免责，为什么要惩罚我？法盲吗？另外我要提醒大家！在GitHub上发代码，都会挂一些GPL3、MIT什么的协议，我推荐GPL3，这也是我一直用的，为什么？因为想抄GPL3要满足四个条件License and copyright noticeState changes （标明你在哪里更改过）Disclose source （必须要把我的源代码也附上）Same license （你要使用同样的协议）其中第二点和第三点就是我的免责理由！因为第二点和第三点其实是在说，如果你想抄我的代码完成作业或者考试，就请自觉去找老师自首。。。要么就别抄！任何人想要抄你GitHub上的代码，为了完成第二点和第三点，他就有义务自己向老师报告说，“我抄了某某某的代码，哪里哪里哪里是我自己改动的”，所以说，说你违背学业诚信是不正确的。如果你的同学在你的GitHub上搬走了你的代码，并且他想作业或者考试作弊，必然不会做到第二点和第三点，你的同学不单单是作弊，而且是违反了GPL，所以你也是受害者，更不应该受到惩罚。注意到这背后微妙的逻辑了吗？你在GitHub上公开了代码，挂了license，这些license是要求抄你的人必须自觉的把你的源代码附上，并告知全世界，他是抄你的，所以你也是在帮着老师奋斗在反对考试作弊的第一线知道吗？So，你把代码发GitHub的行为，意味着你做到了诚信，你也要求借鉴你代码的人也必须诚信！简直不能太正义了。。。然后谈谈你的同学，想抄你的代码，既不想让老师知道，又不想违反GPL，那只能学你的思路自己从头写呗。。。还有知友问，这是有道德问题的。。。这没有道德问题，放心。。。为这种事情较真的老师不单单是法盲，其实连是非都有点分不清的。。。应该去参加一些pedagogical的课好好进修一下。。。我自己本人也是老师，我不反对学生在GitHub上放代码，相反，我还鼓励！通过这样做，我很容易搞清楚，这代码到底是谁写的。我只想知道真相（谁抄谁的），并不以惩罚学生为乐。。。但是，谁考试抄袭别人，我就挂谁，就这么简单粗暴。。。其实应该鼓励学生们把代码放在GitHub上公开，比偷偷摸摸的好不知道多少倍，一方面是教会学生如何保护自己的知识产权，另一方面，对老师的查重也带来了极大便利（我挺腹黑的）。所以从老师的立场来说，这到底是为了什么？是为了杜绝作弊呢？还是为了享受惩罚学生的乐趣？如果是为了杜绝作弊，真的应该鼓励GitHub，让一切真相（代码谁写的）都大白于天下，查重也变得很简单。。。开源的目的也是这个，让一切放在阳光下，想抄？抄吧，公开的抄比偷偷摸摸的抄更容易监控，你抄了别人的代码，被我发现了，这科挂掉你可别怨我。。。至于把代码发GitHub的那位同学，谢谢你的合作，不然我还真搞不清谁抄谁呢。。。不要问我，万一被人偷了代码抢先发了github怎么办？。。。这是你自己的问题。。。我明显本意是在反作弊，你们要看成是鼓励作弊我也没办法……上传github并使用license，本质上就是在保护自己的代码。特别是GPL的第二点和第三点，这就是让抄袭的人自己去自首的意思不是吗？另外我不支持和老师对杠的做法，只是指出这样做是正确的。至于有些老师会因此给你零分，只能自求多福，人无完人，老师也一样……（有些老师就是不明白GPL的第二点和第三点就是让抄袭的人自己去自首的意思，也不明白鼓励大家使用github其实是对反作弊有利，既然你都上课教人写代码了，自己开个github账号和学生互加好友就那么难吗？还可以长点粉丝啥的。。。一切都很公开透明，查重也变得很容易。。。）有知友提出这样的观点前提是你有时间讲道理，并且愿意承担讲道理不成功的风险我觉得说有道理，这是非常现实的考量，但从另一个角度可以看出悲观情绪。老师都不愿意被学生们当“傻瓜”，可是很遗憾，大多数老师都被学生当成了很容易就是非不分的“傻瓜”不是吗？我发现很多人都没有仔细阅读这个答案就已经开喷了……我不支持跟老师对杠！我不支持跟老师对杠！我不支持跟老师对杠！重要的事情说三遍……吃不准，你可以课上问老师啊～问个老师成本有那么高吗？另外，我开了两个专栏，发了一些干货满满的技术型文章，关注度居然没有这个答案高……个人感觉挺讽刺的……可以直接从这里开始阅读我发现很多人就是看不懂我到底在写什么。。。我这里总结一下我到底是在说什么。我的建议适合这样的你你不想给同学抄袭又真心想帮助同学理清思路，能够自己写代码还不想浪费时间亲自教（自己不好好学习，凭什么让我来给你上课啊？对象除外。。。）你的情况符合以上三点，并且做到以下两点：确认不违反任何校规和课程规定。并且在和老师沟通过之后（把上述三点也告诉老师，如果老师不明白GPL，那就简明扼要介绍一下，老师不愿意接受新鲜事物就算了。。。）。那么，上传github挂GPL是最安全最正确的做法！为什么？你的同学面临以下两个选择你的同学如果想抄，就必须尊重GPL，也就是向老师自首如果不想这么做，那就借鉴你的代码，然后自己写。。。两者必居其一！如果违反GPL抄袭，那是明显违反你的主观意愿的！说白了，挂GPL就是给人参考但委婉的不让别人抄！所以我就不明白了，一个明理的老师为什么要惩罚你这样的好同学。。。这叫什么知道吗？这叫""You are playing the game! Nothing goes wrong!""PS、还有人说我一开始就嚷嚷着要抄要抄的。。。喂喂？开门见山也可以是假山好吗？请读下去。。。关于学生作业的版权归属问题，因为这和雇佣关系有巨大区别，所以学生的代码的版权不应该属于学校，除非例外情况。其实在stackoverflow上早有这样的讨论，请阅读第一高赞回答的第一句就足够说明问题了：""If nothing is stated by the school that you signed and agreed to...copyright defaults to you, the author.""所以沟通很重要。我知道有些学校会事先让你签合同的，真的动笔签哦！。。。这种就别想了。但是这样恰恰说明，默认版权是你的，不然干嘛脱裤子放屁呢？另外有些学校会控告你misconduct，因为你发布的作业让低年级学生作弊。。。这种情况并不是每个学校都普遍存在的。这些学校会控告，究其根本原因，他们不但允许而且支持老师们可以重复利用课件特别是试题和考题，哪怕换个老师也用一样的。。。我表示理解！但是我们这儿是不行的，课件可以重复，但是考试绝对不可以重复，因为想想就知道，你以为GitHub是唯一的渠道嘛？私底下就不能问啊？所以我们大学是不允许老师考题重复的！但。。。我只想说，事先沟通很重要！既然版权默认是你的，你有选择GPL的自由。大家要讲道理嘛。。。我还要声明一下，我也没有鼓励大家去和学校怼。。。但是有一点是肯定的（也没什么好藏着掖着的），大多数学校的学生都是弱势群体（北欧大学除外），也就是说，被不公正对待且放弃了上诉权。。。而看多了这些的人觉得这世界就应该这样，所以跑过来笑我naive。。。实际上，绝大多数事情，你是可以做到有理有利有节的，并且在动干戈之前就可以化玉帛的（事先沟通好，事后就不用互怼了不是吗？而缺乏沟通到最后搞不定的，纯属一手好牌自己打坏了。。。）。最后，我想留一个问题给大家思考，习题和考试让学生写代码，特别是take home这种，意义到底在哪里？可以互相参考吗？我们是真的想把平时不好好学习的学生们拍死在考试的路上吗？还是希望他们每一个人都能最终能学到东西并写出自己的代码呢？教育的目的究竟是什么？教育的目的是育人，不是毁人。。。这就是我所说的政治正确，然鹅还是有人嗤之以鼻！我相信，答案一定是，可以互相帮助互相参考，毕竟老师都让你带回家做了，可以谷歌可以百度不是吗？看谁不是看呢？但是请write your own code from scratch!所以我个人倾向于鼓励学生互相帮助，因为GitHub可以挂GPL这种优秀license，所以非常适合让学生互相之间公开代码互相借鉴，并保护自己的代码，但是必须要严惩抄袭的学生！另外，作为一个多年写代码的人，我可以告诉大家，不论你是菜鸟还是代码高手，当你写代码没思路的时候，最好的办法就是去读别人的代码并从中借鉴。。。只要你还在写代码，你一定会一直不停的阅读别人的代码。。。""Shut up and show me your code!""开源的出现不是没有原因的。再这么添加下去，文章要越来越长了。。。我个人不喜欢修改已经写过的东西（除非是错别字这种），会造成上下文缺失。希望这是最后一次添加。。。",最简单的办法，就是掩盖你已经写好代码的事实，反过头去问他要代码。这样一来，他一定不会再跟你要代码了。在最终要交作业的时候，佯装熬个夜啥的，最后一刻提交。既保护了你的代码，也不至于伤害室友关系，某种程度上还能树立你牛人形象，毕竟我在大学期间就特别羡慕那些熬一夜就能解决任何问题的人。这样做唯一的不好，就是有一点虚伪，对朋友不诚实。但是我要告诉你，当你今后步入社会之后，会经常遇到类似的问题，我把这类情况总结为：“能帮，不想帮，不帮伤感情，帮了我吃亏”。朋友借钱，你明明有钱又不想借，怎么办？同事让你加班帮他干点活，你明明会干，但是就是不想干，怎么办？亲戚想借你车，你正好不用但是就是不想借，怎么办？这种情况通常面对的都是非常要好的亲朋好友，你绝对不想因为一件小事而弄得不愉快或者从此心存芥蒂，但是你又不想当包子让自己吃亏。那么怎样才能在不伤害感情甚至不明确说出拒绝的情况下，处理这种情况呢？很简单，给自己创造一个和对方类似的诉求。朋友买房跟你借钱，你可以说：“老婆想换辆好车，正想找你借点钱呢，看来咱俩手头都紧啊”同事让你帮他干活，你可以说：“正想找你帮我弄个xxx呢，看来你现在真忙”亲戚想借车，你可以说：“我也正想借辆车呢，我的车不跑了”然后，你的困扰就解决了。当然，诚实永远是优秀的品质，只有面对无理的要求时，适当的不诚实，可以让大家不至于那么难堪。,给。大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。后来我创业，室友从上海赶到北京帮我做了3个月。我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？,身为一个大学前有点基础的留学生，我大一给几个有些困难的朋友轮流写过作业。我们有的课程甚至可以复制代码，网上的别人的都可以，但要写明出自哪里。我喜欢编程，多写点也无所谓。他们不想学就不学，多点时间做自己想做的事。我也不在乎别人成绩超过我啥的，听起来可能有点虚伪，我甚至不在乎学历一类的，毕竟走出学校去工作去科研，还要看真本事。人都有自己想干的和不想干的事，想做什么做什么，想给就给，不想给就不给。说到copy代码，最近看到个笑话挺有意思，大家笑一笑就好thx~,曾经我把我的数据结构与算法课设代码给了别人，然后他又给了别人，然后别人又给了别人，然后又.......最后他们成绩90+，80+，我却只有74分………………,回答有讲自己经历，讲自己的处理方式的，也有质疑舍友的关系的，这些都不是问题的关键关键是，题主问了这个问题，答案已经很明显了。不想给，又不想伤害感情，两难了这个问题不涉及编程、不涉及代码，也不涉及什么作业……大体上可以确定，题主犯上了取悦别人的毛病，即不敢说“不”如果你们几个的关系比较好，你说不让他抄，是不会伤害彼此之间的感情的，但是你拿捏不准，害怕伤害别人，如果我不给舍友抄，一个小小的作业，就让我们的感情散了，不值。造成不敢说“不”的原因，只有一个，那就是你也害怕自己的要求，被舍友拒绝。你高估了说出“不”后，对舍友的伤害。你拒绝给舍友抄代码，你觉得会伤害感情，舍友不会这么想的，在他眼中，这是小事，一两天后这件事可能就把它忘了，除非你们只是表面兄弟。当然，说不也是有艺术的。假如你告诉舍友：“不给，自己不认真学，怪谁？滚回去好好念书吧。”是谁都会种想踢死你的冲动。最好的方法二十四个字：贬低自己，抬高别人提供帮助，敢于说不切忌拖拉，不伤感情告诉你的舍友：我水平很低的，写了很久才完成的，bug肯定很多，bug一样的话很容易被怀疑的，我现在要花很多时间改，来不及了，你看你这么聪明，肯定没问题的。直接抄，然后再改肯定不行的，要不你看，你写，我帮你看看有没有错，或者倒时帮你找一下bug。说出类似的话，我不相信会伤害你们之间的感情。还有，最重要的一点是，拒绝要果断，不要拖拖拉拉，越拖，越容易伤害感情，越犹豫，舍友觉得好像有希望，就很想继续劝服你，可是你又不给，来来回回，久而久之，结果就不言而喻了。——以上是来自的回答。,"用rust写代码，我大一一直用的c,cpp写代码，主要也是课程要求，后面没有语言限制了，我就用rust完成我的大作业，因为这语言用的人比较少，老师看了肯定有印象，而且也不好改动，我的室友看了我代码一般都会知难而退，因为这种语言老师一般都会多问几句。",取决于你室友是什么样的程序员渣渣程序员：改改variable的名字交了，结果查重99%重复，卒。普通程序员：改variable名字，改代码结构，你用for loop，他写个while，你用array，他改用ArrayList，运气好查重查不出来，改的差一点的，卒。未来的BAT：改variable名字，你用for loop，他写个lambda for each，你用boolean，他用int表示，你用equals，他写个comparator，你代码600行，他代码400行，你甚至一度怀疑自己是不是抄的他的。其实抄代码也是一门艺术，抄的是思路，不是语句。抄的好代码整洁度++，抄不好return重修。,我以前都是传 上的，一份作业被 二三十是常事，额，我觉得给他们参考参考不是坏事，也有不少人给我留言提建议，毕竟代码嘛， 是正常的事，但是精髓还是要懂才可以安心 cv
有哪些顶级水平的中国程序员？,希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）,在鹅厂职级调整前，做到T5（科学家）的程序员，水平和履历都很能打。比如下面这位大佬：吴石曾经是全球提交漏洞数量最多的个人。他曾独自发掘超过100个Safari的CVE漏洞（“Common Vulnerabilities & Exposures”，公共漏洞和暴露）。他曾创造过单月申报微软漏洞数量全球占比10%、独自发掘15个iOS漏洞的惊人成绩——这个数字比同期苹果自家研究人员发现漏洞（6个）的两倍还要多。他曾发现只要给对方的QQ发送一条消息，就能够得到对方电脑的权限，进而控制对方的电脑，这对于受众巨大的QQ而言无疑是颗不定时炸弹，从此推动腾讯安全应急响应中心（TSRC）的成立。据说初二之前吴石的数学非常差。但后来遇到良师启蒙，他对数学的兴趣一发不可收拾。高二拿了全国数学竞赛一等奖，后来考入了复旦大学数学系。上了名校的吴石也和在座各位一样打游戏，但不是帝国时代和红警2，而是叫做“MUD”。但人家玩着玩着就黑进了游戏的服务器，并且成功修改了自己的游戏数据，从此走上了走漏洞之路。你玩王者只想着喷队友，别人玩游戏自己开挂，这就是差距啊同学们。*MUD（Multiple User Domain），一款上古时代的多用户虚拟空间游戏整个大三吴石几乎都在搞计算机，他去软件公司打工，以至于几乎没有上一节课，但就是这样人家也就挂了一科。一次偶然的机会，吴石向微软提交了可以实现系统提权的高质量漏洞，出乎他意料的是微软居然提供了奖励——要知道在当时的环境下，国内很少有公司能做到这么体面的事情。受宠若惊的大神一发不可收拾，没多久又提交了数十个漏洞，这甚至超过了微软自家安全团队，2007年他收到了来自微软的offer。再到后来，漏洞大牛的简历愈发丰满：在加入KEEN Team后，吴石和队友们用两种不同的姿势搞定了 Safari，拿到了数万美金的奖金。第二年全世界的黑客用类似方法掀起了挖掘 IE 漏洞的狂潮。2013年，腾讯抛出橄榄枝，吴石成为科恩实验室的首席科学家。2016年他带领科恩实验室团队和腾讯电脑管家组成的联合战队 Sniper 一举拿下了 Edge、Safari、Chrome，总分38分，以超越第二名13分之多的优势摘得了“世界破解大师”，比赛中所有的破解中都至少有一个吴石系统跑出来的漏洞。当然现在更为人所知的，是他和他带领的科恩实验室团队对特斯拉的多次破解。参考链接：腾讯科恩实验室吴石，站在 0 和 1 之间的人没想到这个问题这么多人关注，有兴趣了解鹅厂程序员的小伙伴，可以再看看这两篇：,1、蔡景现 （多隆）2000年加入阿里巴巴，在阿里的花名叫“多隆”；（经网友提醒是花名，不是外号，对不起我不严谨）2003年，被马云拉进了一个秘密项目，和另外两位工程师一起从零开始，要在一个月内，搭建一个名叫“淘宝”的网站，并涵盖所有交易系统和论坛系统；2003年-2007年，独自维护淘宝搜索引擎，并且这还不是他全部的工作；2014年，被邀约成为阿里巴巴合伙人。阿里系统软件事业部研究员毕玄说，“牛P很多，但能被称为‘神’的只有多隆一个。他在解决故障方面的能力更是无人能及，在淘宝的故障解决历史上有N多的案例。”阿里中间件研究员小邪随手举了两个例子，“五彩石项目多隆完成了商城搜索的dump逻辑，当时如果没有多隆，整个项目需要延后2周；还有一次，淘宝session框架调用session_tair故障，一堆人（应该有10人+）一起排查问题，从6:00排查到第二天的6:00，最后多隆查到了问题。”同样是阿里合伙人、天猫技术部副总裁范禹，之前在淘宝有个习惯，碰到搞不定的技术问题，就去找多隆。2、章亦春春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法江苏镇江人，1999年，初中的章亦春第一次接触《C 语言程序设计》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；2017年，在美国创办了 OpenResty Inc. 公司。有人说：“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”3、陆靖（中间捧奖杯那个）ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。,尤雨溪在美国留学时，曾经用两天时间，就复制出一款H5的Clear软件，在APP Store上线一天，就取得了付费版和总版第二的成绩。2014年2月，尤雨溪开发了一个前端库，就是我们熟悉的Vue.js。Vue发布后，受到很多前端程序员的喜爱，很大程度上提高了前端程序员的开发效率。后来尤雨溪希望自己能够将所有精力都放在Vue.js上，希望全职去开发和维护，在patreon上进行众筹，最终众筹的效果也是让他非常满意，每月能收到一万美元的赞助。为了大力推广Vue，他经常出现在JS的各种交流会上，给广大开发者分享Vue的开发经历，使用Vue开发的方法和技巧。在他的带领下，Vue.js正在茁壮成长，国内很多大小公司都在使用Vue，相信你也一定使用过这款前端的开源框架。尤雨溪全职做Vue后，已经赚取人民币上千万了，真是非常厉害的程序员，值得我们大家学习。这就让我们不得不深思，同样是程序员，人家怎么这么厉害呢？蔡景现蔡景现被称为阿里的扫地僧---“多隆”，是阿里巴巴初创时加入的三名工程师之一，也是阿里巴巴新增的三位合伙人之一。非科班出身的他，在一个月内从零开始搭建出了现在的淘宝，为了解决项目问题，常常在半夜爬起，去排除故障、去解决问题，独自维护淘宝搜索引擎5年，被称之为“码神”。他精通C/C++/Java，从前端到后端，在从技术底层和高层业务之间来回切换，阿里的CTO对他做出过很高的评价，一个人能够顶得上一个团队。比如，写一个文件系统，别人做可能是一个项目组或一个公司，而他在很短时间内就能从0到1一个人做出来。在所有工程师的眼中，他是一个神，甚至在公司内网的便签上，他也被称之为神。他很有钻研精神，很喜欢写代码，很傻很天真，写代码可以写到出神入化的状态。我们应该像蔡景现一样，要有钻研精神，多写代码，多做项目，多学习；编程只是一个技术活，多做练习便能熟能生巧，将来也会成为一名出色的技术专家。陈皓陈皓被大众称之为“皓哥/耗子哥”，他在博客上写出了很多经典文章，推荐大家可以去看看，他的博客：http://coolshell.cn。他从事软件已经17年多了，对底层技术架构早已了如指掌，曾就职于亚马逊、汤森路透等，目前正在进行创业。阮一峰阮一峰是一名经济学博士研究生，依靠对技术的执著和热情，不断学习钻研，成为了一名IT专家。他热爱技术、热爱写作、也热衷于开源。他是经济学里写博客最好的，写博客将IT技术写得最通俗易懂的。前端的同学对他应该不陌生，估计很多学前端的同学都是跟着他的博客学习的，他的文章随处可见。他翻译的著作有：《黑客与画家：硅谷创业之你Paul Graham文集》《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等。章亦春大家都称他为“春哥”，他曾经就职于中国雅虎、淘宝、Cloudflare等。他的编程之旅开始于抄书，他很喜欢向大家推荐他的抄书学习编程之法，毕竟他可是从抄书到开源之巅的。现在的春哥已经全身心投入到OpenResty中，希望OpenResty未来能在工业界、互联网等行业掀起大风大浪，引领机器编程革命。如果有小伙伴想知道春哥是如何通过抄书学编程的，可以去图灵社区看看春哥的专访，里面记录了春哥的成长心路历程。陆靖他曾经是ACM的冠军，现就职于阿里巴巴，在公司内部被称为“人肉逻辑机”。他为人十分低调，做事情深思熟虑，做人十分低调，做事不轻易动手。当有搞不定的代码时，他不是调试代码，而是逐行逐行的看代码，然后将某一行的代码错误指正出来。我估计他在看代码的时候，大脑就已经在运行每行代码了，大脑就是他的多核CPU。之前网上流传着他的一个传奇故事：某次代码遇到Bug，他的同事无法搞定，打电话向他求助，他在电话中直接指出某个CPP下第780行的代码，这里估计有传参问题，他的同事一查，果然是这里出现了问题，问他是否在电脑旁，他说他正在外面吃饭，这让他的同事很是惊讶。田春他号称中国Lisp第一人，人称伞哥，他的思维远比技术值得关注。曾就职于网易云，在业内声誉很高，他的成绩我就不过多的介绍了。有情趣的同学可以去看看伞哥的日记，地址：https://dirtysalt.github.io/html/binghe-blogs-notes.html他的性格古怪，他坐在丁磊办公室的旁边，经常跑到丁磊办公室，将丁磊正在充电的手机拔掉，给自己的手机充电。因为性格的古怪，后来被丁磊给开除掉了。离职时在博客上写：CEO 丁磊先生跟我性格不合，难以共事，但因为我工作成绩突出，无法直接开除，而我又深深留恋这家公司，不肯主动辞职，于是不得已将我劝退，给予 N+1 补偿，并言辞恳切地请我走人。所谓 “好聚好散”，我不得不接受。伞哥走的时候说，他不会怀恋网易的，只会怀恋战友，等他下次回网易的时候，就是收购网易的时候。Gray Wang根据 FTX 和 alameda 的股权价值，2022 年 4 月 ， 在福布斯新一期的富豪榜上， 年仅 28 岁的 Gary 以 59 亿美元的身价成为了 30 岁以下最富有的人。作为最神秘的亿万富翁高管，Gary 平时性格神秘，很少公开露面，网上照片屈指可数，连公司同事都经常很长一段时间见不到他，甚至领英的照片也只有一个背影。Gary 出生在中国，8岁后就随父母移民美国新泽西，他从小学习成绩出色，尤其在数学和编程方面展示出了很高的天赋和兴趣。2010 年他参加高中数学竞赛，刚好结识了 SBF 和 Trabucco （FTX的另外一名高管），三人共同参加麻省理工学院（MIT）举办的数学夏令营培训，三人皆顺利进入麻省理工学院的数学专业，Trabucco 和 Gary 攻读数学和计算机学士学位， SBF 则攻读物理学学士学位。SBF 和 Gary 在大学中逐渐建立信任，他们做了三年室友，学习之余，他们常一起打游戏，做谜题。在空闲时间里，还会共同参加 Epsilon Theta 的兄弟会。Gary 性格沉默内敛，很多人都觉得 Gary 难以沟通、不好相处，但 SBF 在多年的观察中，深谙 Gary 的性格和能力，尤其知道 Gary 在编程和数学方面的天赋性（Gary 曾获得过 MIT 编程竞赛的冠军）。“很多人觉得 Gary 无法相处，就和 Gary 保持距离，但我不会，我认为 Gary不想刻意远离这个世界，他非常聪明，而且他可以腾出时间去思考一些很困难的问题。”SBF 这样回忆道。他们多年的求学经历结下了深厚的同窗友谊，毕业后 SBF 去了华尔街的交易基金 Jane Street 做交易工作，Gary 去谷歌做机票价格的整合引擎 Google flights 的开发。2017 年 11 月， SBF 在旧金山创立了量化交易公司 Alameda research ，专注于加密货币市场的量化交易。 第一时间里，SBF 就想到在谷歌工作的 Gary，他立刻飞去波士顿，说服 Gary 加入 Alameda ：“你的天赋来做交易一定能行，加密货币市场充斥着无数的新机会，我们一起创造！” SBF 为 Gary 生动地描述着他的雄心壮志与抱负。Gary 认为在谷歌的工作确实感受不到挑战，于是接受了 SBF 邀请来到旧金山。他们经常并肩战斗，Gary 没日没夜的编写代码， SBF 经常睡在公司，两人每天只睡 4-5 个小时。一开始，SBF 用自有资金运作 Alameda，买卖主流币和山寨币，但业绩不佳，甚至每天的损失高达 50 万美元。但在 Gary 加入 Alameda 之后，团队在很长时间的摸索之后，确定交易策略为利用日本、美国和韩国之间的比特币差价套利。在最关键的一环中，Gary 为 Alameda 写了整个量化程序，用于快速在不同的交易市场中套利，这套程序只要捕捉到交易所之间的价差并迅速执行，就能完成一笔无风险套利操作。凭借着这个手段，SBF 更是从投资人那里拿到了 1.7 亿美元的融资，Alameda 一天的交易量一度超过数十亿美元，每天收入可以做到惊人的 2500 万美元。然而这并不是一切的开始，早在 2018 年， SBF 就请求 Gary 写过一个比特币交易所的程序，Gary 一个月就完成了一个交易所 CryptonBTC。虽然后来没有做成产品，但 SBF 深知如果让 Gary 来写合约交易所程序，他一个月内也可以完成，并且比市场上任何的交易所写出来的质量都要好。Gary 是一个不折不扣的程序天才。但当时合约交易所普遍存在的问题是，当客户的头寸经历损失，并且需要追加保证金，交易所会先请客户追加保证金，如果市场变化太快，交易所就会先承担资金的这部分损失。在后来的合约交易所的代码中，Gary 发明了一个新的清算引擎机制，可以按秒为单位来监控客户头寸，当客户保证金不够的情况下，立刻执行清算，从而保护了交易所的资金。虽然这个功能让交易者感到厌烦，但是解决了长期困扰众多交易所的关键问题。Gary 为 FTX 加入清算机制后，Binance、Kraken 和其他交易所也跟进开发了这个功能。此外，在一般的合约交易中，用户需要有对应资产的抵押进行借贷， 缺少资金的灵活性。针对这一点，Gary 为FTX开发了“交叉保证金”功能，让用户可以用多种数字资产共同为一笔交易做抵押。这一功能也在后来被其他合约交易所相继推出。实际上，作为 SBF 成就大业的“二把手”，Gary 不仅仅只是一个优秀的程序员，他还是一个顶级的产品经理！Gary 甚至可以单独通过市场需求开发出领先竞争对手的产品。 Nishad Singh 是 FTX 的工程主管，但是更多做工程师的协调，最核心的产品经常是 Gary 一人独自开发。与此同时，Gary 会负责 SBF 一些特殊程序的核心请求，并且只有 Gary 和 SBF 有权限使用和查看，FTX 的工程团队甚至都不知道 Gary 写的全部的程序。其中就包括 Alameda 可以从 FTX 转移资产的 “允许负余额”这一功能，这一程序让 Alameda 可以无限制地使用 FTX 客户的资金。在 SBF 和 Gary 的领导下，FTX 做到全球交易量排名第二，市值高达 320 亿美元。 却在 2022 年 11 月，FTX 一个星期轰然倒塌，欠下超过 100 万名的债权人的超百亿美元的债务，堪称虚拟货币世界的雷曼时刻。FTX 的核心团队全部住在一栋巴哈马的顶层公寓中， 事发时刻警察上门扣押了包括 Gary 以内所有 FTX 的核心人员。他在 2022 年 12 月承认了包括电汇欺诈、商品欺诈和证券欺诈等所有罪行，即将面临 50 年的监禁。目前，Gary 正在寻求在法庭上合作作证以减轻判罚。一代天才程序员 Gary Wang 也曾名噪一时，但这样锋利的一把嗜血宝刀却被用在了错误的地方，落得一个潦草收尾的结局。贾扬清Caffe框架的创始人，也是TensorFlow的作者之一，曾就职于Google Brain、Facebook等。,"左耳朵耗子， 目前在创业： MegaEase， 主要为企业提供技术解决方案以及高可用、高并发、高性能的分布式技术产品。耗子叔有一个访问量千万的技术博客: coolshell, 上面的文章可以说是篇篇精华，我墙裂推荐大家去看看，CSDN 经常由于访问量过大被推上首页。耗子叔尤其擅长底层技术架构，C/C++/Java和Unix/Linux/Windows。对高性能，高可用，分布式，高并发，大规模数据处理系统有很深入的研究。耗子叔是一个肯下笨功夫的人，他在2001年被外包到银行做开发，他在 2001 年那年被外包到了某银行做开发，就是用 C 语言在 AIX 系统里堆一些银行的交易逻辑，他坦言，这个过程并没有让他学到什么东西，也没有什么成长，每天想的就是要离开这个地方。所以，他在晚上 10 点以后开始看书学习到 11 点半，并使用工作环境动手实践书上的代码，一年后，精读了《TCP/IP 详解》《Windows 核心编程》《Java 编程思想》等书。然后，找到一份外企业的工作，月薪一下翻了三倍！！！看书一定是系统成长最快的方式，在这里顺便送大家一份我自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。我整理的这些书大家可以在这里下载，对于学习计算机的同学帮助非常大，且十分系统：https://zhuanlan.zhihu.com/p/369766867正是凭借着这股子对底层技术的持续不断的专研劲，才有了耗子叔现在的成就，并且影响了几十万做技术的人。在谈及程序员加班、996 这个话题的时候，耗子叔说到了他在外企的经历：在这家公司是我成长最快的时候，然而，并不是因为我的努力，而是因为有很多比我牛逼的人在 Code Review 上给我大量的帮助，在项目上帮助我，我的努力学习虽然也有作用，但更多的是高手对我的帮助。再回想一下我以前在职场上的很多关键点，不是因为我加班了，而是因为在某些关键问题上，我跳出来解决了其它人都解决不了的问题，我解决了一个网络通信莫名其妙的断掉的问题，我把性能优化了很多倍，我解决了一个不能重现的一个困扰团队 3 个星期的问题（其实就是大家没有认真读文档），我在入职一个公司的第一天里就为这个公司解决了一个历史遗留问题。在 Platform，我每周解决了 bug 数是全公司的其它人的总和还要多（从不加班），在路透，我带团队优化的系统的性能是全球所有研发中心最高的，在亚马逊，两周打通美国和德国的订单和商品列表系统。我也有失败的时候，而我失败的时候，总是因为我搞不定事，即便是加班拼命努力也无济于事！是的，我的职业生涯的成长，最根本的不是你有多努力，有多勤奋，而是你能搞定很多人搞不定的事！你不信你可以看看你们公司那些不用加班，就算什么也不干，公司也要花钱养的技术人员，他们的成功一定不是努力和加班加出来的，你会发现这些人拼的不是谁干的多，而是谁解决的问题更有难度。我加班 996 的时候，从来都不是我成长最快的时候，而我和一群牛人在解决难题的时才是我成长最快的时候。加班996绝对不是成长的关键点，成长最快的时候往往是解决了一个个的技术难题！！！耗子叔坦言自己绝不是高手，也不是牛人，离他们的距离还很大。只是从2003年开始在网上记录一些自己的技术知识和想法，今天还在努力学习希望能成长一个高手，因为，面对生活在今天这样技术日新月异的时代，我们每个人都是一个新人。他很幸运出生在这个时代——第三次工业革命的时代，也很幸运选对了专业，所以，可以算是一只“风口上的猪”了，就是运气好，赶上了这个好的时代，他要唯一要做的就是不要辜负这个时代，无它。希望我们也不要辜负这个时代！！程序员想要远离996，首先是提升算法和基本功，不然就只能重复性搬砖，在这里也送大家一本帮助我拿到BAT 等一线大厂 offer 的算法笔记，是一位阿里大神写的，对于算法薄弱或者需要提高的同学都十分受用，算法一定是计算机学习的重中之重：在这里也转一篇耗子叔的专访：：我的精神家园（图灵访谈）原文链接： https://www.ituring.com.cn/article/9174作者：盼盼姐来源：我的精神家园（图灵访谈）二、轶事和思考2.1、毅然辞掉银行工作我当时在银行做银行网络、银行的电子邮件系统和办公自动化系统。当时正处在银行信息化的阶段，加上当时互联网和IT业刚刚火起来，得到这份工作其实是很幸运的。银行正值扩张电子信息化业务的时候，其实应该有很多事可做，但是当时的主要工作都是由厂商来干。比如说IBM或Cisco拿下单子来，会把工作外包给系统集成商。作为一位技术人员，其实可以发挥的空间并不大，多数时间我只是出了问题打电话的角色。没有人会教你任何事，出了问题，就是打电话，然后按照他们的指导来完成工作。但这个还不是促使我离职的最主要原因，我离开是因为互联网和IT业的兴起让我有些心向往之，有想去看一看的冲动。我还记得当时的辞职书是这么写的：“本人对现有工作毫无兴趣，申请辞职”。处长说，“你可以这么写，但是要加上‘经调解无效’，另外，分给你的房就不能要了”。我说好啊。就这样就辞去了工作，去了上海。老实说，这个决定真不好做，因为几乎所有的朋友和亲人都很反对。2.2、选择上海闯荡的原因当时选择上海是有原因的，我觉得在当时的环境（2000年）下，上海的发展比较不错。没有选择深圳的原因是个人感觉那是因为政治原因凭空冒出来的一座城市，我不是很喜欢。北京我有很多同学，而我想去一个陌生的地方。但是后来发现上海也不是做技术的地方，过得有些压抑，初来到上海的时候经常会被人瞧不起，毕竟是刚刚来到大城市。我当时感觉银行束缚了我，想看看自己可以跑多远，能发挥出多大的价值。于是决定出来闯一闯，主要就是要去经历一些应该去经历的事情，不希望老了以后会后悔年轻的时候没有去。当时IT产业的发展是一个大趋势，我感觉我必须要去一座大城市，去经历一些东西。在小地方基本没有这些机会。要学会游泳就必须要跳到水里去呛两口水，所以我就义无反顾地出来了。2.3、工作挫折和自省我仍然记得自己拎着皮箱站在上海火车站的样子，举目无亲。原来在老家的时候觉得自己还挺厉害的，自以为不愁找不到好工作。不过事实却不是这样的。我还记得第一次去面试时，（面试官）问了很多和C相关的问题，问了我半个小时，我一个问题都答不上来。我一直低着头，好像被审问的犯罪分子一样。我从大学毕业出来就没经历过什么面试，再加上自己内向的性格，所以，整个过程我都在低着头，不敢看别人一眼。最后，面试官问了我一个问题是“有不懂的问题你会怎么办”，这样的问题我都不敢回答，其实这道题的答案不过就是“问别人”或是“自己看书”或是“上网查资料”什么的。很显然，这场面试我肯定是被灭掉了。但这还没完，最后面试官对我说：“你出来干什么，像你这种性格根本不适合到大城市来”。我当时被严重地打击了，感觉到自己确实有一些东西很差。第一个是性格差，不知道怎么与人交往；第二个是技术差，很多问题不知道；第三个就是视野狭窄，没见过世面。后面的几家公司的面试都大同小异。一个人在异地他乡，经历了这些事情，心里会非常地恐慌，“我这条路是不是走错了？”，我经常这样问自己。面对这样的情况，我被逼迫着一定要改变自己。因为，离开银行时，我的家人、同学和朋友都很反对我出来，如果这样灰溜溜地回去，我面对不了他们。而前面的人还看不起我。我当时的处境真的很难堪，就像爬在悬崖中间，上不去也下不来。所以，当时只有一个想法，就是要证明自己不是那么差的人。人被逼到那个份上，活得就比较简单，哪有什么职业发展规划，只想拼命地多学技术，提高自己的能力。这个经历有点像是一剂兴奋剂，同时也相当阵痛。但是回头想想，第一个面试官应该是我最感谢的人。2.4、疯狂成长在同学的帮助下我找到了在上海的第一份工作。南天公司，这是一家给银行做系统集成软件的公司，大学毕业时本来也可以进去，现在绕了一圈而且还是靠同学帮助进去的，所以那时的心态还很不平稳；另一方面因为以前是做银行的，是甲方，现在成了乙方了，两边的人都用异样的眼光看我，心态非常不好。不过，这是个技术不错的企业，国内早期很多搞Unix/C的高手都是从这个公司培养出来的。我当时的技术还是不行，比如说到了用户站点以后，不知道怎么做，我曾经误操作把用户的数据删掉了。经常犯低级错误，不但没做好自己的工作，反而还给别人添了麻烦。这些经历都让我有一种“技术焦虑感”，或者叫“技术忧郁症”。我觉得自己这也不行，那也不行。这也是我今天仍然在拼命学习的原因。这就好像我们经常在参加工作多年后还会梦见自己的英语四级没过，或者是期末考试没过一样。我经常会梦见的是项目又做砸了，又把用户的系统搞乱了，一大堆人要审我、要训斥我。因为技术差，沟通差，不会面试，所以，我决定经常出去面试，基本上每周都要去，不管懂不懂，也不管是什么公司，也不管别人鄙不鄙视我，反正一有机会就去面试，多见见人这样可以让我的性格有所改善，同时，也可以知道社会上需要一些什么样的技能，把别人面我回答不上来的东西都记下来，然后回头找答案。那个时候我会经常去上海书城看书，看很多很多的书。我学的东西很杂，什么做网页，Windows，Unix，Java，.NET，flash，连3DMax/Photoshop我也学，还去考CCNA的认证等等。这样散乱地学习两年后，我才慢慢确定了要走C/C++/Unix/Windows系统底层的路子。而这样扑天盖地学习的结果有一个好处就是，我成长的速度相当之快。我自己摸索到了适合我的学习方法（从基础和原理上学习），从而不再害怕各种新的技术。那时，所有人都在休黄金周出去玩的时候，我还呆在办公室或住处看书学习。等到一年半之后，用句赵本山的台词说，我在面试中学会抢答了。面试官的问题没问完，我就能说出答案了。其实，基本上是面一个公司过一个（当然都是一些小公司），此时，我就开始挑公司了。感到技术能力不行就去学技术，交往能力不行我就去面试，这两个问题都可以通过大量地实践和努力来弥补，但是眼界这个东西没有办法通过努力来弥补。所以，当时非常想去一些更大的公司看看，如果能去外企更好。2.5、变得不一样我还记得，有一天，有一个和网络相关的技术问题，同事们搞了三四个通宵，也没弄明白，后来想起我好像在看这方面的书，他们就让我去看看、试试，结果我只用了20分钟就搞定了。基础真的很重要，这受益于我看了《TCP/IP详解》这套书。后来，我去了一家做电信软件的公司，他们让我做PowerBuilder，尽管我当时想做的是C++，但是因为当时各种原因很需要这份工作，就去了。进了那里的第一天发现公司里有一个论坛，上面都是一些技术上悬而未决的问题，都是关于Windows/C++的。我一看，都是些很简单的问题，一下午的时间就被我全部解决掉了，我的基础知识发挥了作用。于是，当天下午我一下子就被调到了核心组。不过，我只在那里呆了两个多月，因为那时我已经不愁找工作了，这期间有两家北京的公司录用了我，于是，02年我就来到了北京，去到一家做分布式计算平台软件的公司。在上海的这两年的时间，从什么都不是，到得到工作上的全面肯定。那段时间感觉自己牛得不得了，有些狂妄和骄傲了，经常上网和不认识的人争论一些很傻的问题，后来发展到对当时的领导以及银行客户的领导不敬，总觉得这些人太二。现在回头看过去，我觉得那是我人生特定时期的记号，人生的痕迹。2.6、建立http://coolshell.cn的原因我2002年在CSDN开了一个blog，当时叫专家专栏。开个专栏很简单，只要发6个帖子。我也不是什么专家，只是喜欢看书、喜欢学习而已，也喜欢做一些学习笔记。那时候没有笔记本也没有台式机，市面上好像也没有U盘和移动硬盘。正好有CSDN这么一个地方，就去CSDN的站点上把自己的一些学习笔记放在了上面。后来03年的时候技术专栏转到了博客，因为CSDN对其博客经营得不好，我09年就离开了csdn，创建了酷壳。花了4500块钱，租了一个server。我离开那里主要有两个原因，一个是因为当时CSDN博客有一些性能上的问题，.NET架构嘛，大家都懂的。另外一个原因就是当时出现了很多博客营销的站点，有点像今天的36氪。好像那时候出现最早的叫煎蛋，那上面会有一些报纸上不会出现的国外的趣闻，是以博客的方式形成的媒体。这和常规的以日记形式出现的博客大不一样。煎蛋、有意思吧等这些博客让我看到了博客还能这样写，我觉得很好玩儿。而我当时也经常会去国外社区看一些文章，也能看到一些有意思的东西（因为我当时有了学习瓶颈，国内的网站已经满足不了我了）。心想，既然这些东西这么有意思，我为什么不自己开一个博客呢？我老婆是学新闻编辑的，她鄙视我说，你的博客虽然有很多人读，但是只能算是个书呆子的博客，全是一些书呆子式的文章。我有些不服，我觉得技术人员不全是书呆子，我们这个圈子里也有很多有趣的东西，只不过是你不知道而已。于是我想弄一个有意思的、有娱乐性质的东西，里面都是技术圈里面有意思的事儿，但是很多技术圈以外的人也能看懂。一开始酷壳和CSDN博客的风格完全迥然，如果有技术性的文章我还会在CSDN上贴，但是后来我就完全抛弃了原来CSDN上的博客。酷壳的初衷是希望很多人都可以来上面发表一些东西，但是可能是我写得太多了，别人就被压制住了。现在博客更新频率是一周一篇，一开始的时候一周三篇。磨刀不误砍柴工，总是有时间来做这些事的。我经常看书，需要把学到的东西整理成学习笔记。自从在CSDN上写博客的时候，就有这样的习惯了，而且又有“技术焦虑症”，害怕跟不上，所以维护博客的事对我来说是很自然的。现在我已经不用自己再租服务器了，由于酷壳的访问量比较有保证，我提供了广告位，就免费得到服务器了。2.7、对于新技术的态度遇到新技术我会去了解，但不会把很大的精力放在这。这些技术尚不成熟，我只需要跟得住就可以了。我的团队自己想学什么我都不干涉，但是用到项目里的技术，必须是很成熟的，（技术应用）十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，Java也有将近20年了……，所以，技术并不多啊。还有很多技术比如Ruby，Lisp这样的，它们没有进入主流的原因主要是缺少企业级的应用背景。如果要捋一个脉络下来，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。当时所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix，Windows下的开发也是C。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java出现之后，IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面这条线上的技术主干。另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。这条脉络和上述的那条C/C++/Java的我都没有放，作为一个有技术忧虑症的人，这两条软件开发的主线一定不能放弃。无论是应用还是学术，我都会看，知识不愁多。何必搞应用的和搞学术的分开阵营，互相看不起呢？都是知识，学就好了。技术的发展要根植于历史，而不是未来。不要和我描述这个技术的未来会多么美好，用这个技术可以实现什么花哨的东西。很多常青的技术都是承前的。所以说“某某（技术）要火”这样的话是没有意义的，等它火了、应用多了咱们再说嘛。有些人说不学C/C++也是没有问题的，我对此的回应是：如果连主干都可以不学的话，还有什么其他的好学呢？极端一点，我要这么说：这些是计算机发展的根、脉络、祖师爷，这样的东西怎么可以不学呢？大部分学校虽然都会教授C，但是教得都不好。学校喜欢教微软的东西，老师好教学生好学。我不是说Windows不好，但那不是计算机文化的主干，那只是微软的主干、PC的主干。整个计算机文化的主干肯定是源起于Unix/C这条线上（注意，我说的是文化不是技术）。我也写过很多与Unix文化相关的文章，大家可以看看我写的“Unix传奇”。2.8、对于学校计算机科学教育的看法学校教的大部分都是知识密集型的技术，但是社会上的企业大部分都是劳动密集型的。什么是劳动密集型的企业呢？麦当劳炸薯条就是劳动密集型的工作，用不到学校教授的那些知识。如果有一天你不炸薯条了，而要去做更大更专业的东西，学校里的知识就会派上用场。有人说一个语言、一个技术，能解决问题能用就行了，我不这样认为。我觉得你应该至少要知道这些演变和进化的过程。而如果你要解决一些业务和技术难题，就需要抓住某种技术很深入地学习，当成艺术一样来学习。我在“软件开发‘三重门’”里说过，第一重门是业务功能，在这重门里，的确是会编程就可以了；第二重门是业务性能，在这一重门里，技术的基础就很管用了，比如：操作系统的文件管理，进程调度，内存管理，网络的七层模型，TCP/UDP的协议，语言用法、编译和类库的实现，数据结构，算法等等就非常关键了；第三重门是业务智能，在这一重门里，你会发现很多东西都很学院派了，比如，搜索算法，推荐算法，预测，统计，机器学习，图像识别，分布式架构和算法等等，你需要读很多计算机学院派的论文。总之，这主要看你职业生涯的背景了，如果你整天被当作劳动力来使用，你用到的技术就比较浅，比较实用，但是如果你做一些知识密集型的工作，你就需要用心来搞搞研究，就会发现你需要理论上的知识。比如说，我之前做过的跨国库存调配，需要知道最短路径的算法，而我现在在亚马逊做的库存预测系统，数据挖掘的那些东西都需要很强的数学建模、算法、数据挖掘的功底。我觉得真正的高手都来自知识密集型的学院派。他们更强的是，可以把那些理论的基础知识应用到现在的业务上来。但很可惜，我们国内今天的教育并没有很好地把那些学院派的理论知识和现实的业务问题很好地结合起来。比如说一些哈希表或二叉树的数据结构，如果我们的学校在讲述这些知识的时候能够结合实际的业务问题，效果会非常不错，比如：设计一个IP地址和地理位置的查询系统，设计一个分布式的NoSQL的数据库，或是设计一个地理位置的检索应用等等。在学习操作系统的时候，如果老师可以带学生做一个手机或嵌入式操作系统，或是研究一下Unix System V或是Linux的源码的话，会更有意思。在学习网络知识的时候，能带学生重点学一下以太网和TCP/IP的特性，并调优，或是能做一个网络上的Pub/Sub消息系统或是做一个像Nginx一样的web server，那会更好。如果在学图形学的过程中能带领学生实践开发一个作图工具或是一个游戏引擎，那会更有意思。总之，我们的教育和现实脱节太严重了，教的东西无论是在技术还是在实践上都严重落后和脱节，没有通过实际的业务或技术问题来教学生那些理论知识，这是一个失败。2.9、如何在压力下，享受技术带来的快乐中国人中庸的思想，入世和出世，每天的工作就是入世。举个例子，在上海的时候，给交通银行做项目的时候，每周休息一天，早九点到晚十点，每天工作12个小时，这样的工作持续了一整年，没有节假日，项目上的技术也没什么意思。当时我晚上十点回到住处，还想学一些C++/Java和Unix/Windows的技术，于是就看书到晚上11:30，每天如此，一年下来学到很多东西，时间没有荒废，心里就很开心。我觉得当时是快乐的，因为有成长的感觉是快乐的。现在的我，工作、写博客、养孩子，事情其实更多。我早上7:30起床，会浏览一下国外的新闻，hacker news，tech church，reddit，highavailability之类的站点，9点上班。晚上6、7点钟下班，开始带孩子。十点钟孩子睡了觉，我会开始重新细读一下这一天都发生了些什么事情。这个时间也有可能会用来看书。学习的过程我是不喜欢被打断的，所以从十点到十二点，家人都睡了，这正是我连续学习的好时间。可能从晚上11:30开始，我会做点笔记或者写博客。我现在对酷壳文章的质量要求比较高一些，所以大概积累一个星期的时间才可以生成一篇文章。每天我大概都在一两点钟才会睡觉。没办法，我有技术焦虑症。但是觉得这样的生活很充实，也很踏实。另外，任何一门技术玩深了，都是很有意思的。有些人形成了一个价值取向，“我只做什么，绝不做什么”。前段时间有一个刚来亚马逊的工程师，他原来做的是数据挖掘推荐系统，后来公司重组要他做前端，他不肯。我觉得，前端后端都是编程，Javascript是编程，C++也是编程。编程不在于你用什么语言去coding，而是你组织程序、设计软件的能力，只要你上升到脑力劳动上来，用什么都一样，技术无贵贱就是这个意思。回到问题，怎么才能享受到快乐呢？第一，入世和出世要分开，不要让世俗的东西打扰到你的内心世界，你的情绪不应该为别人所控，也不应该被世俗所污染，活得真实，你才会快乐。第二点就是要有热情，有了热情，你的心情就会很好，加班都可以是快乐的，想一想我们整个通宵用来打游戏的时光，虽然很累，但是你也很开心，这都是因为有了热情的缘故。2.10、做自己是最难的我承认我活在我的精神家园里面。我推荐大家看一下王小波的《我的精神家园》，这篇文章对我的影响非常大。看了这篇文章，你就会明白我为什么要躺在自己的池子里，如果不想被这个社会所污染，就必须要躺在自己的池子里。做大众是很容易的，做自己是最难的。当你老了的时候，回想过去，如果你是为自己而活的，你总会觉得很踏实。可能有人会觉得我偏激，没关系，为什么要所有人看法都一致呢？世界因为不同而美丽，多元化的价值观并不冲突。最后送大家一份自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。我整理的这些书大家可以在这里获取，对于学习计算机的同学帮助非常大，且十分系统：书单：希望大家都能在编码的路上下笨功夫！！！远离996！，记得帮我 @编程指北 点个赞哟~最后给大家分享一下计算机学习路线大全，很多同学照着这个路线学习进了拿到大厂offer计算机系统学习网站csguide.cn/如何自学篇计算机专业如何系统自学？如何高效阅读计算机类书籍？如何快速学习掌握一门编程语言？计算机基础篇操作系统超详细系统学习路线操作系统系统书籍分类推荐计算机网络超详细系统学习路线如何系统学习网络编程C++方向学习路线C++ 语言超详细系统学习路线Linux C++ 后台开发系统学习路线Java方法学习路线Java 后台超详细系统学习路线C语言方向学习路线C 语言超详细系统学习路线后台中间件(MySQL、Redis、MQ等)Redis 超详细系统学习路线Python方向学习路线Python超详细一条龙版学习路线Python Web 开发系统学习路线",说一个大家可能不太听过的——梁肇新。这是百度百科上的照片，无论从发量还是气质上看都像是一个乡镇企业家，而不是一个程序员，但是这并不影响他作为中国顶级程序员的地位。在2000年至2005年的电脑城，新配的电脑不一定会装office，但是一定会装豪杰超级解霸，而它的作者就是梁肇新。超级解霸不管多烂多花的碟，它都能够读出内容，开玩笑说丢一块石头进去它都能播出来电影，玩笑归玩笑，软件强悍的性能可见一斑。那个时代的网络营销还不发达，产品都是靠用户口口相传积累用户，一个共享软件做成装机必备可见超级解霸的成功。可惜，超级解霸没有赶上互联网的浪潮，最终被各种影音软件拍在了沙滩上。吃到美味的鸡蛋不会去问哪只鸡下的，普通用户也不会去关心超级解霸的作者是谁，真正让大家开始知道他的还是那本铜版纸的《编程高手箴言》。那本书类比练武提到程序员的六个阶段：熟练某种语言（套路）、精通平台接口（对练）、了解底层（手中有剑，心中无剑）、深入底层（手中有剑，心中有剑）、全局设计系统（手中无剑，心中有剑）、任何问题都变成思路问题（无招胜有招）。这六个阶段应该是他的书里面传播最广泛的内容，其他的比较高深，不好传播。书的内容差不多总结了那一代不依赖互联网的程序员深研的历程，现在还值得我们去学习追随。,"不知道这些算不算呢？《商业领域有着巨大影响力的程序员》能做出好产品又能引领企业走向巅峰的人，很厉害01.WPS之父-求伯君求伯君，浙江绍兴人。1988年，一个人，一年时间，写出了和微软抗争了十多年的国产办公软件“WPS1.0”。年仅25岁，他就成为了程序员出身最富有的创业者，他的名字早已写进中国软件的历史！是那个时代最让程序员们振奋的“英雄”，无可争议的成为“中国第一程序员”！个人历程：1964年，出生于浙江绍兴一个贫苦农民家庭；1984年，国防科大信息系统专业，分配到河北某仪器厂；1986年，仪器厂辞职，加入北京四通公司；1988年，加入香港金山公司；1994年，在珠海创立珠海金山电脑公司；2011年，从金山退休，副董事长雷军接任。个人成就：WPS之父：以一己之力写出WPS1.0，填补了我国中文字处理软件的空白；创立了中国第一个电脑游戏《中关村启示录》；金山之主：带领金山上市，成为当时最富有的程序员；IT导师：金山中，走出了雷军、王峰、冯鑫、尚进等，被称之为“旧金山”的IT创业者……民族软件导师：中央电视台《东方时空》在比尔·盖茨来中国的当天，请求伯君谈民族软件以及WPS97如何抗击Word。评价：雷军：写求伯君的文章虽然很多，但令人满意的还没有。网友：走进当年的IT圈，到处都是求伯君2.0版。02.小米-雷军雷军，湖北仙桃人。写过加密软件、杀毒软件、财务软件、CAD软件、中文系统，焊过电路板，干过黑客，大学四年课程两年修完，就靠开发软件成了百万富翁，业界公认的劳模。做发布小米1.0需要拍视频，陈年、李学凌在内的一帮兄弟都为他出镜，砸掉苹果用小米。个人历程：1969年，出生于湖北仙桃；1991年，毕业于武汉大学计算机系；1992年，进入金山软件做程序员；2010年，创办小米科技；2011年，后接任求伯君任金山CEO。个人成就：与同事合著《深入DOS编程》、《深入Windows编程》等书；个人信仰：20年前我是一名软件工程师，到今天依然是！外界评价：求伯君：其实雷军是大家口中程序员的一个最佳典范，永远的精力充沛，时刻都想着去 build，并且能够及时的修复过程中的 bug，有着这么严谨的程序员思维，这也是他现在这么成功的原因。猎豹CEO傅盛：雷军无论多成功，永远一副低姿态。第一次见他，他手里拿个小本，问我当时做360安全软件的成功经验，我说什么，他就用笔都记下来。03.百度-李彦宏李彦宏，山西阳泉人。学霸级的人物，持有“超链分析”技术专利，甚至奠定了现代搜索引擎的发展方向。年少钟爱戏曲，一度被剧团相中，但在中学时还是回归课堂，以阳泉市第一名考上北大！个人历程：1968年，出生于山西阳泉，他在家中是五个孩子中的唯一男孩，少年时钟爱戏曲，曾被剧团录取；1991年，毕业于北大信息管理系，随后赴美完成计算机硕士学位；1994年，进入华尔街道·琼斯公司，担任金融信息系统设计工作；1997年，进入硅谷著名搜索引擎公司Infoseek(搜信)公司；2001年，回国创立百度；2011年，成为大陆地区的首富。个人成就：曾经为道.琼斯公司设计的实时金融系统，仍被广泛地应用于华尔街各大公司的网站；最先创建了ESP技术，并将它成功地应用于Infoseek/http://GO.COM的搜索引擎中；拥有“超链分析”技术专利，是奠定整个现代搜索引擎发展趋势和方向的基础发明之一。（李彦宏称之为搜索引擎第二定律，利用检索关键词在一篇文章中出现的频率多少进行网页排序的技术，被称为第一定律）个人信仰：技术本身并不是唯一的决定性因素，商战策略才是真正决胜千里的因素。外界评价：合伙人徐勇意：李彦宏不仅有技术背景，还对商战有敏锐的直觉和出色的判断。网友：做为一个技术人，他曾经非常优秀；做为一个商人，他有很高的“觉悟”。做出最好产品的人很厉害04.微信-张小龙一个孤独的人，生命中只有音乐、网球和代码。每当有争论，都是张小龙以长时间的沉默来结束。个人历程：1969年，出生于湖南省邵阳市；1994年，华中科大电信系硕士毕业，随后在广州一家互联网公司工作，业余时间开发出Foxmail；2000年，张小龙以1200万元的价格把Foxmail卖给博大公司，并任公司副总裁；2005年，腾讯收购Foxmail软件，张小龙“陪嫁”到腾讯公司。个人成就：利用业余时间，独立开发出Foxmail，以1200万元被博大收购；为对抗雷军“米聊”，带领13人仅用一个月上线微信，不到两年爆发2亿用户。如今微信估值8000亿，是支付宝的两倍。个人信仰：我说的是错的！外界评价：柳传志：做微信的那个小孩张小龙，确实做得漂亮，我没见过，据说也是比较宅的人。好友和菜头：张小龙是一个生性孤独的人，烟瘾很大，“是广州深夜里最大的Kent消费者”。05.腾讯-马化腾不管他愿不愿意，几乎所有互联网公司，都曾向他宣战！做过5年程序员，但真正赚到人生第一桶金却是从炒股开始，最精彩的一单是将10万元炒到70万元。个人历程：1971年，出生于广东汕头一个小村子；1993年，毕业于深圳大学，主修计算机及应用；随后进入深圳润迅通讯公司，专注寻呼机软件开发；1998年，与张志东一起创立腾讯；2004年，腾讯在香港交易所主板挂牌上市；2018年，47岁的马化腾成为全球华人首富。个人成就：与朋友合作开发风靡一时的股霸卡；开发中文版的ICQ，即后来的QQ。个人信仰：用最笨的方式去领悟编程，用抄代码来培养感觉。外界评价：马云：“QQ的攻击永远是悄悄的！”王石：马化腾能把握好底线，一个工程师控，凌晨两点发微信他还能马上就回。敢于折腾的技术人很厉害06.巨人-史玉柱史玉柱，安徽蚌埠人。人们熟悉史玉柱，有些是因为脑白金，有些是因为巨人网络。他不仅是个成功的营销家，而且曾经是名出色的程序员。开发汉卡赚到了人生第一桶金，又因巨人大厦转瞬欠了几个亿。人生大起大落后，还清所有债务，重新回到IT行业，现在已是网络游戏界里的老大之一。个人历程：1962年，出生于安徽蚌埠；1984年，浙江大学数学系毕业，分配至安徽省统计局工作；1989年，深圳大学数学系研究生毕业后，下海创业；1991年，成立巨人公司，推出M－6403；1994年，投资保健品，第一个产品是""脑黄金""，后为投资巨人大厦，几乎破产，欠债2.5亿RMB；2000年，再度创业，开展“脑白金”业务；2007年，旗下的巨人网络于纽交所上市，成为在美发行规模最大的中国民营企业；2016年1月，带领全公司展开手游研发。个人成就：M-6401桌面排版印刷系统；创业之初，一己之力编写文字处理软件，关键模块用汇编语言完成，软件代码数达到50万行。外界评价：网友：“负债过亿，东山再起的故事，注定也是中国商人史上最为“成功”的失败样板。”新浪网：”绝对是当今中国商界最具争议和最具传奇色彩的人物。坚定理想主义的人很厉害07.搜狗-王小川王小川，四川成都人。一个成功地由顶尖技术人才转型为全面的管理者，带领搜狗，快速成长为中国用户量第三的互联网公司。个人历程：1978年，出生于四川成都；2003年，清华大学计算机研究生毕业；1999年，兼职加入初创的ChinaRen公司（中国最大的校友录网站）2000年，搜狐收购ChinaRen，王小川进入搜狐公司；2003年，正式加入搜狐，任高级技术经理；2005年，晋升为搜狐公司副总裁；2010年，搜狗CEO。个人成就：使用分词技术，使 ChinaRen 成为当时第一家能通过“机器自动生成相关新闻内容”的网站。个人信仰：像老板一样思考，像员工一样工作外界评价：张朝阳：小川在少年时期就是计算机的天才。网友：也只有王小川这种具有「钝感力」的创业者才能够坚持下来，花好几年，一级一级组建自己的产品架构。08.今日头条-张一鸣张一鸣，福建龙岩人。从着装到谈吐都特别“不文艺范儿”，用他的口头禅来说：“实用，是第一重要的。”想挖人时，会拿出计算器，告诉对方如果加入今日头条收入增多少，有多少股份“如果你跟了XX，看上去是不错，但你的股价会翻十倍吗？”个人历程：1983年，出生于福建龙岩；2005年，毕业于南开大学软件工程专业；2006年，进入酷讯，一年后带着团队进入微软，没多久又到了饭否；2012年，今日头条上线，上线仅90天，积累用户1000万；2012年，创办字节跳动；2016年，推出抖音；2018年，卸任今日头条CEO。个人成就：创造性地将机器算法和大数据技术应用于媒体传播2018年，字节跳动估值750亿美元，成为全世界估值最高的创业公司， 国内仅次于阿里巴巴和腾讯的互联网第三强。个人信仰：对于编程，更注重的是实用性，数学才是对事物之间最基础关系的描绘。外界评价：网友：“你似乎很难从他的身上，找到其他创业者对金钱的那种渴求，他更像是一个自由纯粹的冒险家。”09.网易-丁磊丁磊，浙江宁波人。一个坐飞机头等舱，不穿机舱的拖鞋而是自带；江湖里出了名的酒量惊人，环保乐观，跑着步上班，既朴实无华又富于传奇。个人历程：1971年，出生于浙江宁波一个高级知识分子家庭；1993年，毕业于电子科技大学，毕业后回老家电信局做公务员；1995年，跳槽在skybase做软件开发；1997年，创办网易；2000年，网易在纳斯达克上市；2003年，丁磊成为中国首富；2015年，投资拍摄电影《少年班》个人成就：设计网易的整体架构；和陈磊华一起研发免费邮箱系统，成为国内最早提供邮箱服务的公司个人信念：勇于“归零”外界评价：网友：“丁磊是一个有着浓重复旦情结的人，注定又是一个理想主义者。”不为外界所动的人很厉害10.奇虎360-周鸿祎周鸿祎，湖北黄冈人。曾对着一张印有键盘的纸张，敲敲打打，因为没见过真正的计算机。他叛逆、口不择言，不忌惮与人剑拔弩张，被封为“流氓软件”之父。他曾说：“我觉得除了百度和腾讯，以及他们的打手，都是我们的朋友。”个人历程：1970年，出生于湖北；1995年，西交大管理学院硕士毕业；1995年，就职方正，从普通程序员一路提任至总经理；1998年，创建3721公司，6年后被雅虎以1.2亿美金收购；2004年，任雅虎中国总裁；2006年，创建360公司；2016年，带领360从纽交所退市，完成私有化；个人成就：推出了3721“网络实名”，开创中文上网服务之先河；创办360，成为免费安全之父。著书：《智能主义：未来商业与社会的新生态》《周鸿祎自述:我的互联网方法论》《颠覆者：周鸿祎自传》个人宣言：要成为一个合格的程序员，怎么也要写个10万到15万行以上的代码。如果连这个量级的代码都没有达到，那说明你还不会写程序。外界评价：网友：“也许周鸿祎是中国互联网界最像乔布斯的人。一方面有着特立独行的叛逆思维，另一方面也有对产品的极致完美追求，还有他不满意时就口不择言的直率。”11.点击科技-王志东不了解王志东的人觉得他放弃了软件，而后又被网络所抛弃。但了解王志东的都知道他最钟爱的还是软件，而且现在他同时拥有了网络。个人经历：1967年，出生于广东东莞；1988年，毕业于北大无线电电子学系；1989年，特邀进入北大计算机技术研究所；1993年，任四通利方总经理；1998年，创建新浪网；2000年，新浪纳斯达克上市；2001年，王志东被迫离开新浪网，同年创立点击科技。个人成就：用时7个月，研发出“中文多窗口图形支撑环境”；用时一年，独立完成国内第一个实用化Windows3.0中文环境——BDWin3.0，一度引起各界震惊。外界评价：网友：“现在的新浪和王志东显然是没什么联系了，但是唯一可以确定的是他最爱的还是开发、是软件。”张朝阳：“他不够敏感，对于到眼前的危险、对腹背受敌的处境不够敏感。”12.创新工场-李开复从唯一历任苹果、微软、谷歌、高管的华人职业经理人、IT界黄埔军校的校长、大学生导师、创业者之父、抗癌战士到人工智能布道者，李开复的身份一直在变化。但始终未变的，是他在语音识别、人工智能、三维图形及网络多媒体等领域，享有的声誉。个人经历：1961年，出生于台湾，现移居北京；1972年，赴美国读中学；1983年，哥伦比亚大学计算机科学系毕业；1988年，获得卡内基梅隆大学计算机系博士；1990年，任苹果公司全球副总裁；1998年，加入微软公司，创立微软亚洲研究院；2005年，加入Google，任全球副总裁兼中国区总裁；2009年，创办创新工场，曾被《麻省理工学院技术评论》评为“最火的计算机实验室”；2013年，患淋巴癌。个人成就：运用统计学原理开发出世界上第一个“非特定人连续语音识别系统”，把语音识别率从40%提升到96%，当年被《商业周刊》授予“最重要科学创新奖”；著作：《做最好的自己》《微博：改变一切》《与未来同行：李开复文集》《一网情深与学生的网上对话》《世界因你不同：李开复自传》《向死而生：我修的死亡学分》外界评价：创新工场创始人之一王肇辉：“李开复既能够在四合院和人喝茶吃花生米,也能在五星级酒店和外交官喝鸡尾酒。”《技术领域有着巨大影响力的程序员》在技术领域有的人，凭一己之力开发出了几千人使用的开源软件有的创造了网络的神话，至今为传诵有的授业解惑，或教室、或出书、或博客他们影响了一批又一批的后来者他们的名字经常被提起这是一群对技术有着最纯真热爱的人非科班出身的大牛：01、阿里-蔡景现蔡景现，一个更广为人知的名字是--“多隆”。他是阿里巴巴初创团队三名工程师之一，在一个月之内，从零起步搭建起了“淘宝”。非科班出身的他被称“码神”，又称“阿里扫地僧“。个人历程：1976年，出生于浙江苍南一个农民家庭；2000年，从杭州大学生物系硕士毕业，加入阿里；2014年，成为阿里合伙人；2017年，41的他以26亿身家登上胡润财富榜。技术成就：对于技术，既懂C/C++，又懂Java内核；既可以深入技术底层，又能切入到高层业务领域，从前端到后端，独自维护淘宝搜索引擎长达5年。个人魅力：突然得知成为阿里合伙人时，蔡景现当场蹦出一句“让我当合伙人？可我只会写代码啊！”只会写代码的纯粹，让他全票通过合伙人票选！评价：阿里CTO张建锋：“多隆（蔡景现）做事一个人能顶一个团队。02、MegaEase-陈皓江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈。个人历程：大学毕业进入云南工行，不满体制内的缓慢困滞，两年以后去了上海。由于技术不够，面试时遭遇羞辱，于是疯狂学习，专注底层，C++，JAVA，UNIX/LINUX 等，后成为大牛！个人成就：曾于Amazon中国任研发经理；曾在阿里巴巴北京研发中心任资深专家一职；曾在阿里巴巴核心系统专家组，从事阿里云ECS相关的虚拟化平台的开发工作；现为MegaEase创始人，为企业的高并发高可用架构，提供一整套的技术解决方案和产品。个人魅力：“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”网友评价：“他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。”03、阿里-阮一峰上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！个人历程：2008年取得上海财经大学经济学博士；毕业后当了老师，任教于上海金融学院；2014入职阿里巴巴。个人成就：译著：《黑客与画家：硅谷创业之你Paul Graham文集》《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！评价：“他像是一个我从未谋面的引路人，过褒或过贬，都是不客观的！”""喜欢阮一峰并不是因为他有多厉害，而是因为他不停的学习，乐于跟我们分享。他写的博客总是通俗易懂，对于我们这些小白来说是很珍贵的财富""学术界大牛04、清华-姚期智姚期智，世界著名计算机学家，应该说是一位非常重量级的“程序员”。他是唯一 一位获图灵奖的华人。在伪随机数生成、密码学和通信复杂度多个领域，都做出了巨大的贡献。与第一位获得诺贝尔奖的华人一样，姚期智在此之前是美籍华人，2017年才恢复了中国国籍。个人历程：1946年出生于上海，幼年跟随父母到台湾，以麻省物理学博士身份转攻计算机。2000年，获得计算机界最高荣誉“图灵奖”；2004年，归国任教于清华大学，创建姚班、智班。如今71岁高龄的姚期智，致力将半生心血付于年青的学生们身上。技术成就：创建了理论计算机科学的重要次领域：通讯复杂性和伪随机数生成计算理论；奠定了现代密码学基础，在基于复杂性的密码学和安全形式化方法方面有根本性贡献；解决了线路复杂性、计算几何、数据结构及量子计算等领域的开放性问题并建立全新典范。评价：“姚先生是这个时代的科学诗人，他身体力行教会我如何欣赏科学的美，如何创造美好的科学，如何许诺用科学，带领人类走进一个更美好的时代。”05、Vue.js-尤雨溪江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。个人历程：出生于江苏无锡，在上海读完高中后，2005年到美国主修艺术史，硕士主修美术设计与技术，开始慢慢接触编程。毕业后曾就职于 Google Creative Labs 和 Meteor Development Group。由于工作中大量接触开源的 JavaScript 项目，最后自己也走上了开源之路，现在全职开发和维护 Vue.js。技术成就：一己之力打造Vue.js框架；构建了Web界面的Javascript库。网友评价：“尤雨溪做出了近几年最火的前端框架Vue.js，是开源世界华人的骄傲。”创业者中的技术牛人06、第四范式-戴文渊信息学世界冠军，让“人工智能”不再冷门的时代领袖 ，他的身上光环无数。曾经获得上海交通大学校长奖、吴文俊人工智能科学技术创新奖一等奖、《财富》中国 40 位 40 岁以下商业精英、MIT 35 位 35 岁以下科技创新杰出精英。个人历程：江苏苏州人，1983年出生，1991年，在苏州古城区读小学二年级的戴文渊，考了三次数学全班第一后，加入计算机兴趣小组。10岁开始写logo语言，学习C语言。在上海交通大学就读期间，带领三人团队夺得了ACM世界冠军和三个亚洲冠军，并担任ACM竞赛教练指导学生多次获得亚洲冠军。交大没有人工智能领域的老师，戴文渊被送到了港科大，师从杨强教授个人成就：2007年发表的论文Boosting for Transfer Learning在迁移学习领域论文引用数至今排名世界第三；全世界首个提出“非监督迁移学习”概念的人；开创了“非监督迁移学习”这一重要研究方向；此外，他也首次提出了“翻译学习”（即“跨领域迁移学习”）和“迁移学习通用框架”等...2014 年，戴文渊和他的老师杨强成立“第四范式”，帮助企业提升效率、降低风险，获得更大的商业价值。评价：港科大学杨强教授：“戴文渊是全世界最优秀的青年学者之一，是产业界、特别是中国产业界 AI 落地的杰出代表，对人工智能领域的发展帮助极大。”07、教主-楼天成姚期智得意门生，公认大学生计算机编程第一人。有这么一个笑话，在编程界输入“教主”，会立即输出 “楼天城”。在程序猿界，其他人可以称得上牛X，但被冠以传奇之名的只有一个 ——「楼教主」个人历程：1986年出生于杭州，因为数学太差，所以选择计算机编程，高中后开始屡屡获奖，2004年保送清华大学计算机系。个人成就：2006年，TopCoder（世界顶尖程序员）排行榜全球第三，中国区第一名；2008、2009 年，Google Code Jam （谷歌全球编程挑战赛）冠军；2012年3月18日，Facebook黑客杯」名列第三；2016年创立无人驾驶公司小马智行（PonyAI），剑指L4级无人驾驶；获得中国自动驾驶创业公司最高估值。评价：“只要有楼天城参加的比赛，别人就只能想着怎么拿第二。”“他是未来推动中国互联网产业发展的中流砥柱”--李开复08、OpenResty -章亦春江湖人称“春哥”，编程之路起于看不懂而抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。创立的OpenResty开源社区，获得了锤子科技一百万的捐赠。个人历程：江苏镇江人，1999年，初中的章亦春第一次接触《C 语言程序设计》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；2017年，在美国创办了 OpenResty Inc. 公司。个人成就：OpenResty的创造者（OpenResty ：开源的 Web 平台，用于开发高性能和高动态的 Web 网关或者 Web 应用。）评价：“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”09、无线专家-陶建辉国际顶尖无线数据专家，连续创业者，写了34年的代码，如今50多岁，依然写代码。个人历程：湖南长沙人，出生于1968年，初中时手拿一本《Basic语言编程》，从此走上编程之路；1986年，考入中科大，认为计算机太简单而选择力学系；1994年，美国印第安纳大学攻读天体物理博士；1997年起，在美国从事无线互联网的研发工作；2015年荣获全国优秀无线互联网专家称号；个人成就：2008年创办和信，专注移动互联网IPPush和IP实时消息服务，2010年和信被台湾联发科收购。2013年创办快乐妈咪，专注母婴智能硬件和母婴健康服务，2016年初快乐妈咪被太平洋网络收购。2017年创办涛思数据，专注时序空间数据的实时高效的处理（存储、查询、计算等），研发出性能明显超越业内标杆产品的TDengine，可广泛运用于物联网、车联网、工业大数据、金融等领域。评价：51岁的陶建辉是圈子里名副其实的“老炮儿”，把物联网技术，做成了业界无法忽视的开源生态。企业中的技术大牛10、链家-惠新辰一个在网上搜PHP教程的初学者，华丽转身，成为PHP开发组核心成员，php开源组织中国唯一成员。人称“鸟哥”，PHP NG核心开发者，PHP5.4，5.5的主要开发者。个人历程：陕西人，1998年，高中时期着迷网络，在网吧做网管，后被父母勒令退学。后来考上西安交通大学，调剂到计算机专业。研究生调剂到北京国际关系学院，信息安全专业硕士毕业。2006年第一次面试雅虎被拒，由此开始在技术上发力学习。后来担任Zend公司外聘顾问, 任职百度、新浪，现任链家网技术副总裁兼总架构师。个人成就：PHP7的核心开发者，PHP5.4，5.5的主要开发者；作为PECL开发者，贡献了Yaf ( Yet another framework )，Yar ( Yet another RPC framework ) 以及 Yac ( Yet another Cache )、 Taint 等多个优秀开源作品；同时也是APC，Opcache，Msgpack等项目的维护者。评价：“PHP继父”11、LVS作者-章文嵩他是中国计算机产业界技术大牛，国防科大六院90级校友，是国防科大的传奇人物，努力推行开源，堪称中国开源第一人。个人经历：生于1973年，少年时痴迷于游戏，后考入于国防科大计算机系；原TelTel公司的首席科学家，ChinaCluster的共同创始人、阿里云CTO，花名为正明；2016年，离开阿里巴巴加盟滴滴；现任滴滴高级副总裁、中国计算机学会技术前沿委员会主席。个人成就：LVS（Linux Virtual Server）创始人；沉淀了CDN、TFS、Tair、Tengine、MySQL、JVM、Linux内核、图像搜索等技术和产品。评价：“他有技术人员的气质，也有一些文人的感觉。”12、阿里云-陆靖ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。中间持奖杯者为陆靖个人经历：为人太低调，找不到资料评价：开挂一般的存在、史上最强大脑、逆天宅男。最后一位，搞网络安全的牛人13、黑客-龚蔚上海人，是中国最早黑客教父，绿色兵团创始人，计算机信息管理专业毕业。其创建的绿色兵团注册成员最高达数万人，高手云集，可以说，那是中国黑客江湖大一统的时代！个人历程：大学时偶然接触到了中华学习机，苦求游戏破解方法时，看到台湾黑客coolfire（林正隆）的8篇黑客技术文章，从此走上黑客高手之路！个人成就：绿盟创始人，2001年中美对攻领导者之一，红客运动发起者。每当中国被欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗：将红旗插到DI GUO主义的每个网站头上。个人魅力：二十年前，是一个大侠，江湖里真正的大侠。不会轻易出手，但是一出手必会撼动江湖。网友评价：“近二十年里，龚蔚始终不变的，是追求无限可能的理想主义者，是一名真正的黑客。”————————————————版权声明：本文为CSDN博主「微笑很纯洁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/ityouknow/article/details/101444059","一、尤雨溪江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。2014年2月，开发了一个前端开发库Vue.js。没错，现在就是前端在广泛使用的Vue框架！Vue.js一经发布，就受到了很多人的追捧，可以说Vue.js就是人们苦苦寻找的那个好用的前端框架。后来的尤雨溪在patreon进行了众筹，因为他希望自己可以全职去开发Vue.js。众筹的效果是非常满意的，每个月他几乎可以收到1万美元的赞助。因此他将全部精力都投入到了Vue.js的开发和推广上面，他经常参加各种JS交流大会，分享Vue的开发经历，分享使用Vue进行开发的技巧和方法。很多国内的大公司还有小公司都开始使用Vue了，Vue.js在他的带领下，正在茁壮成长。不过尤雨溪曾经发过一条推特，表示自己全职做Vue以后，赚了上千万人民币，真是厉害。看到这条消息，这只能用一句话来表达我的心情了：本来想用普通人的身份跟你们相处，可换来的却是疏远。不装了，我是亿万富翁，我摊牌了！——王多鱼二、阿里扫地僧--“多隆”。蔡景现，一个更广为人知的名字是“多隆”他是阿里巴巴初创团队三名工程师之一，在一个月之内，从零起步搭建起了“淘宝”。非科班出身的他被称“码神”，又称“阿里扫地僧“。对于技术，既懂C/C++，又懂Java内核；既可以深入技术底层，又能切入到高层业务领域，从前端到后端，独自维护淘宝搜索引擎长达5年。他是阿里巴巴新增的三位合伙人之一。阿里CTO张建锋这样评价他：“多隆（蔡景现）做事一个人能顶一个团队。在内网的标签上，他被称为神，这不是恭维，在所有工程师眼中，他就是个神。多隆做事一个人能顶一个团队，比如说写一个文件系统，别人很可能是一个项目组，甚至一个公司在做，而他从头到尾都是一个人，在很短的时间内就完成了。多隆拥有着程序员所特有的钻研精神，多隆很喜欢写代码，彭蕾在解释为何他能入选合伙人时说，“很傻很天真，多隆写代码可以写到入定的状态”多隆一个人负责了淘宝第一版上线，自此，他的技术水平也突飞猛进，为了解决项目问题，他经常得在半夜爬起，去解决问题，排除故障。“编程是一个技术活，只要练的足够多，就能熟能生巧。”像多隆一样，我们只要多做项目，做学习，也总有成为技术专家的一天。顺带推荐一下，我用时一个多月帮同学们搜集的学习资源。总是有同学问我有没有什么资料推荐学习，索性全网大搜罗了一下，用时一个多月。帮大家搜集了3T的资源，包括计算机专业46个方向入门、进阶、实战的视频和电子书都有，有的都是靠买的，视频、资料、源码都有，大家可以去学习，记得帮我点赞就好三、陈皓江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈陈皓，网名左耳朵耗子，酷壳http://coolshell.cn博客博主，文章篇篇经典，强烈推荐大家去看看。17年以上软件从业经历，擅长底层技术架构，曾在汤森路透、亚马逊、阿里云等公司就职，目前创业中。他很谦虚，他说“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”而我觉得，他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。如果你看过他的文章，想必你也会喜欢上他。四、阿里-阮一峰上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！想必学习前端的同学，对他并不陌生。他的文章随处可见，我当年学习前端就是跟着他的博客来学的。他的博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！他的译著有：《黑客与画家：硅谷创业之你Paul Graham文集》《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等五、章亦春江湖人称“春哥”，春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。春哥先后在中国雅虎、淘宝、Cloudflare 就职，但开源世界是他如一的眷念。如今，春哥已全身心投入 OpenResty 的崭新蓝图，期待 OpenResty 未来能在工业界、互联网行业引领“机器编程”革命。有兴趣的小伙伴可以看下图灵社区对春哥的专访，详细记录了春哥的成长和心路历程。访谈人：六米图灵：从抄书到开源之巅：章亦春的程序人生六、陆靖ACM世界冠军，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑，鲜有编译错误。遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。人们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。中间持奖杯者为陆靖网上还流传着有关陆靖的传奇故事：某次代码遇到bug，良久无策。一个同事打电话问他，他在电话里说：”你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame，发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角“七、田春—伞哥Common Lisp 程序员，号称中国Lisp第一人，网名“冰河”，人称伞哥。我不想多介绍伞哥的成绩，我只想说一说网上流传的一些奇闻轶事，如此牛人，可见一般伞哥，大名田春。在网易从事MIS相关工作，在业内有极高的声誉。伞哥每天一身白衣，拿一把伞。他对网易内部的人说，伞是法律允许的最长的防身武器。一身白衣是他妈妈亲自给他做的。伞哥性格比较古怪，他坐在丁磊办公室旁边，经常冲进丁磊的办公室，拔掉丁磊的iphone，然后把自己的插上。后来，网易内部需要开发一套办公区wifi的系统，伞哥自告奋勇承担并且开发出来了，在公司内赢得了好评。于是伞哥走进丁磊的办公室说，这套系统找华为做要20万美金，我不找你多要，给我20万人民币就可以了。丁磊气急，直接找到他的直接领导说，你的员工怎么这样。然后后来又一次，伞哥又做了一些东西，又找到丁磊，说，上次只有20万美金，我不跟你计较了。这次开发的这套东西能卖200万美金。至此，丁磊坚持把伞哥开除掉了哦对了，补充一下，伞哥离开网易的时候。部门全体人员请他吃了一顿饭。于是他走的时候说，我不会怀念网易，只会怀念这些战友。我不会再回到网易，下次回来，就是我收购网易的时候程序员圈子里还有很多如明星般闪耀的牛人！有的人，凭一己之力开发出了几千人使用的开源软件有的创造了网络的神话，至今为之传诵有的授业解惑，或教师、或出书、或博客他们影响了一批又一批的后来者他们的名字经常被提起这是一群对技术有着最纯真热爱的人希望有一天，这里也有你的名字共勉码字不易，请帮我 @启舰 点个赞吧，谢谢大家我们下篇文章见",界yyds——楼天城，本ACM选手永远仰视的存在。他参加算法比赛的时候，这个世界上就没有能干得倒他的人，任何比赛都是第一名（只要他参加）。中国公认的大学生计算机编程第一人，经常以一人单挑一个队，在CEOI、ACM界无人不晓其大名，人称“楼教主”。晒一下履历：参加ACM比赛的时候，他的队友都是其他的 IOI 金牌，但是基本没他们事儿，他一个人单挑，ACM是3人团队赛，但是基本上有他的队伍，其他两个人只要负责读题，安静的做个翻译就好了……最可怕的是，人家并不是个只会做题的大佬，其他方面也强得一批：2007年，楼天城开发了WalkScript（WalkLan）（Walk脚本），构造了我国GIS软件的第一个测绘地理信息脚本语言。在美国参加Facebook举办的2011黑客杯比赛时，楼天城就被Facebook邀请参加面试，两次面试后很快就给了offer，是去硅谷总部，以清华博士应届毕业生的身份被Facebook聘任。毕业后，楼天城曾在Google总部工作，从事社交网络和机器学习相关问题的研究。2015年11月离开Alphabet（谷歌母公司）加入Quora公司。2016年4月，楼天城加入，参与无人车的技术研发，成为百度最年轻的T10级员工。2017年初，楼天城从百度离职，与离职百度的首席架构师彭军一起创立了自动驾驶创业公司（Pony.ai）。你梦寐以求的外企（Google、Facebook）他想进就进，百度T10、自行创业，可以说你这辈子可能都难经历过一回的事情，他全都经历了一遍。说个小彩蛋，我们的令狐冲老师是2006年国家集训队的，而楼天城是2004年国家集训队的，令狐冲老师在参加acm比赛的时候还请他面授过：） 也是ACM金牌选手，并先后入职了和FB，当然和大佬比还差得很远。最近我们令狐冲老师还出了一套（虽然与打acm比赛毫无关系，甚至acm选手看了都想笑，）但很适合夯实算法基础、一个月时间突击备战求职面试的题目，看这里：字符串处理 String考察情况考得很多，主要注重代码实现能力，算法上没有太多难点，通常是处理麻烦。学习难度：★★最少刷题数：20必刷题目：1.字符串查找2.最长回文子串3.有效回文串4.单词拆分I5.正则表达式匹配6.旋转字符串7.解码方法8.至少K个不同字符的子串9.字符串查找II10.全零子串的数量11.最长公共子序列12.编辑距离13.第一个只出现一次的字符14.乱序字符串15.Excel表列标题16.一次编辑距离17.删除无效的括号18.单词的添加与查找19.基础计算器20.比较字符串双指针算法 Two Pointers考察情况高频算法之王，变形特别多，算法不算特别难，但能快速想到和写好不容易。学习难度：★★★★最少刷题数：20必刷题目：1.颜色分类2.两数之和 III-数据结构设计3.排颜色4.最长子串覆盖5.有效回文6.带环链表7.交错正负数8.最接近的三数之和9.四数之和10.接雨水11.寻找重复的数12.字符大小写排序13.子串字谜14.检查缩写字15.奇偶分割数组16.三数之和小于17.移动车棚18.粉刷天花板19.装最多水的容器20.目标移动二分法 Binary Search考察情况考察频率中等，能写好写对不容易，二分答案的问题甚至很难想到算法，要背模板。学习难度：★★★★最少刷题数：10必刷题目：1.经典二分查找问题2.搜索旋转排序数组3.寻找峰值4.最长上升子序列5.木材加工6.书籍复印7.加热器8.地图跳跃9.寻找单词10.分享巧克力分治法 Divide＆Conquer考察情况考察频率中等，一般和二叉树一起出现和考察，题一般不难。学习难度：★★★最少刷题数：10必刷题目：1.子集2.数组划分3.验证二叉查找树4.全排列5.克隆图6.排颜色7.子数组之和8.LRU缓存策略9.单词接龙10.单词拆分I宽度优先搜索 BFS考察情况考察频率高，实现一般都不难。学习难度：★最少刷题数：5必刷题目：1.岛屿的个数2.序列重构3.拓扑排序4.课程表5.买卖股票的最佳时期深度优先搜索 DFS / 递归 Recursion考察情况考察频率高，主要是考递归会不会写。学习难度：★★★★★最少刷题数：20必刷题目：1.子集2.图是否是树3.子数组之和4.电话号码的字母组合5.K数和6.因式分解7.N皇后问题8.子模式II9.寻找丢失的数II10.二叉树的最小深度11.最小路径和12.数字组合II13.下一个排列14.分割字符串15.恢复IP地址16.删除无效的括号17.数独18.单词矩阵19.组合20.左叶子的和动态规划 Dynamic Programming考察情况国内大厂基本都考，北美主要是G/F喜欢考，其他公司考得少。学习难度：★★★★★最少刷题数：50必刷题目：1.栅栏染色2.爬楼梯3.约翰的后花园4.单词拆分5.书籍复印6.解码方法7.通配符匹配8.旅行商问题9.青蛙跳10.骰子求和拓扑排序算法 Topological Order考察情况考察频率中等，但每个公司基本都有一个这个算法的题。学习难度：★★★最少刷题数：3必刷题目：1.序列重构2.外星人字典3.拓扑排序链表 LinkedList考察情况中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。学习难度：★★最少刷题数：20必刷题目：1.合并k个排序链表2.带环链表3.翻转链表4.两个链表的交叉5.链表划分6.重排链表7.回文链表8.加一链表9.奇偶链表10.两数相乘二叉树 Binary Search考察情况中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。学习难度：★★最少刷题数：20必刷题目：1.二叉树的后序遍历2.二叉树的所有路径3.根据前序和后序遍历构造二叉树4.对称树5.找出树中每行的最大值6.寻找重复的子树7.BST中第K小的元素8.具有最大平均数的子树9.最小路径和10.二叉树的右视图堆 Heap考察情况高频，经常会用到，原理必须掌握，但不用掌握代码实现，应用必须掌握代码。学习难度：★★★最少刷题数：5必刷题目：1.丑数2.堆化3.滑动窗口的中位数4.大楼轮廓5.超级丑数哈希表 Hash Table考察情况高频，应用和原理都需要掌握且需要掌握代码实现。学习难度：★★★最少刷题数：10必刷题目：1.两数之和2.最长回文串3.两数组的交集4.数据流中第一个唯一的数字5.两数和 II-输入已排序的数组6.单词接龙7.有效回文串8.尾部的零9.跳跃游戏10.数字三角形并查集 Union Find考察情况考察频率中等，主要是G/F可能会考，不会的话很多时候可以用BFS替代。学习难度：★★★最少刷题数：3必刷题目：1.账户合并2.打砖块3.团队通知现在令狐冲老师的春招公益讲座《FB面试官揭秘算法面试速成技巧 - 怎样做到 Bug Free 和刷100题等于别人刷300题》已经上线，讲座中会教授各种刷题技巧、算法面试的考察情况等，感兴趣的小伙伴不妨一起来交流学习下~还有像是唐文斌，龙凡，杨沐，王小川，陈启峰，范浩强，陈立杰，陈丹琦，也都是水平超高的大佬，这里就不一一列举了，欢迎各位补充~,更新一下，我希望大家不要点赞了，我只是转述一下，不值得被点赞，被点赞的应该是他们------------------------------------LVS作者，章文嵩博士，不用多说了吧，有多少人的代码能进Linux内核呢？淘宝霸爷，我以前的上司评价霸业是这样说的，霸爷是一个人脑计算机。贴一下霸爷的博客，系统技术非业余研究 我一直是跪着看的,中国的所有程序员中，我只彻底佩服一位，他就是云风。我跟他在同一公司工作过，越了解他日常，我就更佩服他一筹。（我骑着摩拜单车赶去公司路上还经常看到他和老婆走路去上班）吴云洋（Cloud），出生于1979年2月5日，原网易游戏核心成员、杭州研究中心总监。 吴云洋毕业于中南大学机械自动化963班，具有丰富的游戏策划和程序开发经验，尤其擅长汇编语言及程序优化。早期在cfido和水木清华BBS发表了多篇关于游戏制作的文章，后来制作了第一个专题介绍游戏制作的GB码中文网站，收录个人文章超过百万字，在游戏界颇有名气。1998年中发布看书工具C-View 2.0，被多张工具光盘收藏。1999年初开始制作二维游戏引擎－－风魂系列，被多家公司和小组用于游戏制作。他是《大话西游》、《梦幻西游》、《网易泡泡游戏》等网络游戏的主力开发者，而《大话西游》和《梦幻西游》是网易最主要的两款网络游戏。2011年8月下旬从网易离职。吴云洋或将与在2011离职的网易首席运营官詹钟晖一起组建新团队创业。知乎有这样一个问题，云风在2001年拿5位数的月工资是什么水平？—— 在2001年的时候，丁磊邀请云风去广州加入网易，开到了10000/月，而云风是2000年的应届毕业生。前几年，他创立的公司也被阿里收购了，可以说，他早就财富自由了。但现在，他还工作在一线，开发国产游戏引擎，维护开源项目skynet，写着硬核的技术博客，最近的文章就是：构建工具从 Make 到 Ninja扩展 Lua 的常量类型选择开源项目的几点原则关于 skynet 调度器的一点想法(续)什么叫热爱技术啊，这就是。相反你看看一些有了名气的程序员，他们还写代码吗？有代表的开源项目吗？还会写硬核技术文吗？在我看来，云风才是顶级水平的程序员。附上长发飘逸帅气的云风大佬：各位可以去学习一下。学习不够的话，也可以看看山尽我的精华文章，虽然比不上云风大佬：赚大钱Tegus有人联系我做咨询，200美金一小时我是如何靠运气在美股一分钟赚2万人民币的HTTP 深入详解一步步手写 http 底层客户端不懂 http 协议，连 nginx 为什么这么设置都不懂如果这篇文章说不清HTTP2的本质，那就过来掐死我吧！我的HTTP/3学习笔记提升效率我是怎么用纯用命令行完成所有开发工作的Notion?Roam?OneNote? 做笔记我用Tiddlywiki设置一下shell，每开新窗口，就看一首诗计算机程序基础递归的实现——循环，汇编，CPS与 y 组合子,我读书的时候，特别仰慕两位大神：一位是云风——吴云洋，这是一位水平非常高的前辈，当年他一毕业就被网易 CEO 的丁磊一张机票接到网易去了，担任梦幻西游的主程序，这个游戏后来成了经典，也成就了网易。我那会儿读他写的游戏库代码以及他去网易的前后的故事、他如何招人、如何创业，非常钦佩。我上学的时候阅读风魂的代码，深有感慨，虽然代码的风格和变量命名如今看来略有稚嫩，但一个大学生可以熟练的用 C/C++ 和汇编写出流畅的程序，并且这个程序还能被商业公司使用的事迹，已经超过现在 99% 的计算机相关专业的大学生了。风魂源码下载：链接: https://pan.baidu.com/s/12gKthAEMSglYBqzrWiCH0w 提取码: suyy他的个人博客云风的 BLOG。大神就是大神，连发型和我们都不一样～～云风写了一本书叫《游戏之旅——我的编程感悟》，讲述了他学习编程的经历和成长的思考思考，书中学习技术的思路和见解值得学习。《游戏之旅——我的编程感悟》下载链接（链接收集于网络，侵删）链接: https://pan.baidu.com/s/1xY5DddFn01r3qUXUa2GY8g 提取码: qudz另外一位是梁肇新，超级解霸的作者。可能新一代的同学不知道超级解霸当年在国内作为媒体播放的地位，曾几何时，超级解霸就是媒体播放工具的代名词，是 PC 用户桌面的必备软件。梁肇新也是那个年代的技术偏执狂和 IT 传奇英雄。超级解霸及暴风影音是国内唯一能与微软Windows Media Player、Real Player 展开争夺的桌面播放器。大神笑容可掬老前辈也写了一本书，叫《编程高手箴言》，一听这个书名就很霸气，现在没人敢说自己是“编程高手”。《编程高手箴言》下载链接（链接收集于网络，侵删）（链接: https://pan.baidu.com/s/1QlFoKY0qAJI3ytuktWMWmA 提取码: sx9f）我学生时代开始学的是 Web 开发，后来学 PHP、ActionScript，看了这两位前辈的图书之后，坚定了我把底层原理好好学好的信念。用一句话勉励后来想进入软件开发的学弟学妹：不读洛阳纸贵之书，不赴争相参观之地，不信喧嚣一时之论。以是，大器初成。CppGuide我学习 C/C++ 十多年了，目前在大厂做架构，深知新手学习 C/C++ 和基础原理知识的重要性，因此特地给 C/C++ 开发的同学精心准备了一份优质学习资料————CppGuide，内容从 C/C++ 语言、网络编程、操作系统原理到完整的项目源码分析，同时这份资料也包括 C/C++ 学习方法、推荐的阅读书籍、简历指导和求职技巧等。原创不易，如果觉得有用，请给 @张小方 点个赞吧～,求伯君一个人啃泡面写出来的wps为何没人提,"打包狂魔 肥貓 @晏然FelixYan作爲 Arch Linux 的 DEV ，肥貓打的包能佔 Arch Linux 半壁江山。svntogit/packages.gitsvntogit/community.git然後你看Open Hub, the open source network上的 commit 統計：肥貓永遠穩居第一，超越後面 top2 ~ top 9 加起來。（當然其中有半數是給 Arch 打包的 commit 不過還是很厲害）肥貓說手上的計算資源太空了，不如爲科學事業做點貢獻，於是就上了 LHC@HOME 主頁：(其它事蹟未完待續）",必须安利一波：蚂蚁金服研究员王益在去年，他整40岁。从10岁开始，写代码整30年。这30年来，他当过“不务正业”的学生，创纪录地在大一就考下系统分析员，“单枪匹⻢”闯荡过从国内到硅谷的多家知名互联网科技公司，和AI领域许多传奇人物都有所交集。不惑之年对于许多工程师来说，或许已是需要焦虑的年龄，但40岁的王益在蚂蚁金服每天都过得很充实：起床，自由泳一千米，然后去做他最喜欢的事——写代码和组织大家一起写代码。2019年开源两个项目加入蚂蚁金服后，开源了两个项目：SQLFlow 和 ElasticDLSQLFlow 好比一个“翻译机”，能将分析师们输入的 SQL 命令翻译成 Python语 言，这样一来，分析师无需学习 Python，使用 SQL 语言就能够处理数据、训练AI模型，并使用训练好的模型来回答业务问题。ElasticDL 是一个分布式的智能学习系统。它能和 SQLFlow 一起，补足简短的 SQL 程序翻译成复杂的 Python 程序的过程中所需的信息。它的容错和弹性调度机制，能让集群的利用效率更高。坚持Code Review他与Code Review缘起于在Google写出的第一个程序。总共不过100行代码，却被来自美国的同事和好友提出了120行意⻅。在当时深受打击的他，在压制了情绪后，仔细去看那些意⻅，发现每一条都真诚且很有帮助。“从那一刻起， Code Review 成为了我们的工作方式。”每天和这些同事们一起coding，互相review，让中国工程师们很快知道了应当关注哪些地方，应当如何沟通合作。他说“开源和codereview不仅是个技术问题，更是管理学问题、社会学问题，关系到如何把大家组织起来变成更高效的团队。”更多有关王益老师的轶事，可以阅读这篇文章：支付宝王益：40岁写30年代码是一种什么体验？mp.weixin.qq.com/s?__biz=MzI0Nzc3MTQyMw==&mid=2247489667&idx=1&sn=197ec674e8e1ec6894bf64e881612cd5&chksm=e9aba0f3dedc29e5cca8fc23fddd2a983c367dbd363e4d28b4bf3ebe9bcb9528a22d5f5f9d28&token=230030431&lang=zh_CN#rd,机器学习领域的顶尖：caffe作者贾扬清，xgboost作者，mxnet主要贡献者之一陈天奇,左耳朵耗子叔，曾经的阿里P9+，目前做了一家技术创业公司：MegaEase。前段时间和程序员届的左耳朵耗子叔约过一次饭：耗子叔跟我谈了他在技术层面的积累和思考，以及每一天对梦想的坚持。可以说耗子叔是一个绝顶聪明的人，但言谈中，他始终在强调的却是：每一天的笨功夫。耗子书谈到作为技术人最快的成长方式：做最好的项目、看最经典的技术书籍，深以为然。作为程序员的我们，虽然不一定能做最好的项目，但看最经典的技术书籍还是很轻松就能做到的。我大学期间就是看了很多经典书籍，毕业就拿到腾讯的Offer，工作中也是保持看经典计算机书籍的习惯。另外我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，是伴随我从学生一路成长为腾讯高级开发工程师，360技术经理、360技术总监、中小公司CTO的打包全套，非常宝贵！点击下方链接直达获取：我已经帮大家打包好了，点击下方链接直接获取：耗子叔谈到他为什么离开阿里，以及离开阿里后做了一年的自由人。在这个期间耗子叔帮助饿了么、58等的公司解决服务器问题，很多时候一个团队都解决不了的事情，耗子叔凭借一己之力就搞定了。这期间，耗子叔通过技术咨询和支持的方式，月收入轻松50万以上，再加上极客时间上的专栏收入（年售卖量过千万），月收入妥妥超百万。但这之后，他还是选择了创业，为了做出一家不一样的公司。耗子叔还谈到了对大公司的看法、对996的看法、对新一代程序员群体的担忧，这次约饭，真的让我受益匪浅。耗子叔用一句话总结了996：这种行为是剥夺了程序员所有余闲时间，让程序员群体无法深度思考，也很难有未来。耗子叔也谈到他的梦想：让每一个程序员的学习之路更轻松，也期待未来耗子叔面向程序员的在线教育产品的问世～另外，程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易，这里送一本阿里P8撰写的算法刷题笔记，身边不少朋友通过它加入大厂：看看这本书的目录和排版，相当经典，还不赶紧看起来！祝大家都能在程序员的道路上一马平川。要是觉得不错的话，那就帮我@findyi点个赞，一键三连呗哈哈哈，半夜码字不容易（现在是凌晨1点50......）,作为一个经常听各种国内开发者大会演讲的人，有幸见过一些国内的大佬~贴一个Boolan顾问团队介绍的截图，我想这些人估计都是国内顶尖了：因为我平时主要专注于C++，这里再贴一下我仰望的几个国内C++大佬：侯捷：不介绍了，谁都认识吴咏炜：极客时间C++专栏作者，前Intel资深系统架构师，30年开发及架构经验潘爱民：《程序员的自我修养》作者之一，另外两个作者是潘老师的学生，前阿里首席架构师张银奎：《软件调试》作者，相当知名的内核专家刘新铭：编译器专家，精通编译器技术连少华：《C++代码整洁之道》作者，资深架构师陈硕&轮子哥：知乎上想必大家都认识从去年年初开始写文章以来，受到很多朋友关注，我把之前写过的所有C++文章学习资料全部系统地整理成PDF电子书，可以说干货满满，可以点击下方卡片获取：觉得不错的话，记得帮我 @程序喵大人 点个赞吧，收藏关注走一波，老铁们。,"这个我谈下个人感受：1、做病毒的人很厉害。陈盈豪 ，台湾鬼才，CIH 作者，极具程序员天分的少年，用当时的新闻报道来形容：看到记者全身发抖，面对电脑露出笑容 。在电脑还不是那么普及，网络还不是很发达的1998年，CIH造成全球 6000万台电脑瘫痪。厉害！2、搞网络安全的人很厉害。龚蔚，绿盟创始人，2001年中美对攻领导者之一，红客运动发起者，拉开了中国黑客为国争光的序幕。每当中国被外强欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗。将红旗插到帝国主义的每个网站头上。3、能做出大应用软件的很厉害。求伯君，金山CEO，1998年，他一个人花了一年时间写出了WPS第一版，不用多说了， 向前辈致敬。4、能流传很广的小软件很厉害张宴，消息队列服务httpsqs 作者， 这个小应用曾经占据了几乎所有中小网站的服务器，厉害。5、能写内核的很厉害Axel Lin , yinghai lu ,herber xu ,这3个人是 Linux Kernel Patch Statistic 上中国排名前三的贡献者，不想太解释， 反正很厉害。6、我们单位的小孙同学也很厉害小孙（其实代表了广大一线开发者），去年一年的时间，写了30多万行代码，着实让我震惊，有图为证：－－－－－－－－－－－－－－－－今天先写到这里， 有赞的话我再继续补充。",李可文。高中在单片机上开发程序，获得全国科技博览会金奖。谢绝清华保送，参加高考考取北大计算机专业。他为人所知是在大学时，写出可以玩GBA游戏的DreamGBA模拟器，精确性和性能为当时业界GBA模拟器之最，在全世界模拟器玩家中名噪一时。为惠普PDA移植自己开发的GBA模拟器。以当时移动设备较为孱弱的性能，全世界的GBA模拟器里只有李可文写的移植版能够流畅运行。逝世前几个月（2003年底）还在商谈成为某投资千万的移动软件平台的技术总监。1979年9月出生，2004年7月病逝。,"郭忠明 自荐一下代表作: 高性能内存分配库，大约比 google tcmalloc 库有一个数量级的性能提升。基础库领域，少有的超越美国的一个项目。特点： 擅长写高性能的代码，重写过C++ std库的多数组件，都有性能提升。擅长多线程高并发领域，熟悉。代表作 最新版本.so接口的内存分配库不仅快， 而且在其它指标方面也有很多亮点，例如内存碎片更小等。代码总长度也是同类软件中最长的，大约4.2万行源码，考虑 corner case 很多的代码。目前有开放二进制so文件，测试源码，用户手册（最新大约52页，详细介绍了整体设计方案和思路，以及很多的其它内存库没有考虑过的黑科技）下载，下载链接见后。下面这篇大约50页，写于今年年初这篇是核心代码刚完成时的简介，两三页，写于去年年初测试的性能情况如下，单位均为ns, 下面是性能测试截屏。内存分配库so文件和性能测试源码 在下列地址下载"
被公司卸磨杀驴能把代码删除吗？,空,驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。,想反抗又不敢反抗的时候可以试着加倍努力干烂活，撸起袖子加油干.....烂活态度一定要端正，水平一定要稀烂——我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示他敢10点给我打电话，我就凌晨1点给他回,删除代码你什么也得不到，除了泄愤外屁用没有不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度活用变量闭包，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算尤雨溪来了都得琢磨半天大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山内存能不回收就不回收了，等着它内存泄漏不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人,首先，屎山，bug，是合法的代码写的差是合法的代码中引用一个你自己的库(一般情况下)是合法的写的代码先不提交是合法的git合并时删掉一些代码也是合法的(合并代码又冲突嘛)写代码不考虑特殊情况也是合法的sql不防注入是合法的域名解析源站ip是合法的漏洞不修是合法的多用点停止支持的库是合法的多写点报错自动退出是合法的，什么参数错误管他什么直接报错判断写严格点是合法的，发现问题立刻报错而且不输出问题不写注释是合法的什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去突然又想到一个：写前端的兄弟们，用webpack来格式化代码如何～但你恶意删代码1.(可能)没有效果，gitsvn直接恢复2.如果删掉无法恢复那等着公司法务吧，违法的兄弟们评论区不看后悔一辈子,卧槽，你们都要埋雷给公司造成损失吗？我当年正常写就行。,十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。当时环境是Windows Server，我开了远程权限，写了脚本放在计划任务里，预防对方付款上磨磨唧唧。后来担心的事情还是发生了。我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。,劝开公司的，对各种技术人员好一点，如果你用maya，这两年估计你遇到过，有一个病毒，中招就会现实这个：程序员要是泄愤，删代码并不是好主意，在代码中加东西才是好方法。,接过一个项目功能很简单，但是防破解的功能我搞了一个星期然后给对方，每次操作软件会跳出框框说免费试用15天15天内未输入注册码的话保持调度通讯功能，但不能操作设备；不到3天就马上打款了,不能，这样犯法。但是代码质量不过关是可以的。你品你细品。,"删代码涉及到违法， 可能会被抓去啃窝窝头，得不偿失。但是在项目里面“一不小心”留几个暗坑，或者因为“技术菜”留下大坨小坨的“屎”，相信大家都是可以理解的。真是没想到，我居然被卸磨杀驴了。入职一家公司，转正不到一个月， 帮他们把框架搭建的差不多了，然后就没我什么事了。这操蛋的，早知道这样应该在框架里面""拉屎""的！一年后更。现在没啥事，就来说说这件事。这公司估计就是招我进去帮忙搭建系统框架的，框架搭建的差不多了，卡着我工作还没满半年的时间节点把我辞退了，很爽快的给2N，谈判过程不超过5分钟。他们很清楚，我也心知肚明。过了一两个月吧，这家公司的技术人员联系我，说框架有问题，他们实在是搞不定，希望我帮帮忙，我找了个借口敷衍过去了，没理。随后又找我好几次，说顶不住上面的压力了，再搞不定他也要走人了。我心软了，指点了几句，告诉他解决思路。这个问题呢，其实我是知道的(当然不是我故意埋雷的)，只不过当时忙着完善日志收集和监控系统，那个问题想着放一放，后面再抽时间解决的。只是他们太着急了，还没完全搞完，就图穷匕见了。",抗战的时候，游击队剪电话线的时候，剪断的时候还得再给它“接”起来，让外表看不出来。,额。核心层用C++写的。大佬告诉我，不要用指针。然后我就把指针的星号都藏了起来…为了效率，也为了懒省事，数据交换经常用数组越界溢出的方法。全局变量和局部变量连续混用。除了我自己，别人谁都看不懂。。看懂了也不敢动。尤其是各种溢出，据我师弟说那些代码基本上都是鬼见愁的。。。,我打的人生第一份工，就被老板卸磨杀驴了。我的报复是：我在中午没人的时候，把干活的三台电脑都下载了一个东西，这个东西很神奇，只要一关机，就会重启，然后进入DOS系统格式化非系统盘外的所有硬盘，而且是悄摸摸的，显示器上给你显示的是在检查硬盘错误，让你别动。公司是个广告公司，当时所有的资料都保存在那三台电脑里。这是2001年的事儿了。没有人怀疑是我干的。因为上午的时候断了一次电，3台电脑都非正常关机了，他们都认为是断电导致的硬盘损坏。,学学Twitter的程序员，被裁掉又被马斯克请回来,,删掉干嘛？不如“加点啥”。删是一种破坏性行为，是对公司财富的侵害。而“加”是正常的工作行为，拿工资就是做这个的。,某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。真是……太高看我了，写完不到一个月我基本就忘光了,千万不要这么干,// 补充下，有的人说我捞，这种有问题的代码一眼就看出来了。那我就分享个我自己的事吧：上学那会自己找的实习，开发什么智慧农业，无非是c51挂几个传感器，读到数据用lora传出去。我哼哧哼哧做了一个月，有一天主管跟我说，想看看做的咋样，让我把源码，还有搜集到的资料都压缩给他看看（小作坊没有搞svn.git这种）。我一想不对啊，你直接看我的开发板不就行了？怕不是要卸磨杀驴吧，我就随便在几个数据采集的地方，加几个随机值，随机值名字起得挺正式，看起来就是校正值啥的，给主管发过去。后来过几天我就被开了，某天qq收到一个人加我，说大哥我是接替你的人，用了你的程序，感觉有点不对劲啊，数值忽高忽低，他们一堆人研究好久也不知道咋回事，我说不知道啊，反正我用是正常的，主管知道的。哦对了，那个项目还是挂在某省会的什么智能研究院下面，看似高大上，实则水的一批。～～～～～～～～～～～～～～～～最好不要这样做，因为员工在公司的成果，属于公司财产，删代码可能负法律责任。不过我听说有的程序员水平太次了，写的代码烂不说，还经常搞出一些极难复现的Bug。比如说在一些不起眼的地方，加个随机数，外面还套个极小概率的if条件。这样的程序员简直是公司之耻，我劝题主以此为鉴，多去修炼技术，少想歪门邪道。,在我任职的第一家公司，我只要认认真真写代码，公司多少会损失点什么
Bug是如何产生的？,最好可以通俗的解释一下！,领导：修个房子。程序员：好的，马上开始打地基！领导：你看那隔壁那木房子就没有打地基，不要在小事上浪费时间，一个月水平面上面什么都看不到，你kpi不要了？这是敏捷开发。一层房子修好。领导：我觉得两层楼的视野好，再加一层。程序员：可是我们没有地基，重新打地基要时间……领导：你一楼都修好了，照着再修个一模一样二楼很难？还要很多时间？这是高速版本迭代。二楼修好。领导：天天走路累死了，你再修个电梯。程序员：可是……领导：没什么可是的，地基不稳？就在房子边上搭个电梯就行了嘛，不稳拿根木棍撑一下，这都不懂？这是版本优化。电梯修好。领导：我觉得顶楼再加个游泳池就好了。程序员：这个结构行业翘楚的房子也不支持呀！领导：那不正显得我们牛逼么？修快点，夏天要来了。这是快速功能追加。游泳池修好，看着摇摇欲坠的房子，程序员跑路了，领导找来新人继续。领导：我觉得游泳池水不够满，你加点的，一楼光线不好你在墙上打个窗户。新人：好的，没问题领导，马上加一桶水，马上砸墙这是打补丁。房子塌了，电梯倒了，游泳池垮了……领导：真是个废物，就让他加桶水，居然能把房子弄倒了，你说这是多没用？新人：我真的就加了桶水，我怎么知道为什么。这是软件莫名崩溃。,老婆给当程序员的老公打电话：“下班顺路买一斤包子带回来，如果看到卖西瓜的，就买一个。”当晚，程序员老公手捧一个包子进了家门……老婆怒道：“你怎么就买了一个包子？！”老公答曰：“因为看到了卖西瓜的。,bug产生于人力有时穷。知乎上看到的段子，但我不记得是在哪个答案了。。侵删：一万个测试工程师在酒吧门外呼啸而过一个测试工程师走进一家酒吧，什么也没要一个测试工程师走进一家酒吧，要了一杯啤酒一个测试工程师走进一家酒吧，要了一杯咖啡一个测试工程师走进一家酒吧，要了0.7杯啤酒一个测试工程师走进一家酒吧，要了NaN杯Null一个测试工程师走进一家酒吧，要了2^32杯啤酒一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了。。,我以前玩过一款游戏，叫做永恒之塔。里面有个巨大的BUG.在新手村打怪，一只怪最多掉5块钱。组队平分，每人1块。但组队可以组满6个人。于是当你组满6个人打一只怪的时候，这5块钱就不够分了。因为1是货币的最小单位。于是惊悚的事情就出现了。系统开始每人几十万，几百万的分。这个BUG就是个逻辑错误。最后，因为刷钱被封号了。,请出一组有点久远的图片。---------客户是这样描述需求的项目经理是这样理解的设计出来是这样的开发出来的是这样的测试的时候是这样的顾问是这样形容的实施是这样的顾客得到的是这个样子的顾客真正想要的是这个样子的,飞机上，乌鸦对乘务员说：给爷来杯水！猪听后也学道：给爷也来杯水！生气的乘务员把猪和乌鸦扔出机舱。乌鸦笑着对猪说：傻了吧？爷会飞！（出现BUG）这时，猪伸出翅膀扑哧扑哧问道：你说什么？（修改BUG后）乘务员发现自己莫名其妙在飞机外飞，同时还给乌鸦和猪两杯水，而且三个飞得比飞机还快......,哪有什么bug，都是规则内的可行解。,根据我从业十五年的经验，bug一共就三种原因：我艹，没想到！我艹，打错了！我艹，你没告诉我啊！,之前在网上看到一组关于程序员的漫画，觉得用来回来这个问题很贴切！侵删最后和程序员身边的朋友们嘱咐一句，就算程序员的工位再乱，也不要帮他整理。否则，当心会毁灭世界哦-----------------------------------------我是分割线-----------------------------------------请各位大佬支持一下我的这篇原创问答：Java 的视频教程有推荐吗？10 赞同 · 0 评论回答,"系统已上线,一切正常!",理发师：我给这个村里所有不给自己理发的人理发。bug：理发师给不给自己理发？补丁：给村里所有不给自己理发的人(不含理发师自己理发。)测试：七大姑八大姨都来理发试试用户：给我的牛理个发。,通俗易懂。,Bug的产生，通常分为三种类型：逻辑漏洞、越界访问、条件考虑不全面。为了便于你理解，我以女朋友来大姨妈举例。某日，你收到了女朋友的一条微信，跟你说自己来大姨妈，肚子疼。这时，你要写一段文字回复，这段回复你就可以认为是你写的一段代码。这段代码需要达到的目的是让你的女朋友感受到你对她的爱，增进（至少不减少）你俩之间的感情。我们可以把这个目的当成你对自己提出的这段代码背后的产品需求。1，逻辑漏洞：你：我叫外卖来给你买个热饮吧。女朋友：滚！你是想让我从床上趴下去给外卖小哥开门么？分析：低级错误，程序执行后无法达到想要效果。2，越界型：你：我给你室友打个电话，让她帮忙照顾下你。女朋友：滚，谁让你联系我室友的。分析：访问了非法区域，造成程序崩溃。3，条件考虑不全面：你：亲爱的，我早就知道有这天，所以暖宝宝、热水壶、痛经药....(此处省略一万字)，我都给你准备好了，就在家里。女朋友：我现在在地铁站。分析：你以为你万无一失，但你永远都不知道输入参数究竟是什么！除了上面三种主流错误，还有一大堆，这里就不细说。我跟其他答主不一样的是，我不光要告诉你们Bug是如何产生的，我还要跟大家解释我们程序员平常如何防范未知Bug，因为你们也看到了，Bug就像你女朋友的微信，你永远不知道她下一句攻击你哪个点。所以，这里要祭出利器：异常捕获。异常捕获一般依靠try，catch语句。很好理解：try（尝试）一下，如果有问题，直接捕获（catch）住，防止程序崩溃。什么，你没听懂？我这么写你可能就懂了：女朋友：我来大姨妈了，好难受。try {你：xxx。}catch(Exception e) {你：对不起，我触发了“e”，都是我不对，你现在选个包包，我去给你买。}女朋友：爱你！完。补充：评论中有人提到了没有理解需求导致的Bug。这里我要讲一下，对于普通程序员来说，那可能就是Bug。但是对于我胖总来说，那是我设计的feature。对于能够产出结果的东西，只要运行时没崩溃，我都能把它描述成是我故意编写的功能。所以，在需求错位的时候，到底是低头背锅，认了那就是一个Bug；还是昂首挺胸，说就是那么设计的功能？这！不光是你的态度问题，还决定了事情的走向。与其战战兢兢地怕出了Bug惹女朋友生气，不如思考如何霸气回应她的Diss，把自己的所作所为描述成你精心设的结果，前提是要有理有据。来，跟我一起说：世界上本没有Bug，只要你放下舔犬的自卑，迎难而上，用顶层架构者的语气反击所有指出你问题的人。你收获的不仅仅是他人的尊敬，更是没有年终奖的清心寡欲和被逐出公司的人生自由，以及孑然一身远离女色的开悟人生。加油，你行的。,洗衣机厂家，打死也没想到，自己的产品总出问题，原来他们拿它洗土豆,程序员转行后，准备开一家咖啡店经过精密的设计、采购、装修后，程序员觉得不错，决定试运营，请一个测试来喝咖啡测试走进了咖啡店，点了一杯卡布奇诺，然后拿着咖啡高高兴兴的走了……测试走进了咖啡店，点了一杯美式，然后拿着咖啡高高兴兴的走了……测试走进了咖啡店，点了一桶焦糖拿铁，然后扛着咖啡桶高高兴兴的走了……测试走进了咖啡店，点了一箱五粮液，然后拎着五粮液高高兴兴的走了……测试走进了咖啡店，点了一只拉布拉多，然后牵着拉布拉多高高兴兴的走了……测试走进了咖啡店，点了一个老婆，然后抱着老婆高高兴兴的走了……程序员对这一天的试运营很满意，于是第二天正式开业开业当天，一个顾客走进咖啡店，问“洗手间在哪？”然后咖啡店炸了,说一个DNF里面比较经典的bug1/史诗级装备因为属性强悍是不允许交易的2/死亡之塔内不允许任何物品进行交易这两个条件合并起来你能猜到会触发什么bug吗？没错！我亲眼见过有人在死亡之塔里面交易史诗装备，嗯~双重否定表示肯定~没毛病！,一个测试工程师走进一家酒吧，要了一杯啤酒；一个测试工程师走进一家酒吧，要了一杯咖啡；一个测试工程师走进一家酒吧，要了0.7杯啤酒；一个测试工程师走进一家酒吧，要了-1杯啤酒；一个测试工程师走进一家酒吧，要了2^32杯啤酒；一个测试工程师走进一家酒吧，要了一杯洗脚水；一个测试工程师走进一家酒吧，要了一杯蜥蜴；一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@；一个测试工程师走进一家酒吧，什么也没要；一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来；一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿；一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷；一个测试工程师走进一家酒吧，要了NaN杯Null；一个测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶；一个测试工程师把酒吧拆了；一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱；一万个测试工程师在酒吧门外呼啸而过；一个测试工程师走进一家酒吧，要了一杯啤酒';DROP TABLE 酒吧；测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了。网上搬运的,"刚修复了一个BUG,给老板演示的时候"
将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,"因为 bug 和 debug 已经属于 IT 领域专有名词，错误和除错这种词义宽泛的词语不足以准确描述其特指软件相关的含义，中文译名也「专有」一下未必不可行。专有名词不会污染常用语。不全是开玩笑，一个尝试，想试试那些所谓不能翻译的英文是不是真的不可译。至于怪诞感，为了与常用语明确区别，怪一点是有意为之。专有名词，只用于特定场景，与常用语区分是必要的。英文并不是没有同义词来指缺陷和错误，但他们故意用虫子这个词，就是为了让它成为特指的专名。【 bug 】：1.（especially American English：a small insect）小虫子2.（计算机程序的）错误，故障﹐缺陷。【 debug 】：（计算机程序的）除错。【 蚆 】bā ：貝屬，海蚆。《正字通》：“蚆，貝屬。今雲南邊侇貨多用貝，呼爲海蚆。本草作𧵅。” 蚆、貝，一聲之轉。古時以貝殼作貨幣。（bug 即是码农的麻烦，也是码农的经济来源。）【 蛒 】 gé：蛴螬。又名蛭蛒。金龟子的幼虫。《方言》：“蠀螬，梁益之間或謂之蛒，或謂之蛭蛒。”【 金龟子 】：昆蟲綱，鞘翅目，金龜子總科昆蟲的通稱。已知3萬餘種，中國有1300餘種。徐珂《清稗類鈔》：“金龜子，俗稱金蟲，體長六七分，金綠色，背有甲，六足，種類甚多。有一種害稻者，其幼蟲色白，是為蠐螬，棲稻根，齧食之。及化為成蟲，仍食稻葉，旋產卵於葉鞘，農家苦之。”（农家苦之：码农苦之。）【 揥 】dì ：捐弃，去除。（词根 de：取消、除掉、去掉）","阁下不会就是翻译出“鲁棒性”""巴勒斯坦""""泰晤士报""""车厘子""""红地厘蛇果""""老头滚动条""“半条命”“套套逻辑”“套接字”“诱导公式”“方程式赛车”“把属性映射为属性”""双亲委派机制""""酉矩阵""""秩""""卡宾""""氮宾""""叶立德""""缺省""""渠化""""死投""的那位姐吧。————更新，应要求添加一下这些词的解释：鲁棒性：robustness，robust意味健壮，强壮，应该译为健壮性，稳健性，强壮性，稳定性均可，译者不知何故要音译，由于词汇太过古早，也可能是译者当时不懂这个词的含义，总之结果导致其在国内教材中广泛使用，造成了大量学生的迷惑。诱导公式：原文是reduction formula，即简化公式，译者翻译的时候可能用的是盗版书，国内标注的是induction formula，也可能是记错了单词的意思，因为其把reduction（减少）当作induction（归纳）来翻译，但最终的译文甚至没有体现出induction的意思，也就是说经过了两次错译才最终变成了“诱导公式”这个不明所以的名字，并且被我国高中教材广泛使用，以及各种教辅，培训班强行解释“诱导”的意思，导致越传越广。半条命：应为半衰期。老头滚动条：应为上古卷轴。车厘子：cherry就是樱桃，译者非要音译出另一个物种来。红地厘蛇果：delicious apple就是苹果，译者非要把delicious音译为地厘蛇，再加上红字，听起来像是“红地”这个地方的物种“厘蛇果”。泰晤士报：原文是“The Times”。并没有“泰晤士（Thames）”这个发音，不仅丢失原义，还让人对该报纸的发行地产生误解。巴勒斯坦：应为巴勒斯丁，见答主“知乎用户ObE5mQ”的回答：套套逻辑：tautology，原义“同义反复”，纯音译导致的怪异翻译。套接字：Socket，原义插座，接口。方程式赛车：见用户“西瓜回路遮断器”的评论：formula使用了错误的意义。把属性映射为属性：把property映射为attribute，译者（可能是机器）翻译时没有考虑其意义。双亲委派机制：parent delegation，应为父类代理，当然，对于某些用户，非要译作母类代理我也没有意见，译为“双”会让人误解程序的继承关系。酉矩阵，秩：Unitary Matrix，Unitary即单一的，被译作“酉”，中文意义看起来像是指十，鸡，很多，或者两年半。rank即排，列，被译作“秩”。卡宾，氮宾，叶立德：见知乎用户SZnCu的回答：缺省：默认值，原文default，不知道为什么要翻译出“缺省”，同时失去了缺少，默认两个意思。渠化：见用户庆晓筱的回答：死投：Dead Drop，标准译法：固定情报投放点。见用户黄金大亨的回答蚆蛒：原文bug，译作“蚆蛒”，一晃眼还以为是浏览器没安装UTF-8出乱码了。",我觉得不如叫 涤悖格涤 洗涤，去掉悖 不合理，冲突，错误格 格式，标准，规范，结构段落悖格 谐音bug，导致错误，冲突或不合理的代码结构。我觉得比你编的那个更加复合翻译的三要素，信达雅。,我觉得不巧妙。因为你这样文字太多了，文字笔画太多就不好写了。可以简化一下。例如bug，音是：八各。为了简化，可以把“各”简化成为“𠂊”，八字没必要简化了，就两笔。为了区分汉子和翻译，咱们可以把这部分文字增加角标。最终成品：bug→バグ,挺不错的，一眼就有种字符集出错的感觉,目前来说，我见过最秀的英文翻译是战锤的四大邪神名字的翻译，读音相似的同时还彰显了人物设定（而且字没那么生僻）给路人来段背景和介绍恐虐：Khorne，代表是颅骨与鲜血，设定中代表难以遏制的好斗，丧失心智的疯狂以及淹没战场的滚滚血海，信仰恐虐的自然都是战场狂战士。纳垢：Nurgle，代表瘟疫和无穷无尽的死寂，世界上所有瘟疫都是在纳垢精心调配下产生，纳垢接纳所有信徒，不论老丑、善恶。色孽：Slaanesh，代表放纵享乐堕落和感官刺激。欲望，骄傲和自我放纵是所有追随他的人的标志。奸奇：Tzeentch，混沌四神里最多变狡猾的邪神。有人说奸奇来源于希望，象征着智慧。但那早已被邪恶的混沌所扭曲，奸奇的希望来源于受害者身处绝境无限的绝望与千方百计的求生，智慧则来源于那无穷无尽的算计与阴谋。另外附上台湾（港译）译名：恐虐-Khorne-哥达/科恩纳垢-Nurgle-乐高/奈格色孽-Slaanesh-沙莉士奸奇-Tzeentch-辛烈智相比较下是不是看得出来译者很用心更正：根据评论区 @滴滴滴滴 大佬提醒，现行四神的翻译最早反而是出自台湾民间论坛的，后来被gw收编，大陆传入时采用的台版翻译，最后也被gw简中部门采纳答主举的例子其实是港译，至今仍是gw港版官译，偏向粤语音译 大陆锤圈港译一度和台译分庭抗礼，现在很多老锤友都更习惯叫色孽.“沙历士”调查少了，我的问题感谢评论区 @苏止胡 提醒我还有绿皮（Green skin）的翻译先说背景，绿皮是战锤世界里的兽人（Orks），属于比较欢乐，每天只知道打打沙沙沙沙沙的种族，可以理解为绿色并且爱打架的小黄人，绿皮的科技基本全内置在dna里，并且带有搞笑角色属性，最爱做的事就是四处捡垃圾然后拼个不稳定但是能用的武器出来整天打打杀杀的兽人信仰搞哥（Gork）和毛哥（Mork），搞哥野蛮而狡猾，毛哥狡猾而野蛮绿皮的终极泰坦单位叫大脚（Stompa）来源于英语单词跺脚（stomp）国内一般戏称这玩意叫古巨圾，虽然没音译不过蛮传神的这玩意长这样另外还有绿皮的技术科研单位技术小子（Mekaniak boy简称Mekboy），这玩意的高级版本叫做大技霸（Big Mek）兽人聚在一起会发动一次声势浩大的Waaaaaaagh！！！，而他们的头领则叫做哇博士（War Boss）,我见过把【bug】翻译成【幺蛾子】的，比你这靠谱多了,把Coca-Cola翻译成蝌蝌啃蜡的人该不会也是你吧！,你自己大可以尽情的使用。但是建议不要跟我们讲。大伙真没兴趣了解你那两个破虫子。这个答案纯是被这个破问题气乐了、骂了句街，没想到有人看。多说两句。当我看到题主的这种想法，我直接想到的是另外另一件事情。有些人在使用手机的时候，不喜欢设计师精心调教好的默认字体，而是换成了花里胡哨的个性字体。我今天刚收到过这种人发来的屏幕截图，一打开就感觉到两眼一黑。此图片来自知乎上的另一个问题这和题主的想法的共同点在于，在不适合追求美的地方追求美。美当然是我们要追求的，照片，电影，诗词，小说，家居装潢，有得是地方让我们追求美。没必要在专业词汇和手机字体这样的、极大的影响着信息的传递效率和准确性的地方，牺牲效率和准确性去追求美。或者说，这些地方的高效所带来的益处，完全能让我们在其他地方得到更多“美”。比方说，一本修仙小说，说有一种灵猴，能在太虚之中操控复杂的大型法术，叫乘虚猿；但是太虚中会滋生干扰法术运行的精怪，公的叫蚆，母的叫蛒；乘虚猿每天必须要去除蚆蛒来使法术正常运行。这个梗虽然够烂，但毕竟是在小说中，我是乐于见到的，因为小说就是追求娱乐的地方。但题主说的是“不全是开玩笑”“是不是很巧妙”，洋洋自得的认为，这种巧妙就是我们应该追求的东西。其实错了呀，管你《方言》《正字通》云云，这几个字就是生僻字，就是徒增了理解难度，就是进行了不必要的翻译，就只有你自己会玩这玩意儿。如果有人对这东西感兴趣、觉得还不错，大概率是因为他平时并不编写程序，也用不到debug。总之，把生产力的东西归于生产力，把美的东西归于美。,恭喜你，发现了片假名,看大家的评价，有一种小学男生花几天想了个自以为很酷的网名然后被嘲讽的美。,我记得有个问题是“文字有没有”，这个题目就很适合作为例子，那五字被题主强行堆成词，一看就莫名烦恶难受，有一种强烈的不舒服的感觉。,百度搜索鲁棒性,挺好，挺好笑的。如果真的把 bug 显示成蚆蛒会有人觉得你电脑出了 bug。




